[["from", "django.utils.translation", "import", "ugettext_lazy", "as", "_", "from", "horizon", "import", "tabs", "class", "NetworkProfileTab", "(", "tabs", ".", "Tab", ")", ":", "name", "=", "_", "(", "'Network Profile'", ")", "slug", "=", "'network_profile'", "template_name", "=", "'router/nexus1000v/network_profile/index.html'", "def", "get_context_data", "(", "self", ",", "request", ")", ":", "return", "None", "class", "PolicyProfileTab", "(", "tabs", ".", "Tab", ")", ":", "name", "=", "_", "(", "'Policy Profile'", ")", "slug", "=", "'policy_profile'", "template_name", "=", "'router/nexus1000v/policy_profile/index.html'", "preload", "=", "False", "class", "IndexTabs", "(", "tabs", ".", "TabGroup", ")", ":", "slug", "=", "'indextabs'", "tabs", "=", "(", "NetworkProfileTab", ",", "PolicyProfileTab", ")"], 0]
[["'Greenthread local storage of variables using weak references'", "import", "weakref", "from", "eventlet", "import", "corolocal", "class", "WeakLocal", "(", "corolocal", ".", "local", ")", ":", "def", "__getattribute__", "(", "self", ",", "attr", ")", ":", "rval", "=", "corolocal", ".", "local", ".", "__getattribute__", "(", "self", ",", "attr", ")", "if", "rval", ":", "rval", "=", "rval", "(", ")", "return", "rval", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "value", "=", "weakref", ".", "ref", "(", "value", ")", "return", "corolocal", ".", "local", ".", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", "store", "=", "WeakLocal", "(", ")", "weak_store", "=", "WeakLocal", "(", ")", "strong_store", "=", "corolocal", ".", "local"], 0]
[["import", "eventlet", "eventlet", ".", "monkey_patch", "(", ")", "import", "contextlib", "import", "sys", "from", "oslo.config", "import", "cfg", "from", "openstack_dashboard.openstack.common", "import", "log", "as", "logging", "from", "openstack_dashboard.openstack.common", "import", "rpc", "from", "openstack_dashboard.openstack.common.rpc", "import", "impl_zmq", "CONF", "=", "cfg", ".", "CONF", "CONF", ".", "register_opts", "(", "rpc", ".", "rpc_opts", ")", "CONF", ".", "register_opts", "(", "impl_zmq", ".", "zmq_opts", ")", "def", "main", "(", ")", ":", "CONF", "(", "sys", ".", "argv", "[", "1", ":", "]", ",", "project", "=", "'oslo'", ")", "logging", ".", "setup", "(", "'oslo'", ")", "with", "contextlib", ".", "closing", "(", "impl_zmq", ".", "ZmqProxy", "(", "CONF", ")", ")", "as", "reactor", ":", "reactor", ".", "consume_in_thread", "(", ")", "reactor", ".", "wait", "(", ")"], 0]
[["from", "openstack_dashboard", "import", "api", "from", "openstack_dashboard.test", "import", "helpers", "as", "test", "from", "neutronclient.v2_0", "import", "client", "neutronclient", "=", "client", ".", "Client", "class", "VPNaasApiTests", "(", "test", ".", "APITestCase", ")", ":", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_vpnservice'", ",", ")", "}", ")", "def", "test_vpnservice_create", "(", "self", ")", ":", "vpnservice1", "=", "self", ".", "api_vpnservices", ".", "first", "(", ")", "form_data", "=", "{", "'name'", ":", "vpnservice1", "[", "'name'", "]", ",", "'description'", ":", "vpnservice1", "[", "'description'", "]", ",", "'subnet_id'", ":", "vpnservice1", "[", "'subnet_id'", "]", ",", "'router_id'", ":", "vpnservice1", "[", "'router_id'", "]", ",", "'admin_state_up'", ":", "vpnservice1", "[", "'admin_state_up'", "]", "}", "vpnservice", "=", "{", "'vpnservice'", ":", "self", ".", "api_vpnservices", ".", "first", "(", ")", "}", "neutronclient", ".", "create_vpnservice", "(", "{", "'vpnservice'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "vpnservice", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "vpnservice_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "VPNService", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_vpnservices'", ",", ")", "}", ")", "def", "test_vpnservices_get", "(", "self", ")", ":", "vpnservices", "=", "{", "'vpnservices'", ":", "self", ".", "vpnservices", ".", "list", "(", ")", "}", "vpnservices_dict", "=", "{", "'vpnservices'", ":", "self", ".", "api_vpnservices", ".", "list", "(", ")", "}", "neutronclient", ".", "list_vpnservices", "(", ")", ".", "AndReturn", "(", "vpnservices_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "vpnservices_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "vpnservices", "[", "'vpnservices'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "VPNService", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_vpnservice'", ",", ")", "}", ")", "def", "test_vpnservice_get", "(", "self", ")", ":", "vpnservice1", "=", "self", ".", "api_vpnservices", ".", "first", "(", ")", "vpnservice", "=", "{", "'vpnservice'", ":", "vpnservice1", "}", "neutronclient", ".", "show_vpnservice", "(", "vpnservice", "[", "'vpnservice'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "vpnservice", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "vpnservice_get", "(", "self", ".", "request", ",", "vpnservice", "[", "'vpnservice'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "VPNService", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_create", "(", "self", ")", ":", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "form_data", "=", "{", "'name'", ":", "ikepolicy1", "[", "'name'", "]", ",", "'description'", ":", "ikepolicy1", "[", "'description'", "]", ",", "'auth_algorithm'", ":", "ikepolicy1", "[", "'auth_algorithm'", "]", ",", "'encryption_algorithm'", ":", "ikepolicy1", "[", "'encryption_algorithm'", "]", ",", "'ike_version'", ":", "ikepolicy1", "[", "'ike_version'", "]", ",", "'lifetime'", ":", "ikepolicy1", "[", "'lifetime'", "]", ",", "'phase1_negotiation_mode'", ":", "ikepolicy1", "[", "'phase1_negotiation_mode'", "]", ",", "'pfs'", ":", "ikepolicy1", "[", "'pfs'", "]", "}", "ikepolicy", "=", "{", "'ikepolicy'", ":", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "}", "neutronclient", ".", "create_ikepolicy", "(", "{", "'ikepolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ikepolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ikepolicies'", ",", ")", "}", ")", "def", "test_ikepolicies_get", "(", "self", ")", ":", "ikepolicies", "=", "{", "'ikepolicies'", ":", "self", ".", "ikepolicies", ".", "list", "(", ")", "}", "ikepolicies_dict", "=", "{", "'ikepolicies'", ":", "self", ".", "api_ikepolicies", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ikepolicies", "(", ")", ".", "AndReturn", "(", "ikepolicies_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicies_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ikepolicies", "[", "'ikepolicies'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_get", "(", "self", ")", ":", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "ikepolicy", "=", "{", "'ikepolicy'", ":", "ikepolicy1", "}", "neutronclient", ".", "show_ikepolicy", "(", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ikepolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_get", "(", "self", ".", "request", ",", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_create", "(", "self", ")", ":", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "form_data", "=", "{", "'name'", ":", "ipsecpolicy1", "[", "'name'", "]", ",", "'description'", ":", "ipsecpolicy1", "[", "'description'", "]", ",", "'auth_algorithm'", ":", "ipsecpolicy1", "[", "'auth_algorithm'", "]", ",", "'encryption_algorithm'", ":", "ipsecpolicy1", "[", "'encryption_algorithm'", "]", ",", "'encapsulation_mode'", ":", "ipsecpolicy1", "[", "'encapsulation_mode'", "]", ",", "'lifetime'", ":", "ipsecpolicy1", "[", "'lifetime'", "]", ",", "'pfs'", ":", "ipsecpolicy1", "[", "'pfs'", "]", ",", "'transform_protocol'", ":", "ipsecpolicy1", "[", "'transform_protocol'", "]", "}", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "}", "neutronclient", ".", "create_ipsecpolicy", "(", "{", "'ipsecpolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsecpolicies'", ",", ")", "}", ")", "def", "test_ipsecpolicies_get", "(", "self", ")", ":", "ipsecpolicies", "=", "{", "'ipsecpolicies'", ":", "self", ".", "ipsecpolicies", ".", "list", "(", ")", "}", "ipsecpolicies_dict", "=", "{", "'ipsecpolicies'", ":", "self", ".", "api_ipsecpolicies", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ipsecpolicies", "(", ")", ".", "AndReturn", "(", "ipsecpolicies_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicies_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ipsecpolicies", "[", "'ipsecpolicies'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ","], 0]
[[".", "ikepolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ikepolicies'", ",", ")", "}", ")", "def", "test_ikepolicies_get", "(", "self", ")", ":", "ikepolicies", "=", "{", "'ikepolicies'", ":", "self", ".", "ikepolicies", ".", "list", "(", ")", "}", "ikepolicies_dict", "=", "{", "'ikepolicies'", ":", "self", ".", "api_ikepolicies", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ikepolicies", "(", ")", ".", "AndReturn", "(", "ikepolicies_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicies_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ikepolicies", "[", "'ikepolicies'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_get", "(", "self", ")", ":", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "ikepolicy", "=", "{", "'ikepolicy'", ":", "ikepolicy1", "}", "neutronclient", ".", "show_ikepolicy", "(", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ikepolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_get", "(", "self", ".", "request", ",", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_create", "(", "self", ")", ":", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "form_data", "=", "{", "'name'", ":", "ipsecpolicy1", "[", "'name'", "]", ",", "'description'", ":", "ipsecpolicy1", "[", "'description'", "]", ",", "'auth_algorithm'", ":", "ipsecpolicy1", "[", "'auth_algorithm'", "]", ",", "'encryption_algorithm'", ":", "ipsecpolicy1", "[", "'encryption_algorithm'", "]", ",", "'encapsulation_mode'", ":", "ipsecpolicy1", "[", "'encapsulation_mode'", "]", ",", "'lifetime'", ":", "ipsecpolicy1", "[", "'lifetime'", "]", ",", "'pfs'", ":", "ipsecpolicy1", "[", "'pfs'", "]", ",", "'transform_protocol'", ":", "ipsecpolicy1", "[", "'transform_protocol'", "]", "}", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "}", "neutronclient", ".", "create_ipsecpolicy", "(", "{", "'ipsecpolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsecpolicies'", ",", ")", "}", ")", "def", "test_ipsecpolicies_get", "(", "self", ")", ":", "ipsecpolicies", "=", "{", "'ipsecpolicies'", ":", "self", ".", "ipsecpolicies", ".", "list", "(", ")", "}", "ipsecpolicies_dict", "=", "{", "'ipsecpolicies'", ":", "self", ".", "api_ipsecpolicies", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ipsecpolicies", "(", ")", ".", "AndReturn", "(", "ipsecpolicies_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicies_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ipsecpolicies", "[", "'ipsecpolicies'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_get", "(", "self", ")", ":", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "ipsecpolicy1", "}", "neutronclient", ".", "show_ipsecpolicy", "(", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_get", "(", "self", ".", "request", ",", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsec_site_connection'", ",", ")", "}", ")", "def", "test_ipsecsiteconnection_create", "(", "self", ")", ":", "ipsecsiteconnection1", "=", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "form_data", "=", "{", "'name'", ":", "ipsecsiteconnection1", "[", "'name'", "]", ",", "'description'", ":", "ipsecsiteconnection1", "[", "'description'", "]", ",", "'dpd'", ":", "ipsecsiteconnection1", "[", "'dpd'", "]", ",", "'ikepolicy_id'", ":", "ipsecsiteconnection1", "[", "'ikepolicy_id'", "]", ",", "'initiator'", ":", "ipsecsiteconnection1", "[", "'initiator'", "]", ",", "'ipsecpolicy_id'", ":", "ipsecsiteconnection1", "[", "'ipsecpolicy_id'", "]", ",", "'mtu'", ":", "ipsecsiteconnection1", "[", "'mtu'", "]", ",", "'peer_address'", ":", "ipsecsiteconnection1", "[", "'peer_address'", "]", ",", "'peer_cidrs'", ":", "ipsecsiteconnection1", "[", "'peer_cidrs'", "]", ",", "'peer_id'", ":", "ipsecsiteconnection1", "[", "'peer_id'", "]", ",", "'psk'", ":", "ipsecsiteconnection1", "[", "'psk'", "]", ",", "'vpnservice_id'", ":", "ipsecsiteconnection1", "[", "'vpnservice_id'", "]", ",", "'admin_state_up'", ":", "ipsecsiteconnection1", "[", "'admin_state_up'", "]", "}", "ipsecsiteconnection", "=", "{", "'ipsec_site_connection'", ":", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "}", "neutronclient", ".", "create_ipsec_site_connection", "(", "{", "'ipsec_site_connection'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecsiteconnection", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnection_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsec_site_connections'", ",", ")", "}", ")", "def", "test_ipsecsiteconnections_get", "(", "self", ")", ":", "ipsecsiteconnections", "=", "{", "'ipsec_site_connections'", ":", "self", ".", "ipsecsiteconnections", ".", "list", "(", ")", "}", "ipsecsiteconnections_dict", "=", "{", "'ipsec_site_connections'", ":", "self", ".", "api_ipsecsiteconnections", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ipsec_site_connections", "(", ")", ".", "AndReturn", "(", "ipsecsiteconnections_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnections_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ipsecsiteconnections", "[", "'ipsec_site_connections'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ipsec_site_connection'", ",", ")", "}", ")", "def", "test_ipsecsiteconnection_get", "(", "self", ")", ":", "ipsecsiteconnection1", "=", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "ipsecsiteconnection", "=", "{", "'ipsec_site_connection'", ":", "ipsecsiteconnection1", "}", "neutronclient", ".", "show_ipsec_site_connection", "(", "ipsecsiteconnection", "[", "'ipsec_site_connection'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ipsecsiteconnection", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnection_get", "(", "self", ".", "request", ",", "ipsecsiteconnection", "[", "'ipsec_site_connection'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api"], 500]
[["request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ikepolicies'", ",", ")", "}", ")", "def", "test_ikepolicies_get", "(", "self", ")", ":", "ikepolicies", "=", "{", "'ikepolicies'", ":", "self", ".", "ikepolicies", ".", "list", "(", ")", "}", "ikepolicies_dict", "=", "{", "'ikepolicies'", ":", "self", ".", "api_ikepolicies", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ikepolicies", "(", ")", ".", "AndReturn", "(", "ikepolicies_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicies_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ikepolicies", "[", "'ikepolicies'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_get", "(", "self", ")", ":", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "ikepolicy", "=", "{", "'ikepolicy'", ":", "ikepolicy1", "}", "neutronclient", ".", "show_ikepolicy", "(", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ikepolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_get", "(", "self", ".", "request", ",", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_create", "(", "self", ")", ":", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "form_data", "=", "{", "'name'", ":", "ipsecpolicy1", "[", "'name'", "]", ",", "'description'", ":", "ipsecpolicy1", "[", "'description'", "]", ",", "'auth_algorithm'", ":", "ipsecpolicy1", "[", "'auth_algorithm'", "]", ",", "'encryption_algorithm'", ":", "ipsecpolicy1", "[", "'encryption_algorithm'", "]", ",", "'encapsulation_mode'", ":", "ipsecpolicy1", "[", "'encapsulation_mode'", "]", ",", "'lifetime'", ":", "ipsecpolicy1", "[", "'lifetime'", "]", ",", "'pfs'", ":", "ipsecpolicy1", "[", "'pfs'", "]", ",", "'transform_protocol'", ":", "ipsecpolicy1", "[", "'transform_protocol'", "]", "}", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "}", "neutronclient", ".", "create_ipsecpolicy", "(", "{", "'ipsecpolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsecpolicies'", ",", ")", "}", ")", "def", "test_ipsecpolicies_get", "(", "self", ")", ":", "ipsecpolicies", "=", "{", "'ipsecpolicies'", ":", "self", ".", "ipsecpolicies", ".", "list", "(", ")", "}", "ipsecpolicies_dict", "=", "{", "'ipsecpolicies'", ":", "self", ".", "api_ipsecpolicies", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ipsecpolicies", "(", ")", ".", "AndReturn", "(", "ipsecpolicies_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicies_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ipsecpolicies", "[", "'ipsecpolicies'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_get", "(", "self", ")", ":", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "ipsecpolicy1", "}", "neutronclient", ".", "show_ipsecpolicy", "(", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_get", "(", "self", ".", "request", ",", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsec_site_connection'", ",", ")", "}", ")", "def", "test_ipsecsiteconnection_create", "(", "self", ")", ":", "ipsecsiteconnection1", "=", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "form_data", "=", "{", "'name'", ":", "ipsecsiteconnection1", "[", "'name'", "]", ",", "'description'", ":", "ipsecsiteconnection1", "[", "'description'", "]", ",", "'dpd'", ":", "ipsecsiteconnection1", "[", "'dpd'", "]", ",", "'ikepolicy_id'", ":", "ipsecsiteconnection1", "[", "'ikepolicy_id'", "]", ",", "'initiator'", ":", "ipsecsiteconnection1", "[", "'initiator'", "]", ",", "'ipsecpolicy_id'", ":", "ipsecsiteconnection1", "[", "'ipsecpolicy_id'", "]", ",", "'mtu'", ":", "ipsecsiteconnection1", "[", "'mtu'", "]", ",", "'peer_address'", ":", "ipsecsiteconnection1", "[", "'peer_address'", "]", ",", "'peer_cidrs'", ":", "ipsecsiteconnection1", "[", "'peer_cidrs'", "]", ",", "'peer_id'", ":", "ipsecsiteconnection1", "[", "'peer_id'", "]", ",", "'psk'", ":", "ipsecsiteconnection1", "[", "'psk'", "]", ",", "'vpnservice_id'", ":", "ipsecsiteconnection1", "[", "'vpnservice_id'", "]", ",", "'admin_state_up'", ":", "ipsecsiteconnection1", "[", "'admin_state_up'", "]", "}", "ipsecsiteconnection", "=", "{", "'ipsec_site_connection'", ":", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "}", "neutronclient", ".", "create_ipsec_site_connection", "(", "{", "'ipsec_site_connection'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecsiteconnection", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnection_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsec_site_connections'", ",", ")", "}", ")", "def", "test_ipsecsiteconnections_get", "(", "self", ")", ":", "ipsecsiteconnections", "=", "{", "'ipsec_site_connections'", ":", "self", ".", "ipsecsiteconnections", ".", "list", "(", ")", "}", "ipsecsiteconnections_dict", "=", "{", "'ipsec_site_connections'", ":", "self", ".", "api_ipsecsiteconnections", ".", "list", "(", ")", "}", "neutronclient", ".", "list_ipsec_site_connections", "(", ")", ".", "AndReturn", "(", "ipsecsiteconnections_dict", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnections_get", "(", "self", ".", "request", ")", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ipsecsiteconnections", "[", "'ipsec_site_connections'", "]", ")", ":", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ipsec_site_connection'", ",", ")", "}", ")", "def", "test_ipsecsiteconnection_get", "(", "self", ")", ":", "ipsecsiteconnection1", "=", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "ipsecsiteconnection", "=", "{", "'ipsec_site_connection'", ":", "ipsecsiteconnection1", "}", "neutronclient", ".", "show_ipsec_site_connection", "(", "ipsecsiteconnection", "[", "'ipsec_site_connection'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ipsecsiteconnection", ")", "self", ".", "mox", ".", "ReplayAll", "(", ")", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnection_get", "(", "self", ".", "request", ",", "ipsecsiteconnection", "[", "'ipsec_site_connection'", "]", "[", "'id'", "]", ")", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")"], 995]
[["from", "horizon", "import", "tables", "from", "openstack_dashboard.usage", "import", "base", "class", "UsageView", "(", "tables", ".", "DataTableView", ")", ":", "usage_class", "=", "None", "show_terminated", "=", "True", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "super", "(", "UsageView", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "if", "(", "not", "issubclass", "(", "self", ".", "usage_class", ",", "base", ".", "BaseUsage", ")", ")", ":", "raise", "AttributeError", "(", "'You must specify a usage_class attribute which is a subclass of BaseUsage.'", ")", "def", "get_template_names", "(", "self", ")", ":", "if", "(", "self", ".", "request", ".", "GET", ".", "get", "(", "'format'", ",", "'html'", ")", "==", "'csv'", ")", ":", "return", "'.'", ".", "join", "(", "(", "self", ".", "template_name", ".", "rsplit", "(", "'.'", ",", "1", ")", "[", "0", "]", ",", "'csv'", ")", ")", "return", "self", ".", "template_name", "def", "get_content_type", "(", "self", ")", ":", "if", "(", "self", ".", "request", ".", "GET", ".", "get", "(", "'format'", ",", "'html'", ")", "==", "'csv'", ")", ":", "return", "'text/csv'", "return", "'text/html'", "def", "get_data", "(", "self", ")", ":", "project_id", "=", "self", ".", "kwargs", ".", "get", "(", "'project_id'", ",", "self", ".", "request", ".", "user", ".", "tenant_id", ")", "self", ".", "usage", "=", "self", ".", "usage_class", "(", "self", ".", "request", ",", "project_id", ")", "self", ".", "usage", ".", "summarize", "(", "*", "self", ".", "usage", ".", "get_date_range", "(", ")", ")", "self", ".", "usage", ".", "get_limits", "(", ")", "self", ".", "kwargs", "[", "'usage'", "]", "=", "self", ".", "usage", "return", "self", ".", "usage", ".", "usage_list", "def", "get_context_data", "(", "self", ",", "**", "kwargs", ")", ":", "context", "=", "super", "(", "UsageView", ",", "self", ")", ".", "get_context_data", "(", "**", "kwargs", ")", "context", "[", "'table'", "]", ".", "kwargs", "[", "'usage'", "]", "=", "self", ".", "usage", "context", "[", "'form'", "]", "=", "self", ".", "usage", ".", "form", "context", "[", "'usage'", "]", "=", "self", ".", "usage", "return", "context", "def", "render_to_response", "(", "self", ",", "context", ",", "**", "response_kwargs", ")", ":", "if", "(", "self", ".", "request", ".", "GET", ".", "get", "(", "'format'", ",", "'html'", ")", "==", "'csv'", ")", ":", "render_class", "=", "self", ".", "csv_response_class", "response_kwargs", ".", "setdefault", "(", "'filename'", ",", "'usage.csv'", ")", "else", ":", "render_class", "=", "self", ".", "response_class", "resp", "=", "render_class", "(", "request", "=", "self", ".", "request", ",", "template", "=", "self", ".", "get_template_names", "(", ")", ",", "context", "=", "context", ",", "content_type", "=", "self", ".", "get_content_type", "(", ")", ",", "**", "response_kwargs", ")", "return", "resp"], 0]
[["from", "enum", "import", "IntEnum", "from", ".", "component", "import", "Component", "from", ".", "object", "import", "field", "class", "ReflectionProbeUsage", "(", "IntEnum", ")", ":", "Off", "=", "0", "BlendProbes", "=", "1", "BlendProbesAndSkybox", "=", "2", "Simple", "=", "3", "class", "ShadowCastingMode", "(", "IntEnum", ")", ":", "Off", "=", "0", "On", "=", "1", "TwoSided", "=", "2", "ShadowsOnly", "=", "3", "class", "Renderer", "(", "Component", ")", ":", "enabled", "=", "field", "(", "'m_Enabled'", ",", "bool", ")", "lightmap_index", "=", "field", "(", "'m_LightmapIndex'", ")", "materials", "=", "field", "(", "'m_Materials'", ")", "probe_anchor", "=", "field", "(", "'m_ProbeAnchor'", ")", "receive_shadows", "=", "field", "(", "'m_ReceiveShadows'", ",", "bool", ")", "reflection_probe_usage", "=", "field", "(", "'m_ReflectionProbeUsage'", ",", "ReflectionProbeUsage", ")", "shadow_casting_mode", "=", "field", "(", "'m_CastShadows'", ",", "ShadowCastingMode", ")", "sorting_layer_id", "=", "field", "(", "'m_SortingLayerID'", ")", "sorting_order", "=", "field", "(", "'m_SortingOrder'", ")", "use_light_probes", "=", "field", "(", "'m_UseLightProbes'", ",", "bool", ")", "lightmap_index_dynamic", "=", "field", "(", "'m_LightmapIndexDynamic'", ")", "lightmap_tiling_offset", "=", "field", "(", "'m_LightmapTilingOffset'", ")", "lightmap_tiling_offset_dynamic", "=", "field", "(", "'m_LightmapTilingOffsetDynamic'", ")", "static_batch_root", "=", "field", "(", "'m_StaticBatchRoot'", ")", "subset_indices", "=", "field", "(", "'m_SubsetIndices'", ")", "@", "property", "def", "material", "(", "self", ")", ":", "return", "self", ".", "materials", "[", "0", "]", "class", "ParticleSystemRenderMode", "(", "IntEnum", ")", ":", "Billboard", "=", "0", "Stretch", "=", "1", "HorizontalBillboard", "=", "2", "VerticalBillboard", "=", "3", "Mesh", "=", "4", "class", "ParticleSystemSortMode", "(", "IntEnum", ")", ":", "None_", "=", "0", "Distance", "=", "1", "OldestInFront", "=", "2", "YoungestInFront", "=", "3", "class", "MeshRenderer", "(", "Component", ")", ":", "pass", "class", "ParticleRenderer", "(", "Renderer", ")", ":", "camera_velocity_scale", "=", "field", "(", "'m_CameraVelocityScale'", ")", "length_scale", "=", "field", "(", "'m_LengthScale'", ")", "max_particle_size", "=", "field", "(", "'m_MaxParticleSize'", ")", "velocity_scale", "=", "field", "(", "'m_VelocityScale'", ")", "stretch_particles", "=", "field", "(", "'m_StretchParticles'", ")", "uv_animation", "=", "field", "(", "'UV Animation'", ")", "class", "ParticleSystemRenderer", "(", "Renderer", ")", ":", "camera_velocity_scale", "=", "field", "(", "'m_CameraVelocityScale'", ")", "length_scale", "=", "field", "(", "'m_LengthScale'", ")", "max_particle_size", "=", "field", "(", "'m_MaxParticleSize'", ")", "mesh", "=", "field", "(", "'m_Mesh'", ")", "mesh1", "=", "field", "(", "'m_Mesh1'", ")", "mesh2", "=", "field", "(", "'m_Mesh2'", ")", "mesh3", "=", "field", "(", "'m_Mesh3'", ")", "normal_direction", "=", "field", "(", "'m_NormalDirection'", ")", "render_mode", "=", "field", "(", "'m_RenderMode'", ",", "ParticleSystemRenderMode", ")", "sort_mode", "=", "field", "(", "'m_SortMode'", ",", "ParticleSystemSortMode", ")", "sorting_fudge", "=", "field", "(", "'m_SortingFudge'", ")", "velocity_scale", "=", "field", "(", "'m_VelocityScale'", ")"], 0]
[["from", "ConfigParser", "import", "*", "from", "StringIO", "import", "*", "from", "Log", "import", "Log", "import", "datetime", "class", "Config", "(", ")", ":", "@", "staticmethod", "def", "LoadConfig", "(", ")", ":", "Config", ".", "parser", "=", "ConfigParser", "(", ")", "try", ":", "sconff", "=", "open", "(", "CONFIG_FILE", ",", "'r'", ")", "except", ":", "Log", ".", "warn", "(", "'cannot open config file'", ")", "return", "sconf", "=", "StringIO", "(", ")", "sconf", ".", "write", "(", "'[sysconf]\\n'", ")", "sconf", ".", "write", "(", "sconff", ".", "read", "(", ")", ")", "sconf", ".", "seek", "(", "0", ")", "Config", ".", "parser", ".", "readfp", "(", "sconf", ")", "sconff", ".", "close", "(", ")", "sconf", ".", "close", "(", ")", "return", "@", "staticmethod", "def", "GetBoardsFile", "(", ")", ":", "return", "BOARDS_FILE", "@", "staticmethod", "def", "GetInt", "(", "name", ",", "defval", ")", ":", "if", "Config", ".", "parser", ".", "has_option", "(", "'sysconf'", ",", "name", ")", ":", "return", "Config", ".", "parser", ".", "getint", "(", "'sysconf'", ",", "name", ")", "else", ":", "return", "defval", "@", "staticmethod", "def", "GetString", "(", "name", ",", "defval", ")", ":", "if", "Config", ".", "parser", ".", "has_option", "(", "'sysconf'", ",", "name", ")", ":", "val", "=", "Config", ".", "parser", ".", "get", "(", "'sysconf'", ",", "name", ")", "if", "(", "(", "val", "[", "0", "]", "==", "'\"'", ")", "and", "val", ".", "endswith", "(", "'\"'", ")", ")", ":", "val", "=", "val", "[", "1", ":", "(", "-", "1", ")", "]", "return", "val", ".", "decode", "(", "'gbk'", ")", "else", ":", "return", "defval", "BBS_ROOT", "=", "'/home/bbs/'", "BBS_XMPP_CERT_FILE", "=", "(", "BBS_ROOT", "+", "'xmpp.crt'", ")", "BBS_XMPP_KEY_FILE", "=", "(", "BBS_ROOT", "+", "'xmpp.key'", ")", "BOARDS_FILE", "=", "(", "BBS_ROOT", "+", "'.BOARDS'", ")", "STRLEN", "=", "80", "ARTICLE_TITLE_LEN", "=", "60", "BM_LEN", "=", "60", "MAXBOARD", "=", "400", "CONFIG_FILE", "=", "(", "BBS_ROOT", "+", "'etc/sysconf.ini'", ")", "FILENAME_LEN", "=", "20", "OWNER_LEN", "=", "30", "SESSIONID_LEN", "=", "32", "REFRESH_TOKEN_LEN", "=", "128", "NAMELEN", "=", "40", "IDLEN", "=", "12", "MD5PASSLEN", "=", "16", "OLDPASSLEN", "=", "14", "MOBILE_NUMBER_LEN", "=", "17", "MAXCLUB", "=", "128", "MAXUSERS", "=", "20000", "MAX_MSG_SIZE", "=", "1024", "MAXFRIENDS", "=", "400", "MAXMESSAGE", "=", "5", "MAXSIGLINES", "=", "6", "IPLEN", "=", "16", "DEFAULTBOARD", "=", "'sysop'", "BLESS_BOARD", "=", "'happy_birthday'", "QUOTED_LINES", "=", "10", "MAXACTIVE", "=", "8000", "USHM_SIZE", "=", "(", "MAXACTIVE", "+", "10", ")", "UTMP_HASHSIZE", "=", "(", "USHM_SIZE", "*", "4", ")", "UCACHE_SEMLOCK", "=", "0", "LEN_FRIEND_EXP", "=", "15", "REFRESH_TIME", "=", "30", "USER_TITLE_LEN", "=", "18", "SESSION_TIMEOUT", "=", "datetime", ".", "timedelta", "(", "30", ")", "SESSION_TIMEOUT_SECONDS", "=", "(", "86400", "*", "30", ")", "XMPP_IDLE_TIME", "=", "300", "XMPP_LONG_IDLE_TIME", "=", "1800", "XMPP_UPDATE_TIME_INTERVAL", "=", "10", "XMPP_PING_TIME_INTERVAL", "=", "60", "PUBLIC_SHMKEY", "=", "3700", "MAX_ATTACHSIZE", "=", "(", "(", "20", "*", "1024", ")", "*", "1024", ")", "BMDEL_DECREASE", "=", "True", "SYSMAIL_BOARD", "=", "'sysmail'", "ADD_EDITMARK", "=", "True", "SEARCH_COUNT_LIMIT", "=", "20", "MAIL_SIZE_LIMIT", "=", "(", "-", "1", ")", "SEC_DELETED_OLDHOME", "=", "(", "(", "3600", "*", "24", ")", "*", "3", ")", "SELF_INTRO_MAX_LEN", "=", "800"], 0]
[["import", "re", "import", "os", "import", "stat", "import", "json", "import", "struct", "import", "time", "import", "Config", "import", "Board", "import", "Post", "import", "BoardManager", "from", "Util", "import", "Util", "from", "Log", "import", "Log", "from", "errors", "import", "*", "DEFAULT_DIGEST_LIST_COUNT", "=", "20", "class", "DigestItem", "(", ")", ":", "def", "__init__", "(", "self", ",", "basepath", ")", ":", "self", ".", "basepath", "=", "basepath", "self", ".", "title", "=", "''", "self", ".", "host", "=", "''", "self", ".", "port", "=", "0", "self", ".", "attachpos", "=", "0", "self", ".", "fname", "=", "''", "self", ".", "mtitle", "=", "''", "self", ".", "items", "=", "[", "]", "self", ".", "update_time", "=", "0", "self", ".", "id", "=", "0", "self", ".", "sysop_only", "=", "0", "self", ".", "bms_only", "=", "0", "self", ".", "zixia_only", "=", "0", "def", "IsDir", "(", "self", ")", ":", "try", ":", "st", "=", "os", ".", "stat", "(", "self", ".", "realpath", "(", ")", ")", "return", "stat", ".", "S_ISDIR", "(", "st", ".", "st_mode", ")", "except", ":", "return", "False", "def", "IsFile", "(", "self", ")", ":", "try", ":", "st", "=", "os", ".", "stat", "(", "self", ".", "realpath", "(", ")", ")", "return", "stat", ".", "S_ISREG", "(", "st", ".", "st_mode", ")", "except", ":", "return", "False", "def", "GetModTime", "(", "self", ")", ":", "try", ":", "st", "=", "os", ".", "stat", "(", "self", ".", "realpath", "(", ")", ")", "mtime", "=", "st", ".", "st_mtime", "except", ":", "mtime", "=", "time", ".", "time", "(", ")", "return", "mtime", "def", "names_path", "(", "self", ")", ":", "return", "(", "'%s/.Names'", "%", "self", ".", "realpath", "(", ")", ")", "def", "realpath", "(", "self", ")", ":", "return", "(", "'%s/%s'", "%", "(", "Config", ".", "BBS_ROOT", ",", "self", ".", "path", "(", ")", ")", ")", "def", "path", "(", "self", ")", ":", "if", "self", ".", "fname", ":", "return", "(", "'%s/%s'", "%", "(", "self", ".", "basepath", ",", "self", ".", "fname", ")", ")", "else", ":", "return", "self", ".", "basepath", "def", "CheckUpdate", "(", "self", ")", ":", "try", ":", "stat", "=", "os", ".", "stat", "(", "self", ".", "names_path", "(", ")", ")", "if", "(", "stat", ".", "st_mtime", ">", "self", ".", "update_time", ")", ":", "self", ".", "LoadNames", "(", ")", "except", ":", "return", "False", "return", "True", "def", "LoadNames", "(", "self", ")", ":", "try", ":", "f", "=", "open", "(", "self", ".", "names_path", "(", ")", ",", "'r'", ")", "except", "IOError", ":", "return", "0", "stat", "=", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", "self", ".", "update_time", "=", "stat", ".", "st_mtime", "item", "=", "DigestItem", "(", "self", ".", "path", "(", ")", ")", "hostname", "=", "''", "_id", "=", "0", "bms_only", "=", "0", "sysop_only", "=", "0", "zixia_only", "=", "0", "while", "True", ":", "line", "=", "f", ".", "readline", "(", ")", "if", "(", "line", "==", "''", ")", ":", "break", "npos", "=", "line", ".", "find", "(", "'\\n'", ")", "if", "(", "npos", "!=", "(", "-", "1", ")", ")", ":", "line", "=", "line", "[", ":", "npos", "]", "if", "(", "line", "[", ":", "1", "]", "==", "'#'", ")", ":", "if", "(", "line", "[", ":", "8", "]", "==", "'# Title='", ")", ":", "if", "(", "not", "self", ".", "mtitle", ")", ":", "self", ".", "mtitle", "=", "line", "[", "8", ":", "]", "result", "=", "re", ".", "match", "(", "'([^=]*)=(.*)'", ",", "line", ")", "if", "result", ":", "key", "=", "result", ".", "group", "(", "1", ")", "value", "=", "result", ".", "group", "(", "2", ")", "if", "(", "key", "==", "'Name'", ")", ":", "item", ".", "title", "=", "value", "item", ".", "attachpos", "=", "0", "elif", "(", "key", "==", "'Path'", ")", ":", "if", "(", "value", "[", ":", "2", "]", "==", "'~/'", ")", ":", "item", ".", "fname", "=", "value", "[", "2", ":", "]", "else", ":", "item", ".", "fname", "=", "value", "if", "(", "item", ".", "fname", ".", "find", "(", "'..'", ")", "!=", "(", "-", "1", ")", ")", ":", "continue", "if", "(", "item", ".", "title", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "bms_only", "+", "=", "1", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "sysop_only", "+", "=", "1", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: ZIXIAs)'", ")", "!=", "(", "-", "1", ")", ")", ":", "zixia_only", "+", "=", "1", "if", "(", "item", ".", "fname", ".", "find", "(", "'!@#$%'", ")", "!=", "(", "-", "1", ")", ")", ":", "parts", "=", "re", ".", "split", "(", "'[!@#$%]'", ",", "item", ".", "fname", ")", "newparts", "=", "[", "]", "for", "part", "in", "parts", ":", "if", "part", ":", "newparts", "+", "=", "[", "part", "]", "hostname", "=", "newparts", "[", "0", "]", "item", ".", "fname", "=", "newparts", "[", "1", "]", "try", ":", "item", ".", "port", "=", "int", "(", "newparts", "[", "2", "]", ")", "except", ":", "item", ".", "port", "=", "0", "item", ".", "id", "=", "_id", "_id", "+", "=", "1", "item", ".", "bms_only", "=", "bms_only", "item", ".", "sysop_only", "=", "sysop_only", "item", ".", "zixia_only", "=", "zixia_only", "item", ".", "host", "=", "hostname", "self", ".", "items", "+", "=", "[", "item", "]", "item", "=", "DigestItem", "(", "self", ".", "path", "(", ")", ")", "hostname", "=", "''", "elif", "(", "key", "==", "'Host'", ")", ":", "hostname", "=", "value", "elif", "(", "key", "==", "'Port'", ")", ":", "try", ":", "item", ".", "port", "=", "int", "(", "value", ")", "except", ":", "item", ".", "port", "=", "0", "elif", "(", "key", "==", "'Attach'", ")", ":", "try", ":", "item", ".", "attachpos", "=", "int", "(", "value", ")", "except", ":", "item", ".", "attachpos", "=", "0", "f", ".", "close", "(", ")", "return", "1", "def", "GetItem", "(", "self", ",", "user", ",", "route", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "self", ".", "CheckUpdate", "(", ")", "if", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM:'", ")", "!=", "(", "-", "1", ")", ")", ":", "if", "(", "Board", ".", "Board", ".", "IsBM", "(", "user", ",", "self", ".", "mtitle", "[", "4", ":", "]", ")", "or", "user", ".", "IsSysop", "(", ")", ")", ":", "has_perm", "=", "True", "elif", "(", "need_perm", "and", "(", "not", "has_perm", ")", ")", ":", "return", "None", "if", "(", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", "or", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SECRET)'", ")", "!=", "(", "-", "1", ")", ")", "or", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ")", ":", "need_perm", "=", "True", "if", "(", "len", "(", "route", ")", "==", "0", ")", ":", "return", "self", "target", "=", "(", "route", "[", "0", "]", "-", "1", ")", "_id", "=", "target", "if", "(", "_id", ">=", "len"], 0]
[["=", "result", ".", "group", "(", "2", ")", "if", "(", "key", "==", "'Name'", ")", ":", "item", ".", "title", "=", "value", "item", ".", "attachpos", "=", "0", "elif", "(", "key", "==", "'Path'", ")", ":", "if", "(", "value", "[", ":", "2", "]", "==", "'~/'", ")", ":", "item", ".", "fname", "=", "value", "[", "2", ":", "]", "else", ":", "item", ".", "fname", "=", "value", "if", "(", "item", ".", "fname", ".", "find", "(", "'..'", ")", "!=", "(", "-", "1", ")", ")", ":", "continue", "if", "(", "item", ".", "title", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "bms_only", "+", "=", "1", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "sysop_only", "+", "=", "1", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: ZIXIAs)'", ")", "!=", "(", "-", "1", ")", ")", ":", "zixia_only", "+", "=", "1", "if", "(", "item", ".", "fname", ".", "find", "(", "'!@#$%'", ")", "!=", "(", "-", "1", ")", ")", ":", "parts", "=", "re", ".", "split", "(", "'[!@#$%]'", ",", "item", ".", "fname", ")", "newparts", "=", "[", "]", "for", "part", "in", "parts", ":", "if", "part", ":", "newparts", "+", "=", "[", "part", "]", "hostname", "=", "newparts", "[", "0", "]", "item", ".", "fname", "=", "newparts", "[", "1", "]", "try", ":", "item", ".", "port", "=", "int", "(", "newparts", "[", "2", "]", ")", "except", ":", "item", ".", "port", "=", "0", "item", ".", "id", "=", "_id", "_id", "+", "=", "1", "item", ".", "bms_only", "=", "bms_only", "item", ".", "sysop_only", "=", "sysop_only", "item", ".", "zixia_only", "=", "zixia_only", "item", ".", "host", "=", "hostname", "self", ".", "items", "+", "=", "[", "item", "]", "item", "=", "DigestItem", "(", "self", ".", "path", "(", ")", ")", "hostname", "=", "''", "elif", "(", "key", "==", "'Host'", ")", ":", "hostname", "=", "value", "elif", "(", "key", "==", "'Port'", ")", ":", "try", ":", "item", ".", "port", "=", "int", "(", "value", ")", "except", ":", "item", ".", "port", "=", "0", "elif", "(", "key", "==", "'Attach'", ")", ":", "try", ":", "item", ".", "attachpos", "=", "int", "(", "value", ")", "except", ":", "item", ".", "attachpos", "=", "0", "f", ".", "close", "(", ")", "return", "1", "def", "GetItem", "(", "self", ",", "user", ",", "route", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "self", ".", "CheckUpdate", "(", ")", "if", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM:'", ")", "!=", "(", "-", "1", ")", ")", ":", "if", "(", "Board", ".", "Board", ".", "IsBM", "(", "user", ",", "self", ".", "mtitle", "[", "4", ":", "]", ")", "or", "user", ".", "IsSysop", "(", ")", ")", ":", "has_perm", "=", "True", "elif", "(", "need_perm", "and", "(", "not", "has_perm", ")", ")", ":", "return", "None", "if", "(", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", "or", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SECRET)'", ")", "!=", "(", "-", "1", ")", ")", "or", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ")", ":", "need_perm", "=", "True", "if", "(", "len", "(", "route", ")", "==", "0", ")", ":", "return", "self", "target", "=", "(", "route", "[", "0", "]", "-", "1", ")", "_id", "=", "target", "if", "(", "_id", ">=", "len", "(", "self", ".", "items", ")", ")", ":", "return", "None", "while", "(", "self", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "_id", "+", "=", "1", "if", "(", "_id", ">=", "len", "(", "self", ".", "items", ")", ")", ":", "return", "None", "item", "=", "self", ".", "items", "[", "_id", "]", "item", ".", "mtitle", "=", "item", ".", "title", "if", "(", "len", "(", "route", ")", "==", "1", ")", ":", "return", "item", "elif", "item", ".", "IsDir", "(", ")", ":", "if", "(", "not", "item", ".", "CheckUpdate", "(", ")", ")", ":", "return", "None", "return", "item", ".", "GetItem", "(", "user", ",", "route", "[", "1", ":", "]", ",", "has_perm", ",", "need_perm", ")", "else", ":", "return", "None", "def", "GetRange", "(", "self", ",", "user", ",", "route", ",", "start", ",", "end", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "self", ".", "CheckUpdate", "(", ")", "firstitem", "=", "self", ".", "GetItem", "(", "user", ",", "(", "route", "+", "[", "start", "]", ")", ",", "has_perm", ",", "need_perm", ")", "if", "(", "not", "firstitem", ")", ":", "return", "[", "]", "parent", "=", "self", ".", "GetItem", "(", "user", ",", "route", ",", "has_perm", ",", "need_perm", ")", "if", "(", "not", "parent", ")", ":", "return", "[", "]", "if", "(", "not", "parent", ".", "IsDir", "(", ")", ")", ":", "return", "[", "]", "result", "=", "[", "]", "_id", "=", "(", "start", "-", "1", ")", "for", "i", "in", "range", "(", "start", ",", "(", "end", "+", "1", ")", ")", ":", "target", "=", "(", "i", "-", "1", ")", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "return", "[", "]", "while", "(", "parent", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "_id", "+", "=", "1", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "return", "result", "item", "=", "parent", ".", "items", "[", "_id", "]", "item", ".", "mtitle", "=", "item", ".", "title", "result", "+", "=", "[", "item", "]", "return", "result", "def", "EffectiveId", "(", "self", ",", "user", ")", ":", "_id", "=", "self", ".", "id", "if", "user", ".", "IsSysop", "(", ")", ":", "return", "_id", "if", "(", "not", "user", ".", "IsSysop", "(", ")", ")", ":", "_id", "-", "=", "self", ".", "sysop_only", "if", "(", "not", "user", ".", "IsBM", "(", ")", ")", ":", "_id", "-", "=", "self", ".", "bms_only", "if", "(", "not", "user", ".", "IsSECANC", "(", ")", ")", ":", "_id", "-", "=", "self", ".", "zixia_only", "return", "_id", "def", "GetInfo", "(", "self", ")", ":", "info", "=", "{", "}", "info", "[", "'mtitle'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "mtitle", ")", "info", "[", "'title'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "title", ")", "info", "[", "'attach'", "]", "=", "self", ".", "attachpos", "if", "(", "self", ".", "host", "!=", "''", ")", ":", "info", "[", "'host'", "]", "=", "self", ".", "host", "info", "[", "'port'", "]", "=", "self", ".", "port", "info", "[", "'type'", "]", "=", "'link'", "elif", "self", ".", "IsDir", "(", ")", ":", "info", "[", "'type'", "]", "=", "'dir'", "elif", "self", ".", "IsFile", "(", ")", ":", "info", "[", "'type'", "]", "=", "'file'", "else", ":", "info", "[", "'type'", "]", "=", "'other'", "info", "[", "'mtime'", "]", "=", "int", "(", "self", ".", "GetModTime", "("], 500]
[["(", "self", ".", "items", ")", ")", ":", "return", "None", "while", "(", "self", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "_id", "+", "=", "1", "if", "(", "_id", ">=", "len", "(", "self", ".", "items", ")", ")", ":", "return", "None", "item", "=", "self", ".", "items", "[", "_id", "]", "item", ".", "mtitle", "=", "item", ".", "title", "if", "(", "len", "(", "route", ")", "==", "1", ")", ":", "return", "item", "elif", "item", ".", "IsDir", "(", ")", ":", "if", "(", "not", "item", ".", "CheckUpdate", "(", ")", ")", ":", "return", "None", "return", "item", ".", "GetItem", "(", "user", ",", "route", "[", "1", ":", "]", ",", "has_perm", ",", "need_perm", ")", "else", ":", "return", "None", "def", "GetRange", "(", "self", ",", "user", ",", "route", ",", "start", ",", "end", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "self", ".", "CheckUpdate", "(", ")", "firstitem", "=", "self", ".", "GetItem", "(", "user", ",", "(", "route", "+", "[", "start", "]", ")", ",", "has_perm", ",", "need_perm", ")", "if", "(", "not", "firstitem", ")", ":", "return", "[", "]", "parent", "=", "self", ".", "GetItem", "(", "user", ",", "route", ",", "has_perm", ",", "need_perm", ")", "if", "(", "not", "parent", ")", ":", "return", "[", "]", "if", "(", "not", "parent", ".", "IsDir", "(", ")", ")", ":", "return", "[", "]", "result", "=", "[", "]", "_id", "=", "(", "start", "-", "1", ")", "for", "i", "in", "range", "(", "start", ",", "(", "end", "+", "1", ")", ")", ":", "target", "=", "(", "i", "-", "1", ")", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "return", "[", "]", "while", "(", "parent", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "_id", "+", "=", "1", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "return", "result", "item", "=", "parent", ".", "items", "[", "_id", "]", "item", ".", "mtitle", "=", "item", ".", "title", "result", "+", "=", "[", "item", "]", "return", "result", "def", "EffectiveId", "(", "self", ",", "user", ")", ":", "_id", "=", "self", ".", "id", "if", "user", ".", "IsSysop", "(", ")", ":", "return", "_id", "if", "(", "not", "user", ".", "IsSysop", "(", ")", ")", ":", "_id", "-", "=", "self", ".", "sysop_only", "if", "(", "not", "user", ".", "IsBM", "(", ")", ")", ":", "_id", "-", "=", "self", ".", "bms_only", "if", "(", "not", "user", ".", "IsSECANC", "(", ")", ")", ":", "_id", "-", "=", "self", ".", "zixia_only", "return", "_id", "def", "GetInfo", "(", "self", ")", ":", "info", "=", "{", "}", "info", "[", "'mtitle'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "mtitle", ")", "info", "[", "'title'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "title", ")", "info", "[", "'attach'", "]", "=", "self", ".", "attachpos", "if", "(", "self", ".", "host", "!=", "''", ")", ":", "info", "[", "'host'", "]", "=", "self", ".", "host", "info", "[", "'port'", "]", "=", "self", ".", "port", "info", "[", "'type'", "]", "=", "'link'", "elif", "self", ".", "IsDir", "(", ")", ":", "info", "[", "'type'", "]", "=", "'dir'", "elif", "self", ".", "IsFile", "(", ")", ":", "info", "[", "'type'", "]", "=", "'file'", "else", ":", "info", "[", "'type'", "]", "=", "'other'", "info", "[", "'mtime'", "]", "=", "int", "(", "self", ".", "GetModTime", "(", ")", ")", "return", "info", "def", "GetInfoForUser", "(", "self", ",", "user", ")", ":", "info", "=", "self", ".", "GetInfo", "(", ")", "info", "[", "'id'", "]", "=", "(", "self", ".", "EffectiveId", "(", "user", ")", "+", "1", ")", "return", "info", "def", "GetAttachLink", "(", "self", ",", "session", ")", ":", "_hash", "=", "Util", ".", "HashGen", "(", "self", ".", "path", "(", ")", ",", "'python nb'", ")", "filename", "=", "''", "for", "i", "in", "range", "(", "2", ")", ":", "filename", "+", "=", "(", "'%0x'", "%", "struct", ".", "unpack", "(", "'=I'", ",", "_hash", "[", "(", "i", "*", "4", ")", ":", "(", "(", "i", "+", "1", ")", "*", "4", ")", "]", ")", ")", "link", "=", "(", "'http://%s/bbscon.php?b=xattach&f=%s'", "%", "(", "session", ".", "GetMirror", "(", "Config", ".", "Config", ".", "GetInt", "(", "'ATTACHMENT_PORT'", ",", "80", ")", ")", ",", "filename", ")", ")", "linkfile", "=", "(", "'%s/boards/xattach/%s'", "%", "(", "Config", ".", "BBS_ROOT", ",", "filename", ")", ")", "target", "=", "(", "'../../%s'", "%", "self", ".", "path", "(", ")", ")", "try", ":", "os", ".", "symlink", "(", "target", ",", "linkfile", ")", "except", ":", "pass", "return", "link", "class", "Digest", "(", ")", ":", "root", "=", "DigestItem", "(", "'0Announce'", ")", "def", "__init__", "(", "self", ",", "board", ",", "path", ")", ":", "self", ".", "board", "=", "board", "self", ".", "path", "=", "path", "self", ".", "root", "=", "DigestItem", "(", "self", ".", "path", ")", "@", "staticmethod", "def", "GET", "(", "svc", ",", "session", ",", "params", ",", "action", ")", ":", "if", "(", "session", "is", "None", ")", ":", "raise", "Unauthorized", "(", "'login first'", ")", "if", "(", "not", "session", ".", "CheckScope", "(", "'bbs'", ")", ")", ":", "raise", "NoPerm", "(", "'out of scope'", ")", "user", "=", "session", ".", "GetUser", "(", ")", "boardname", "=", "svc", ".", "get_str", "(", "params", ",", "'board'", ",", "''", ")", "if", "boardname", ":", "board", "=", "BoardManager", ".", "BoardManager", ".", "GetBoard", "(", "boardname", ")", "if", "(", "board", "is", "None", ")", ":", "raise", "NotFound", "(", "(", "'board %s not found'", "%", "boardname", ")", ")", "if", "(", "not", "board", ".", "CheckReadPerm", "(", "user", ")", ")", ":", "raise", "NoPerm", "(", "'permission denied'", ")", "basenode", "=", "board", ".", "digest", ".", "root", "has_perm", "=", "(", "user", ".", "IsDigestMgr", "(", ")", "or", "user", ".", "IsSysop", "(", ")", "or", "user", ".", "IsSuperBM", "(", ")", ")", "else", ":", "basenode", "=", "Digest", ".", "root", "has_perm", "=", "user", ".", "IsDigestMgr", "(", ")", "if", "(", "action", "==", "'list'", ")", ":", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "1", ")", "end", "=", "svc", ".", "get_int", "(", "params", ",", "'end'", ",", "(", "(", "start", "+", "DEFAULT_DIGEST_LIST_COUNT", ")", "-", "1", ")", ")", "Digest", ".", "List", "(", "svc", ",", "basenode", ",", "route", ",", "start", ",", "end", ",", "session", ",", "has_perm", ")", "return", "elif", "(", "action", "==", "'view'", ")", ":", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "0", ")", "count", "=", "svc", ".", "get_int", "(", "params", ",", "'count'", ",", "0", ")", "Digest", ".", "View", "(", "svc", ",", "basenode", ",", "route", ",", "session", ",", "has_perm", ",", "start", ",", "count", ")", "return", "else", ":", "raise", "WrongArgs", "(", "(", "'unknown action %s'", "%", "action", ")", ")", "@", "staticmethod", "def", "ParseRoute", "(", "route", ")"], 500]
[[".", "gbkDec", "(", "self", ".", "title", ")", "info", "[", "'attach'", "]", "=", "self", ".", "attachpos", "if", "(", "self", ".", "host", "!=", "''", ")", ":", "info", "[", "'host'", "]", "=", "self", ".", "host", "info", "[", "'port'", "]", "=", "self", ".", "port", "info", "[", "'type'", "]", "=", "'link'", "elif", "self", ".", "IsDir", "(", ")", ":", "info", "[", "'type'", "]", "=", "'dir'", "elif", "self", ".", "IsFile", "(", ")", ":", "info", "[", "'type'", "]", "=", "'file'", "else", ":", "info", "[", "'type'", "]", "=", "'other'", "info", "[", "'mtime'", "]", "=", "int", "(", "self", ".", "GetModTime", "(", ")", ")", "return", "info", "def", "GetInfoForUser", "(", "self", ",", "user", ")", ":", "info", "=", "self", ".", "GetInfo", "(", ")", "info", "[", "'id'", "]", "=", "(", "self", ".", "EffectiveId", "(", "user", ")", "+", "1", ")", "return", "info", "def", "GetAttachLink", "(", "self", ",", "session", ")", ":", "_hash", "=", "Util", ".", "HashGen", "(", "self", ".", "path", "(", ")", ",", "'python nb'", ")", "filename", "=", "''", "for", "i", "in", "range", "(", "2", ")", ":", "filename", "+", "=", "(", "'%0x'", "%", "struct", ".", "unpack", "(", "'=I'", ",", "_hash", "[", "(", "i", "*", "4", ")", ":", "(", "(", "i", "+", "1", ")", "*", "4", ")", "]", ")", ")", "link", "=", "(", "'http://%s/bbscon.php?b=xattach&f=%s'", "%", "(", "session", ".", "GetMirror", "(", "Config", ".", "Config", ".", "GetInt", "(", "'ATTACHMENT_PORT'", ",", "80", ")", ")", ",", "filename", ")", ")", "linkfile", "=", "(", "'%s/boards/xattach/%s'", "%", "(", "Config", ".", "BBS_ROOT", ",", "filename", ")", ")", "target", "=", "(", "'../../%s'", "%", "self", ".", "path", "(", ")", ")", "try", ":", "os", ".", "symlink", "(", "target", ",", "linkfile", ")", "except", ":", "pass", "return", "link", "class", "Digest", "(", ")", ":", "root", "=", "DigestItem", "(", "'0Announce'", ")", "def", "__init__", "(", "self", ",", "board", ",", "path", ")", ":", "self", ".", "board", "=", "board", "self", ".", "path", "=", "path", "self", ".", "root", "=", "DigestItem", "(", "self", ".", "path", ")", "@", "staticmethod", "def", "GET", "(", "svc", ",", "session", ",", "params", ",", "action", ")", ":", "if", "(", "session", "is", "None", ")", ":", "raise", "Unauthorized", "(", "'login first'", ")", "if", "(", "not", "session", ".", "CheckScope", "(", "'bbs'", ")", ")", ":", "raise", "NoPerm", "(", "'out of scope'", ")", "user", "=", "session", ".", "GetUser", "(", ")", "boardname", "=", "svc", ".", "get_str", "(", "params", ",", "'board'", ",", "''", ")", "if", "boardname", ":", "board", "=", "BoardManager", ".", "BoardManager", ".", "GetBoard", "(", "boardname", ")", "if", "(", "board", "is", "None", ")", ":", "raise", "NotFound", "(", "(", "'board %s not found'", "%", "boardname", ")", ")", "if", "(", "not", "board", ".", "CheckReadPerm", "(", "user", ")", ")", ":", "raise", "NoPerm", "(", "'permission denied'", ")", "basenode", "=", "board", ".", "digest", ".", "root", "has_perm", "=", "(", "user", ".", "IsDigestMgr", "(", ")", "or", "user", ".", "IsSysop", "(", ")", "or", "user", ".", "IsSuperBM", "(", ")", ")", "else", ":", "basenode", "=", "Digest", ".", "root", "has_perm", "=", "user", ".", "IsDigestMgr", "(", ")", "if", "(", "action", "==", "'list'", ")", ":", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "1", ")", "end", "=", "svc", ".", "get_int", "(", "params", ",", "'end'", ",", "(", "(", "start", "+", "DEFAULT_DIGEST_LIST_COUNT", ")", "-", "1", ")", ")", "Digest", ".", "List", "(", "svc", ",", "basenode", ",", "route", ",", "start", ",", "end", ",", "session", ",", "has_perm", ")", "return", "elif", "(", "action", "==", "'view'", ")", ":", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "0", ")", "count", "=", "svc", ".", "get_int", "(", "params", ",", "'count'", ",", "0", ")", "Digest", ".", "View", "(", "svc", ",", "basenode", ",", "route", ",", "session", ",", "has_perm", ",", "start", ",", "count", ")", "return", "else", ":", "raise", "WrongArgs", "(", "(", "'unknown action %s'", "%", "action", ")", ")", "@", "staticmethod", "def", "ParseRoute", "(", "route", ")", ":", "ret", "=", "[", "]", "items", "=", "re", ".", "split", "(", "'-'", ",", "route", ")", "items", "=", "items", "[", "1", ":", "]", "for", "item", "in", "items", ":", "try", ":", "ret", "+", "=", "[", "int", "(", "item", ")", "]", "except", ":", "raise", "WrongArgs", "(", "(", "'fail to parse route element: %s'", "%", "item", ")", ")", "return", "ret", "@", "staticmethod", "def", "List", "(", "svc", ",", "basenode", ",", "route", ",", "start", ",", "end", ",", "session", ",", "has_perm", ")", ":", "route_array", "=", "Digest", ".", "ParseRoute", "(", "route", ")", "parent", "=", "basenode", ".", "GetItem", "(", "session", ".", "GetUser", "(", ")", ",", "route_array", ",", "has_perm", ")", "if", "(", "not", "parent", ")", ":", "raise", "WrongArgs", "(", "(", "'route %s does not exist!'", "%", "route", ")", ")", "if", "(", "not", "parent", ".", "IsDir", "(", ")", ")", ":", "raise", "WrongArgs", "(", "(", "'route %s does not point to a dir!'", "%", "route", ")", ")", "items", "=", "basenode", ".", "GetRange", "(", "session", ".", "GetUser", "(", ")", ",", "route_array", ",", "start", ",", "end", ",", "has_perm", ")", "result", "=", "{", "}", "result", "[", "'parent'", "]", "=", "parent", ".", "GetInfoForUser", "(", "session", ".", "GetUser", "(", ")", ")", "result", "[", "'count'", "]", "=", "len", "(", "items", ")", "result_list", "=", "[", "]", "for", "item", "in", "items", ":", "result_list", "+", "=", "[", "item", ".", "GetInfoForUser", "(", "session", ".", "GetUser", "(", ")", ")", "]", "result", "[", "'items'", "]", "=", "result_list", "svc", ".", "writedata", "(", "json", ".", "dumps", "(", "result", ")", ")", "@", "staticmethod", "def", "View", "(", "svc", ",", "basenode", ",", "route", ",", "session", ",", "has_perm", ",", "start", ",", "count", ")", ":", "route_array", "=", "Digest", ".", "ParseRoute", "(", "route", ")", "item", "=", "basenode", ".", "GetItem", "(", "session", ".", "GetUser", "(", ")", ",", "route_array", ",", "has_perm", ")", "if", "(", "not", "item", ")", ":", "raise", "WrongArgs", "(", "(", "'route %s does not exist!'", "%", "route", ")", ")", "if", "(", "not", "item", ".", "IsFile", "(", ")", ")", ":", "raise", "WrongArgs", "(", "(", "'route %s does not point to a file'", "%", "route", ")", ")", "result", "=", "{", "}", "result", "[", "'item'", "]", "=", "item", ".", "GetInfoForUser", "(", "session", ".", "GetUser", "(", ")", ")", "postinfo", "=", "Post", ".", "Post", "(", "item", ".", "realpath", "(", ")", ",", "None", ")", "(", "result", "[", "'content'", "]", ",", "result", "[", "'has_end'", "]", ")", "=", "postinfo", ".", "GetContent", "(", "start", ",", "count", ")", "attachlist", "=", "postinfo", ".", "GetAttachListByType", "(", ")", "result", "[", "'picattach'", "]", "=", "attachlist", "[", "0", "]", "result", "[", "'otherattach'", "]", "=", "attachlist", "[", "1", "]", "if", "(", "attachlist", "[", "0", "]", "or", "attachlist", "[", "1", "]", ")", ":", "result", "[", "'attachlink'", "]", "=", "item", ".", "GetAttachLink", "(", "session", ")", "svc", ".", "writedata", "(", "json", ".", "dumps", "(", "result", ")", ")"], 591]
[["import", "time", "import", "UserManager", "import", "UserInfo", "from", "Session", "import", "Session", "from", "Log", "import", "Log", "import", "UCache", "import", "Config", "import", "MsgBox", "import", "xmpp", "import", "modes", "import", "Util", "import", "traceback", "import", "os", "from", "xmpp.features", "import", "NoRoute", "__disco_info_ns__", "=", "'http://jabber.org/protocol/disco#info'", "__disco_items_ns__", "=", "'http://jabber.org/protocol/disco#items'", "__vcard_ns__", "=", "'vcard-temp'", "STEAL_AFTER_SEEN", "=", "3", "def", "elem_to_str", "(", "elem", ")", ":", "return", "(", "'<%r %r>%r</>'", "%", "(", "elem", ".", "tag", ",", "elem", ".", "attrib", ",", "elem", ".", "text", ")", ")", "class", "XMPPServer", "(", "xmpp", ".", "Plugin", ")", ":", "'XMPP server for the BBS'", "def", "__init__", "(", "self", ",", "rosters", ",", "host", ")", ":", "self", ".", "probed", "=", "False", "self", ".", "_closed", "=", "False", "self", ".", "rosters", "=", "rosters", "self", ".", "_session", "=", "None", "self", ".", "rosters", ".", "set_resources", "(", "self", ".", "get_resources", "(", ")", ")", "self", ".", "_fixedjid", "=", "UCache", ".", "UCache", ".", "formalize_jid", "(", "unicode", "(", "self", ".", "authJID", ")", ")", "self", ".", "_userid", "=", "self", ".", "_fixedjid", ".", "partition", "(", "'@'", ")", "[", "0", "]", ".", "encode", "(", "'gbk'", ")", "if", "(", "not", "self", ".", "rosters", ".", "allow_login", "(", "self", ".", "authJID", ".", "bare", ")", ")", ":", "Log", ".", "warn", "(", "(", "'user %s login denied'", "%", "self", ".", "_userid", ")", ")", "self", ".", "stream_error", "(", "'policy-violation'", ",", "'Login denied. Too many logins?'", ")", "return", "Log", ".", "info", "(", "(", "'%s: session start'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "if", "(", "(", "self", ".", "authJID", ".", "resource", "[", ":", "(", "-", "8", ")", "]", "!=", "'Resource'", ")", "and", "(", "len", "(", "self", ".", "authJID", ".", "resource", ")", ">", "8", ")", ")", ":", "try", ":", "routes", "=", "self", ".", "routes", "(", "self", ".", "authJID", ".", "bare", ")", "for", "route", "in", "routes", ":", "jid", "=", "route", "[", "0", "]", "if", "(", "jid", ".", "resource", "[", ":", "(", "-", "8", ")", "]", "==", "self", ".", "authJID", ".", "resource", "[", ":", "(", "-", "8", ")", "]", ")", ":", "if", "(", "jid", ".", "resource", "!=", "self", ".", "authJID", ".", "resource", ")", ":", "Log", ".", "info", "(", "(", "'old jid: %s %r'", "%", "(", "jid", ".", "full", ",", "route", "[", "1", "]", ")", ")", ")", "route", "[", "1", "]", ".", "stream_error", "(", "'conflict'", ",", "'A new client with the same resource connected'", ")", "else", ":", "Log", ".", "info", "(", "(", "'another me: %s %r'", "%", "(", "jid", ".", "full", ",", "route", "[", "1", "]", ")", ")", ")", "except", "NoRoute", ":", "pass", "Log", ".", "debug", "(", "(", "'%s: checked for old sessions'", "%", "self", ".", "authJID", ".", "full", ")", ")", "self", ".", "_user", "=", "UserManager", ".", "UserManager", ".", "LoadUser", "(", "self", ".", "_userid", ")", "if", "(", "self", ".", "_user", "==", "None", ")", ":", "raise", "Exception", "(", "'How can that be!'", ")", "self", ".", "_peer_addr", "=", "self", ".", "getpeername", "(", ")", "self", ".", "_session", "=", "Session", "(", "self", ".", "_user", ",", "self", ".", "_peer_addr", "[", "0", "]", ")", "self", ".", "_session", ".", "RecordLogin", "(", ")", "self", ".", "_userinfo", "=", "self", ".", "_session", ".", "Register", "(", ")", "self", ".", "_loginid", "=", "self", ".", "_session", ".", "utmpent", "self", ".", "_hostname", "=", "host", "self", ".", "bind", "(", "xmpp", ".", "ReceivedCloseStream", ",", "self", ".", "recv_close", ")", "self", ".", "bind", "(", "xmpp", ".", "StreamClosed", ",", "self", ".", "stream_closed", ")", "self", ".", "bind", "(", "xmpp", ".", "SentCloseStream", ",", "self", ".", "sent_close", ")", "self", ".", "rosters", ".", "register_conn", "(", "self", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "if", "(", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "is", "None", ")", ":", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "(", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "-", "msgbox", ".", "GetUnreadCount", "(", ")", ")", ")", "self", ".", "check_msg", "(", ")", "def", "get_loginid", "(", "self", ")", ":", "return", "self", ".", "_loginid", "def", "recv_close", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'%s: close because he wants to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "return", "self", ".", "close", "(", ")", "def", "stream_closed", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'%s: close because stream closed'", "%", "self", ".", "authJID", ".", "full", ")", ")", "return", "self", ".", "close", "(", ")", "def", "sent_close", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'%s: close because we want to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "return", "self", ".", "close", "(", ")", "def", "close", "(", "self", ")", ":", "if", "self", ".", "_closed", ":", "Log", ".", "debug", "(", "'already closed. ignore'", ")", "return", "self", ".", "_closed", "=", "True", "Log", ".", "info", "(", "(", "'%s: session end'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "if", "self", ".", "_session", ":", "self", ".", "_session", ".", "Unregister", "(", ")", "self", ".", "unbind_res", "(", ")", "self", ".", "rosters", ".", "unregister_conn", "(", "self", ")", "@", "xmpp", ".", "iq", "(", "'{urn:xmpp:ping}ping'", ")", "def", "ping", "(", "self", ",", "iq", ")", ":", "'Handle ping requests'", "self", ".", "refresh", "(", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "@", "xmpp", ".", "stanza", "(", "'message'", ")", "def", "message", "(", "self", ",", "elem", ")", ":", "'Proxy message from one user to another'", "to_jid", "=", "elem", ".", "get", "(", "'to'", ")", "from_jid", "=", "elem", ".", "get", "(", "'from'", ")", "if", "(", "from_jid", "==", "None", ")", ":", "return", "text_body", "=", "None", "for", "child", "in", "elem", ":", "if", "child", ".", "tag", ".", "endswith", "(", "'}body'", ")", ":", "text_body", "=", "child", ".", "text", "if", "(", "text_body", "==", "None", ")", ":", "return", "ret", "=", "self", ".", "rosters", ".", "send_msg", "(", "from_jid", ",", "to_jid", ",", "text_body", ")", "if", "(", "ret", "<=", "0", ")", ":", "Log", ".", "warn", "(", "(", "'sendmsg() failed to %s from %s error %d'", "%", "(", "to_jid", ",", "from_jid", ",", "ret", ")", ")", ")", "errors", "=", "{", "(", "-", "1", ")", ":", "'That user has locked screen, please send later.'", ",", "(", "-", "11", ")", ":", "'That user denied your message.'", ",", "(", "-", "12", ")", ":", "'That user has too many unread messages. Please send later.'", ",", "(", "-", "13", ")", ":", "'User has gone after message sent.'", ",", "(", "-", "14", ")", ":", "'User has gone before message sent.'", ",", "(", "-", "2", ")", ":", "'User has gone before message sent.'", ",", "(", "-", "21", ")", ":", "'Error when sending message!'", "}", "if", "(", "ret", "in", "errors", ")", ":", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "to_jid", ",", "'to'", ":", "from_jid", ",", "'type'", ":", "'error'", "}", ",", "self", ".", "E", ".", "body", "(", "errors", "[", "ret", "]", ")", ")", "self", ".", "recv", "(", "from_jid", ",", "elem", ")", "def", "make_jid", "(", "self", ",", "userid", ")", ":", "return", "(", "'%s@%s'", "%", "(", "userid", ",", "self", ".", "_hostname", ")", ")", "def", "refresh", "(", "self", ")", ":", "self", ".", "_userinfo", ".", "freshtime", "=", "int", "(", "time", "."], 0]
[["self", ".", "rosters", ".", "register_conn", "(", "self", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "if", "(", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "is", "None", ")", ":", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "(", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "-", "msgbox", ".", "GetUnreadCount", "(", ")", ")", ")", "self", ".", "check_msg", "(", ")", "def", "get_loginid", "(", "self", ")", ":", "return", "self", ".", "_loginid", "def", "recv_close", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'%s: close because he wants to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "return", "self", ".", "close", "(", ")", "def", "stream_closed", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'%s: close because stream closed'", "%", "self", ".", "authJID", ".", "full", ")", ")", "return", "self", ".", "close", "(", ")", "def", "sent_close", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'%s: close because we want to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "return", "self", ".", "close", "(", ")", "def", "close", "(", "self", ")", ":", "if", "self", ".", "_closed", ":", "Log", ".", "debug", "(", "'already closed. ignore'", ")", "return", "self", ".", "_closed", "=", "True", "Log", ".", "info", "(", "(", "'%s: session end'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "if", "self", ".", "_session", ":", "self", ".", "_session", ".", "Unregister", "(", ")", "self", ".", "unbind_res", "(", ")", "self", ".", "rosters", ".", "unregister_conn", "(", "self", ")", "@", "xmpp", ".", "iq", "(", "'{urn:xmpp:ping}ping'", ")", "def", "ping", "(", "self", ",", "iq", ")", ":", "'Handle ping requests'", "self", ".", "refresh", "(", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "@", "xmpp", ".", "stanza", "(", "'message'", ")", "def", "message", "(", "self", ",", "elem", ")", ":", "'Proxy message from one user to another'", "to_jid", "=", "elem", ".", "get", "(", "'to'", ")", "from_jid", "=", "elem", ".", "get", "(", "'from'", ")", "if", "(", "from_jid", "==", "None", ")", ":", "return", "text_body", "=", "None", "for", "child", "in", "elem", ":", "if", "child", ".", "tag", ".", "endswith", "(", "'}body'", ")", ":", "text_body", "=", "child", ".", "text", "if", "(", "text_body", "==", "None", ")", ":", "return", "ret", "=", "self", ".", "rosters", ".", "send_msg", "(", "from_jid", ",", "to_jid", ",", "text_body", ")", "if", "(", "ret", "<=", "0", ")", ":", "Log", ".", "warn", "(", "(", "'sendmsg() failed to %s from %s error %d'", "%", "(", "to_jid", ",", "from_jid", ",", "ret", ")", ")", ")", "errors", "=", "{", "(", "-", "1", ")", ":", "'That user has locked screen, please send later.'", ",", "(", "-", "11", ")", ":", "'That user denied your message.'", ",", "(", "-", "12", ")", ":", "'That user has too many unread messages. Please send later.'", ",", "(", "-", "13", ")", ":", "'User has gone after message sent.'", ",", "(", "-", "14", ")", ":", "'User has gone before message sent.'", ",", "(", "-", "2", ")", ":", "'User has gone before message sent.'", ",", "(", "-", "21", ")", ":", "'Error when sending message!'", "}", "if", "(", "ret", "in", "errors", ")", ":", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "to_jid", ",", "'to'", ":", "from_jid", ",", "'type'", ":", "'error'", "}", ",", "self", ".", "E", ".", "body", "(", "errors", "[", "ret", "]", ")", ")", "self", ".", "recv", "(", "from_jid", ",", "elem", ")", "def", "make_jid", "(", "self", ",", "userid", ")", ":", "return", "(", "'%s@%s'", "%", "(", "userid", ",", "self", ".", "_hostname", ")", ")", "def", "refresh", "(", "self", ")", ":", "self", ".", "_userinfo", ".", "freshtime", "=", "int", "(", "time", ".", "time", "(", ")", ")", "self", ".", "_userinfo", ".", "save", "(", ")", "def", "ping_result", "(", "self", ",", "iq", ")", ":", "self", ".", "refresh", "(", ")", "def", "ping_client", "(", "self", ")", ":", "try", ":", "pingelem", "=", "self", ".", "E", ".", "ping", "(", "xmlns", "=", "'urn:xmpp:ping'", ")", "return", "self", ".", "iq", "(", "'get'", ",", "self", ".", "ping_result", ",", "pingelem", ")", "except", "Exception", "as", "e", ":", "Log", ".", "debug", "(", "(", "'ping client %r failed: %r'", "%", "(", "self", ".", "authJID", ",", "e", ")", ")", ")", "Log", ".", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "return", "False", "def", "get_uid", "(", "self", ")", ":", "return", "self", ".", "_user", ".", "GetUID", "(", ")", "def", "recv_msg", "(", "self", ",", "from_", ",", "msgtext", ")", ":", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "from_", ",", "'to'", ":", "unicode", "(", "self", ".", "authJID", ")", "}", ",", "self", ".", "E", ".", "body", "(", "msgtext", ")", ")", "self", ".", "recv", "(", "unicode", "(", "self", ".", "authJID", ")", ",", "elem", ")", "def", "check_msg", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'checking msg for %s'", "%", "self", ".", "_userid", ")", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "my_pid", "=", "os", ".", "getpid", "(", ")", "xmpp_read", "=", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "if", "(", "xmpp_read", ">", "msg_count", ")", ":", "xmpp_read", "=", "0", "Log", ".", "debug", "(", "(", "'total: %d xmpp read: %d'", "%", "(", "msg_count", ",", "xmpp_read", ")", ")", ")", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "msg_count", ")", "if", "(", "xmpp_read", "<", "msg_count", ")", ":", "return", "xmpp_read", "else", ":", "return", "(", "-", "1", ")", "def", "deliver_msg", "(", "self", ",", "start", ")", ":", "Log", ".", "debug", "(", "(", "'deliver msg to %s'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "my_pid", "=", "os", ".", "getpid", "(", ")", "for", "i", "in", "range", "(", "start", ",", "msg_count", ")", ":", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "def", "steal_msg", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'stealing msg for %s'", "%", "self", ".", "_userid", ")", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "msg_unread", "=", "msgbox", ".", "GetUnreadCount", "(", ")", "read_count", "=", "(", "msg_count", "-", "msg_unread", ")", "my_pid", "=", "os", ".", "getpid", "(", ")", "term_read", "=", "self", ".", "rosters", ".", "get_term_read", "(", "self", ".", "get_uid", "(", ")", ")", "term_stealed", "=", "self", ".", "rosters", ".", "get_term_stealed", "(", "self", ".", "get_uid", "(", ")", ")", "all_xmpp", "=", "True", "new_unread", "=", "{", "}", "for", "i", "in", "range", "(", "(", "read_count", "-", "1", ")", ",", "msg_count", ")", ":", "if", "(", "i", "<", "0", ")", ":", "continue", "msghead", "=", "msgbox", "."], 500]
[["time", "(", ")", ")", "self", ".", "_userinfo", ".", "save", "(", ")", "def", "ping_result", "(", "self", ",", "iq", ")", ":", "self", ".", "refresh", "(", ")", "def", "ping_client", "(", "self", ")", ":", "try", ":", "pingelem", "=", "self", ".", "E", ".", "ping", "(", "xmlns", "=", "'urn:xmpp:ping'", ")", "return", "self", ".", "iq", "(", "'get'", ",", "self", ".", "ping_result", ",", "pingelem", ")", "except", "Exception", "as", "e", ":", "Log", ".", "debug", "(", "(", "'ping client %r failed: %r'", "%", "(", "self", ".", "authJID", ",", "e", ")", ")", ")", "Log", ".", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "return", "False", "def", "get_uid", "(", "self", ")", ":", "return", "self", ".", "_user", ".", "GetUID", "(", ")", "def", "recv_msg", "(", "self", ",", "from_", ",", "msgtext", ")", ":", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "from_", ",", "'to'", ":", "unicode", "(", "self", ".", "authJID", ")", "}", ",", "self", ".", "E", ".", "body", "(", "msgtext", ")", ")", "self", ".", "recv", "(", "unicode", "(", "self", ".", "authJID", ")", ",", "elem", ")", "def", "check_msg", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'checking msg for %s'", "%", "self", ".", "_userid", ")", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "my_pid", "=", "os", ".", "getpid", "(", ")", "xmpp_read", "=", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "if", "(", "xmpp_read", ">", "msg_count", ")", ":", "xmpp_read", "=", "0", "Log", ".", "debug", "(", "(", "'total: %d xmpp read: %d'", "%", "(", "msg_count", ",", "xmpp_read", ")", ")", ")", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "msg_count", ")", "if", "(", "xmpp_read", "<", "msg_count", ")", ":", "return", "xmpp_read", "else", ":", "return", "(", "-", "1", ")", "def", "deliver_msg", "(", "self", ",", "start", ")", ":", "Log", ".", "debug", "(", "(", "'deliver msg to %s'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "my_pid", "=", "os", ".", "getpid", "(", ")", "for", "i", "in", "range", "(", "start", ",", "msg_count", ")", ":", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "def", "steal_msg", "(", "self", ")", ":", "Log", ".", "debug", "(", "(", "'stealing msg for %s'", "%", "self", ".", "_userid", ")", ")", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "msg_unread", "=", "msgbox", ".", "GetUnreadCount", "(", ")", "read_count", "=", "(", "msg_count", "-", "msg_unread", ")", "my_pid", "=", "os", ".", "getpid", "(", ")", "term_read", "=", "self", ".", "rosters", ".", "get_term_read", "(", "self", ".", "get_uid", "(", ")", ")", "term_stealed", "=", "self", ".", "rosters", ".", "get_term_stealed", "(", "self", ".", "get_uid", "(", ")", ")", "all_xmpp", "=", "True", "new_unread", "=", "{", "}", "for", "i", "in", "range", "(", "(", "read_count", "-", "1", ")", ",", "msg_count", ")", ":", "if", "(", "i", "<", "0", ")", ":", "continue", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "if", "(", "(", "i", ">=", "read_count", ")", "and", "all_xmpp", ")", ":", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "msgbox", ".", "GetUnreadMsg", "(", ")", "else", ":", "all_xmpp", "=", "False", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "continue", "if", "(", "i", "<", "read_count", ")", ":", "session", "=", "self", ".", "rosters", ".", "find_session", "(", "self", ".", "authJID", ".", "bare", ",", "msghead", ".", "topid", ")", "if", "(", "(", "session", "is", "None", ")", "or", "(", "session", ".", "get_mode", "(", ")", "!=", "modes", ".", "MSG", ")", ")", ":", "continue", "Log", ".", "debug", "(", "(", "'considered msg %d as unread'", "%", "i", ")", ")", "if", "(", "msghead", ".", "topid", "not in", "new_unread", ")", ":", "Log", ".", "debug", "(", "(", "'for pid %d, first unread at %d'", "%", "(", "msghead", ".", "topid", ",", "i", ")", ")", ")", "new_unread", "[", "msghead", ".", "topid", "]", "=", "i", "final_unread", "=", "{", "}", "to_steal", "=", "{", "}", "to_steal_begin", "=", "msg_count", "for", "pid", "in", "term_read", ":", "if", "(", "pid", "in", "new_unread", ")", ":", "if", "(", "new_unread", "[", "pid", "]", "==", "term_read", "[", "pid", "]", "[", "0", "]", ")", ":", "final_unread", "[", "pid", "]", "=", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1", ")", ")", "Log", ".", "debug", "(", "(", "'.. still unread: %d for %d, %d times'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1", ")", ")", ")", ")", "if", "(", "final_unread", "[", "pid", "]", "[", "1", "]", ">", "STEAL_AFTER_SEEN", ")", ":", "to_steal", "[", "pid", "]", "=", "final_unread", "[", "pid", "]", "Log", ".", "debug", "(", "(", "\".. let's steal! %d+ from %d\"", "%", "(", "to_steal", "[", "pid", "]", "[", "0", "]", ",", "pid", ")", ")", ")", "if", "(", "pid", "in", "term_stealed", ")", ":", "steal_begin", "=", "max", "(", "final_unread", "[", "pid", "]", "[", "0", "]", ",", "(", "term_stealed", "[", "pid", "]", "+", "1", ")", ")", "else", ":", "steal_begin", "=", "final_unread", "[", "pid", "]", "[", "0", "]", "if", "(", "steal_begin", "<", "to_steal_begin", ")", ":", "to_steal_begin", "=", "steal_begin", "else", ":", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "Log", ".", "debug", "(", "(", "'.. moved: %d->%d for %d'", "%", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "else", ":", "Log", ".", "debug", "(", "(", "'.. disappeared: %d'", "%", "pid", ")", ")", "pass", "for", "pid", "in", "new_unread", ":", "if", "(", "pid", "not in", "term_read", ")", ":", "Log", ".", "debug", "(", "(", "'.. new unread: %d for %d'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "if", "to_steal", ":", "Log", ".", "debug", "(", "(", "'steal starting from %d'", "%", "to_steal_begin", ")", ")", "for", "i", "in", "range", "(", "to_steal_begin", ",", "msg_count", ")", ":", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "Log", ".", "debug", "(", "(", "'skip xmpp %d for %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "msgbox", ".", "GetUnreadMsg", "(", ")", "elif", "(", "msghead", ".", "topid", "in", "to_steal", ")", ":", "if", "(", "(", "msghead", ".", "topid", "not in", "term_stealed"], 500]
[["LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "if", "(", "(", "i", ">=", "read_count", ")", "and", "all_xmpp", ")", ":", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "msgbox", ".", "GetUnreadMsg", "(", ")", "else", ":", "all_xmpp", "=", "False", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "continue", "if", "(", "i", "<", "read_count", ")", ":", "session", "=", "self", ".", "rosters", ".", "find_session", "(", "self", ".", "authJID", ".", "bare", ",", "msghead", ".", "topid", ")", "if", "(", "(", "session", "is", "None", ")", "or", "(", "session", ".", "get_mode", "(", ")", "!=", "modes", ".", "MSG", ")", ")", ":", "continue", "Log", ".", "debug", "(", "(", "'considered msg %d as unread'", "%", "i", ")", ")", "if", "(", "msghead", ".", "topid", "not in", "new_unread", ")", ":", "Log", ".", "debug", "(", "(", "'for pid %d, first unread at %d'", "%", "(", "msghead", ".", "topid", ",", "i", ")", ")", ")", "new_unread", "[", "msghead", ".", "topid", "]", "=", "i", "final_unread", "=", "{", "}", "to_steal", "=", "{", "}", "to_steal_begin", "=", "msg_count", "for", "pid", "in", "term_read", ":", "if", "(", "pid", "in", "new_unread", ")", ":", "if", "(", "new_unread", "[", "pid", "]", "==", "term_read", "[", "pid", "]", "[", "0", "]", ")", ":", "final_unread", "[", "pid", "]", "=", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1", ")", ")", "Log", ".", "debug", "(", "(", "'.. still unread: %d for %d, %d times'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1", ")", ")", ")", ")", "if", "(", "final_unread", "[", "pid", "]", "[", "1", "]", ">", "STEAL_AFTER_SEEN", ")", ":", "to_steal", "[", "pid", "]", "=", "final_unread", "[", "pid", "]", "Log", ".", "debug", "(", "(", "\".. let's steal! %d+ from %d\"", "%", "(", "to_steal", "[", "pid", "]", "[", "0", "]", ",", "pid", ")", ")", ")", "if", "(", "pid", "in", "term_stealed", ")", ":", "steal_begin", "=", "max", "(", "final_unread", "[", "pid", "]", "[", "0", "]", ",", "(", "term_stealed", "[", "pid", "]", "+", "1", ")", ")", "else", ":", "steal_begin", "=", "final_unread", "[", "pid", "]", "[", "0", "]", "if", "(", "steal_begin", "<", "to_steal_begin", ")", ":", "to_steal_begin", "=", "steal_begin", "else", ":", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "Log", ".", "debug", "(", "(", "'.. moved: %d->%d for %d'", "%", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "else", ":", "Log", ".", "debug", "(", "(", "'.. disappeared: %d'", "%", "pid", ")", ")", "pass", "for", "pid", "in", "new_unread", ":", "if", "(", "pid", "not in", "term_read", ")", ":", "Log", ".", "debug", "(", "(", "'.. new unread: %d for %d'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "if", "to_steal", ":", "Log", ".", "debug", "(", "(", "'steal starting from %d'", "%", "to_steal_begin", ")", ")", "for", "i", "in", "range", "(", "to_steal_begin", ",", "msg_count", ")", ":", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "Log", ".", "debug", "(", "(", "'skip xmpp %d for %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "msgbox", ".", "GetUnreadMsg", "(", ")", "elif", "(", "msghead", ".", "topid", "in", "to_steal", ")", ":", "if", "(", "(", "msghead", ".", "topid", "not in", "term_stealed", ")", "or", "(", "i", ">", "term_stealed", "[", "msghead", ".", "topid", "]", ")", ")", ":", "Log", ".", "debug", "(", "(", "'steal! %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "term_stealed", "[", "msghead", ".", "topid", "]", "=", "i", "else", ":", "Log", ".", "debug", "(", "(", "'already stealed: %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "self", ".", "rosters", ".", "set_term_read", "(", "self", ".", "get_uid", "(", ")", ",", "final_unread", ")", "@", "xmpp", ".", "stanza", "(", "'presence'", ")", "def", "presence", "(", "self", ",", "elem", ")", ":", "'Presence information may be sent out from the client or\\n        received from another account.'", "Log", ".", "warn", "(", "(", "'handle presence. me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "if", "(", "self", ".", "authJID", "==", "elem", ".", "get", "(", "'from'", ")", ")", ":", "if", "(", "(", "elem", ".", "get", "(", "'to'", ")", "==", "None", ")", "or", "(", "not", "self", ".", "authJID", ".", "match_bare", "(", "elem", ".", "get", "(", "'to'", ")", ")", ")", ")", ":", "return", "self", ".", "send_presence", "(", "elem", ")", "self", ".", "recv_presence", "(", "elem", ")", "def", "send_presence", "(", "self", ",", "elem", ")", ":", "Log", ".", "warn", "(", "(", "'send_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "direct", "=", "elem", ".", "get", "(", "'to'", ")", "if", "(", "not", "direct", ")", ":", "self", ".", "rosters", ".", "broadcast", "(", "self", ",", "elem", ")", "if", "(", "elem", ".", "get", "(", "'type'", ")", "!=", "'probe'", ")", ":", "self", ".", "recv_presence", "(", "elem", ")", "if", "(", "not", "self", ".", "probed", ")", ":", "self", ".", "probed", "=", "True", "self", ".", "rosters", ".", "probe", "(", "self", ")", "elif", "(", "not", "self", ".", "rosters", ".", "send", "(", "self", ",", "direct", ",", "elem", ")", ")", ":", "self", ".", "send", "(", "direct", ",", "elem", ")", "def", "recv_presence", "(", "self", ",", "elem", ")", ":", "Log", ".", "warn", "(", "(", "'recv_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "if", "(", "not", "self", ".", "rosters", ".", "recv", "(", "self", ",", "elem", ")", ")", ":", "Log", ".", "warn", "(", "'\\tsending it to client'", ")", "self", ".", "write", "(", "elem", ")", "@", "xmpp", ".", "iq", "(", "'{jabber:iq:roster}query'", ")", "def", "roster", "(", "self", ",", "iq", ")", ":", "\"A roster is this account's list of contacts; it may be\\n        fetched or updated.\"", "roster", "=", "self", ".", "rosters", ".", "get", "(", "self", ")", "method", "=", "getattr", "(", "self", ",", "(", "'%s_roster'", "%", "iq", ".", "get", "(", "'type'", ")", ")", ")", "return", "(", "method", "and", "method", "(", "iq", ",", "roster", ")", ")", "def", "get_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "'jabber:iq:roster'", "}", ")", "for", "item", "in", "roster", ".", "items", "(", ")", ":", "query", ".", "append", "(", "item", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ")", "def", "set_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "xmlns", "=", "'jabber:iq:roster'", ")", "for", "item", "in", "iq", "[", "0", "]", ":", "result", "=", "roster", ".", "set", "(", "item", ")", "if", "(", "result"], 500]
[[")", "or", "(", "i", ">", "term_stealed", "[", "msghead", ".", "topid", "]", ")", ")", ":", "Log", ".", "debug", "(", "(", "'steal! %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "term_stealed", "[", "msghead", ".", "topid", "]", "=", "i", "else", ":", "Log", ".", "debug", "(", "(", "'already stealed: %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "self", ".", "rosters", ".", "set_term_read", "(", "self", ".", "get_uid", "(", ")", ",", "final_unread", ")", "@", "xmpp", ".", "stanza", "(", "'presence'", ")", "def", "presence", "(", "self", ",", "elem", ")", ":", "'Presence information may be sent out from the client or\\n        received from another account.'", "Log", ".", "warn", "(", "(", "'handle presence. me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "if", "(", "self", ".", "authJID", "==", "elem", ".", "get", "(", "'from'", ")", ")", ":", "if", "(", "(", "elem", ".", "get", "(", "'to'", ")", "==", "None", ")", "or", "(", "not", "self", ".", "authJID", ".", "match_bare", "(", "elem", ".", "get", "(", "'to'", ")", ")", ")", ")", ":", "return", "self", ".", "send_presence", "(", "elem", ")", "self", ".", "recv_presence", "(", "elem", ")", "def", "send_presence", "(", "self", ",", "elem", ")", ":", "Log", ".", "warn", "(", "(", "'send_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "direct", "=", "elem", ".", "get", "(", "'to'", ")", "if", "(", "not", "direct", ")", ":", "self", ".", "rosters", ".", "broadcast", "(", "self", ",", "elem", ")", "if", "(", "elem", ".", "get", "(", "'type'", ")", "!=", "'probe'", ")", ":", "self", ".", "recv_presence", "(", "elem", ")", "if", "(", "not", "self", ".", "probed", ")", ":", "self", ".", "probed", "=", "True", "self", ".", "rosters", ".", "probe", "(", "self", ")", "elif", "(", "not", "self", ".", "rosters", ".", "send", "(", "self", ",", "direct", ",", "elem", ")", ")", ":", "self", ".", "send", "(", "direct", ",", "elem", ")", "def", "recv_presence", "(", "self", ",", "elem", ")", ":", "Log", ".", "warn", "(", "(", "'recv_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "if", "(", "not", "self", ".", "rosters", ".", "recv", "(", "self", ",", "elem", ")", ")", ":", "Log", ".", "warn", "(", "'\\tsending it to client'", ")", "self", ".", "write", "(", "elem", ")", "@", "xmpp", ".", "iq", "(", "'{jabber:iq:roster}query'", ")", "def", "roster", "(", "self", ",", "iq", ")", ":", "\"A roster is this account's list of contacts; it may be\\n        fetched or updated.\"", "roster", "=", "self", ".", "rosters", ".", "get", "(", "self", ")", "method", "=", "getattr", "(", "self", ",", "(", "'%s_roster'", "%", "iq", ".", "get", "(", "'type'", ")", ")", ")", "return", "(", "method", "and", "method", "(", "iq", ",", "roster", ")", ")", "def", "get_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "'jabber:iq:roster'", "}", ")", "for", "item", "in", "roster", ".", "items", "(", ")", ":", "query", ".", "append", "(", "item", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ")", "def", "set_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "xmlns", "=", "'jabber:iq:roster'", ")", "for", "item", "in", "iq", "[", "0", "]", ":", "result", "=", "roster", ".", "set", "(", "item", ")", "if", "(", "result", "is not", "None", ")", ":", "query", ".", "append", "(", "result", ")", "if", "(", "len", "(", "query", ")", ">", "0", ")", ":", "self", ".", "push", "(", "roster", ",", "query", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "def", "push", "(", "self", ",", "roster", ",", "query", ")", ":", "'Push roster changes to all clients that have requested this\\n        roster.'", "for", "jid", "in", "roster", ".", "requests", "(", ")", ":", "for", "(", "to", ",", "route", ")", "in", "self", ".", "routes", "(", "jid", ")", ":", "route", ".", "iq", "(", "'set'", ",", "self", ".", "ignore", ",", "query", ")", "def", "ignore", "(", "self", ",", "iq", ")", ":", "'An IQ no-op.'", "@", "xmpp", ".", "iq", "(", "'{vcard-temp}vCard'", ")", "def", "vcard", "(", "self", ",", "iq", ")", ":", "'vCard support: the client requests its vCard after\\n        establishing a session.'", "if", "(", "iq", ".", "get", "(", "'type'", ")", "==", "'get'", ")", ":", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "target", "=", "iq", ".", "get", "(", "'from'", ")", "else", ":", "target", "=", "iq", ".", "get", "(", "'to'", ")", "form_target", "=", "UCache", ".", "UCache", ".", "formalize_jid", "(", "target", ")", "name", "=", "form_target", ".", "partition", "(", "'@'", ")", "[", "0", "]", "user", "=", "UserManager", ".", "UserManager", ".", "LoadUser", "(", "name", ")", "info", "=", "user", ".", "GetInfo", "(", ")", "desc", "=", "(", "'\\r\\nLogins: %d\\r\\nPosts: %d\\r\\nLast login: %s from %s\\r\\nExperience: %d\\r\\nPerformance: %d\\r\\nLife: %d\\r\\n'", "%", "(", "info", "[", "'numlogins'", "]", ",", "info", "[", "'numposts'", "]", ",", "info", "[", "'lastlogintime'", "]", ",", "info", "[", "'lasthost'", "]", ",", "info", "[", "'exp'", "]", ",", "info", "[", "'perf'", "]", ",", "info", "[", "'life'", "]", ")", ")", "if", "(", "'plan'", "in", "info", ")", ":", "desc", "+", "=", "(", "'Plan:\\r%s'", "%", "info", "[", "'plan'", "]", ".", "replace", "(", "'\\n'", ",", "'\\r\\n'", ")", ")", "vcard", "=", "self", ".", "E", ".", "vCard", "(", "{", "'xmlns'", ":", "'vcard-temp'", "}", ",", "self", ".", "E", "(", "'FN'", ",", "name", ")", ",", "self", ".", "E", "(", "'NICKNAME'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "info", "[", "'nick'", "]", ")", ")", ",", "self", ".", "E", "(", "'DESC'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "desc", ")", ")", ")", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ")", "else", ":", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ",", "{", "'from'", ":", "iq", ".", "get", "(", "'to'", ")", "}", ")", "@", "xmpp", ".", "iq", "(", "(", "'{%s}query'", "%", "__disco_info_ns__", ")", ")", "def", "disco_info", "(", "self", ",", "iq", ")", ":", "' Service Discovery: disco#info '", "target", "=", "iq", ".", "get", "(", "'to'", ")", "if", "(", "target", ".", "find", "(", "'@'", ")", "<", "0", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":", "'server'", ",", "'type'", ":", "'im'", ",", "'name'", ":", "Config", ".", "Config", ".", "GetString", "(", "'XMPP_SERVER_IDENTITY_NAME'", ",", "'BBS'", ")", "}", ")", ")", "features", "=", "[", "__disco_info_ns__", ",", "__disco_items_ns__", ",", "__vcard_ns__", "]", "for", "feature", "in", "features", ":", "query", ".", "append", "(", "self", ".", "E", ".", "feature", "(", "{", "'var'", ":", "feature", "}", ")", ")", "else", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":"], 500]
[["not", "self", ".", "authJID", ".", "match_bare", "(", "elem", ".", "get", "(", "'to'", ")", ")", ")", ")", ":", "return", "self", ".", "send_presence", "(", "elem", ")", "self", ".", "recv_presence", "(", "elem", ")", "def", "send_presence", "(", "self", ",", "elem", ")", ":", "Log", ".", "warn", "(", "(", "'send_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "direct", "=", "elem", ".", "get", "(", "'to'", ")", "if", "(", "not", "direct", ")", ":", "self", ".", "rosters", ".", "broadcast", "(", "self", ",", "elem", ")", "if", "(", "elem", ".", "get", "(", "'type'", ")", "!=", "'probe'", ")", ":", "self", ".", "recv_presence", "(", "elem", ")", "if", "(", "not", "self", ".", "probed", ")", ":", "self", ".", "probed", "=", "True", "self", ".", "rosters", ".", "probe", "(", "self", ")", "elif", "(", "not", "self", ".", "rosters", ".", "send", "(", "self", ",", "direct", ",", "elem", ")", ")", ":", "self", ".", "send", "(", "direct", ",", "elem", ")", "def", "recv_presence", "(", "self", ",", "elem", ")", ":", "Log", ".", "warn", "(", "(", "'recv_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "if", "(", "not", "self", ".", "rosters", ".", "recv", "(", "self", ",", "elem", ")", ")", ":", "Log", ".", "warn", "(", "'\\tsending it to client'", ")", "self", ".", "write", "(", "elem", ")", "@", "xmpp", ".", "iq", "(", "'{jabber:iq:roster}query'", ")", "def", "roster", "(", "self", ",", "iq", ")", ":", "\"A roster is this account's list of contacts; it may be\\n        fetched or updated.\"", "roster", "=", "self", ".", "rosters", ".", "get", "(", "self", ")", "method", "=", "getattr", "(", "self", ",", "(", "'%s_roster'", "%", "iq", ".", "get", "(", "'type'", ")", ")", ")", "return", "(", "method", "and", "method", "(", "iq", ",", "roster", ")", ")", "def", "get_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "'jabber:iq:roster'", "}", ")", "for", "item", "in", "roster", ".", "items", "(", ")", ":", "query", ".", "append", "(", "item", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ")", "def", "set_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "xmlns", "=", "'jabber:iq:roster'", ")", "for", "item", "in", "iq", "[", "0", "]", ":", "result", "=", "roster", ".", "set", "(", "item", ")", "if", "(", "result", "is not", "None", ")", ":", "query", ".", "append", "(", "result", ")", "if", "(", "len", "(", "query", ")", ">", "0", ")", ":", "self", ".", "push", "(", "roster", ",", "query", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "def", "push", "(", "self", ",", "roster", ",", "query", ")", ":", "'Push roster changes to all clients that have requested this\\n        roster.'", "for", "jid", "in", "roster", ".", "requests", "(", ")", ":", "for", "(", "to", ",", "route", ")", "in", "self", ".", "routes", "(", "jid", ")", ":", "route", ".", "iq", "(", "'set'", ",", "self", ".", "ignore", ",", "query", ")", "def", "ignore", "(", "self", ",", "iq", ")", ":", "'An IQ no-op.'", "@", "xmpp", ".", "iq", "(", "'{vcard-temp}vCard'", ")", "def", "vcard", "(", "self", ",", "iq", ")", ":", "'vCard support: the client requests its vCard after\\n        establishing a session.'", "if", "(", "iq", ".", "get", "(", "'type'", ")", "==", "'get'", ")", ":", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "target", "=", "iq", ".", "get", "(", "'from'", ")", "else", ":", "target", "=", "iq", ".", "get", "(", "'to'", ")", "form_target", "=", "UCache", ".", "UCache", ".", "formalize_jid", "(", "target", ")", "name", "=", "form_target", ".", "partition", "(", "'@'", ")", "[", "0", "]", "user", "=", "UserManager", ".", "UserManager", ".", "LoadUser", "(", "name", ")", "info", "=", "user", ".", "GetInfo", "(", ")", "desc", "=", "(", "'\\r\\nLogins: %d\\r\\nPosts: %d\\r\\nLast login: %s from %s\\r\\nExperience: %d\\r\\nPerformance: %d\\r\\nLife: %d\\r\\n'", "%", "(", "info", "[", "'numlogins'", "]", ",", "info", "[", "'numposts'", "]", ",", "info", "[", "'lastlogintime'", "]", ",", "info", "[", "'lasthost'", "]", ",", "info", "[", "'exp'", "]", ",", "info", "[", "'perf'", "]", ",", "info", "[", "'life'", "]", ")", ")", "if", "(", "'plan'", "in", "info", ")", ":", "desc", "+", "=", "(", "'Plan:\\r%s'", "%", "info", "[", "'plan'", "]", ".", "replace", "(", "'\\n'", ",", "'\\r\\n'", ")", ")", "vcard", "=", "self", ".", "E", ".", "vCard", "(", "{", "'xmlns'", ":", "'vcard-temp'", "}", ",", "self", ".", "E", "(", "'FN'", ",", "name", ")", ",", "self", ".", "E", "(", "'NICKNAME'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "info", "[", "'nick'", "]", ")", ")", ",", "self", ".", "E", "(", "'DESC'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "desc", ")", ")", ")", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ")", "else", ":", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ",", "{", "'from'", ":", "iq", ".", "get", "(", "'to'", ")", "}", ")", "@", "xmpp", ".", "iq", "(", "(", "'{%s}query'", "%", "__disco_info_ns__", ")", ")", "def", "disco_info", "(", "self", ",", "iq", ")", ":", "' Service Discovery: disco#info '", "target", "=", "iq", ".", "get", "(", "'to'", ")", "if", "(", "target", ".", "find", "(", "'@'", ")", "<", "0", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":", "'server'", ",", "'type'", ":", "'im'", ",", "'name'", ":", "Config", ".", "Config", ".", "GetString", "(", "'XMPP_SERVER_IDENTITY_NAME'", ",", "'BBS'", ")", "}", ")", ")", "features", "=", "[", "__disco_info_ns__", ",", "__disco_items_ns__", ",", "__vcard_ns__", "]", "for", "feature", "in", "features", ":", "query", ".", "append", "(", "self", ".", "E", ".", "feature", "(", "{", "'var'", ":", "feature", "}", ")", ")", "else", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":", "'client'", ",", "'type'", ":", "'term'", ",", "'name'", ":", "Config", ".", "Config", ".", "GetString", "(", "'XMPP_SERVER_IDENTITY_NAME'", ",", "'BBS'", ")", "}", ")", ")", "features", "=", "[", "__disco_info_ns__", ",", "__disco_items_ns__", ",", "__vcard_ns__", "]", "for", "feature", "in", "features", ":", "query", ".", "append", "(", "self", ".", "E", ".", "feature", "(", "{", "'var'", ":", "feature", "}", ")", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ",", "{", "'from'", ":", "target", "}", ")", "@", "xmpp", ".", "iq", "(", "(", "'{%s}query'", "%", "__disco_items_ns__", ")", ")", "def", "disco_items", "(", "self", ",", "iq", ")", ":", "' Service Discovery: disco#items '", "target", "=", "iq", ".", "get", "(", "'to'", ")", "if", "(", "target", ".", "find", "(", "'@'", ")", "<", "0", ")", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_items_ns__", "}", ")", "else", ":", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_items_ns__", "}", ")", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ",", "{", "'from'", ":", "target", "}", ")"], 844]
[["from", "__future__", "import", "print_function", "from", "__future__", "import", "unicode_literals", "from", "__future__", "import", "division", "from", "__future__", "import", "absolute_import", "from", "builtins", "import", "range", "from", "future", "import", "standard_library", "standard_library", ".", "install_aliases", "(", ")", "import", "sys", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "if", "PY2", ":", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "import", "hpOneView", "as", "hpov", "from", "pprint", "import", "pprint", "import", "json", "from", "hpOneView.common", "import", "uri", "import", "hpOneView.profile", "as", "profile", "def", "acceptEULA", "(", "con", ")", ":", "con", ".", "get_eula_status", "(", ")", "try", ":", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "print", "(", "'EULA display needed'", ")", "con", ".", "set_eula", "(", "'no'", ")", "except", "Exception", "as", "e", ":", "print", "(", "'EXCEPTION:'", ")", "print", "(", "e", ")", "def", "login", "(", "con", ",", "credential", ")", ":", "try", ":", "con", ".", "login", "(", "credential", ")", "except", ":", "print", "(", "'Login failed'", ")", "def", "get_eg_uri_from_arg", "(", "srv", ",", "name", ")", ":", "if", "(", "srv", "and", "name", ")", ":", "if", "(", "name", ".", "startswith", "(", "'/rest'", ")", "and", "(", "uri", "[", "'enclosureGroups'", "]", "in", "name", ")", ")", ":", "return", "name", "else", ":", "egs", "=", "srv", ".", "get_enclosure_groups", "(", ")", "for", "eg", "in", "egs", ":", "if", "(", "eg", "[", "'name'", "]", "==", "name", ")", ":", "return", "eg", "[", "'uri'", "]", "return", "None", "def", "get_sht_from_arg", "(", "srv", ",", "name", ")", ":", "if", "(", "srv", "and", "name", ")", ":", "if", "(", "name", ".", "startswith", "(", "'/rest'", ")", "and", "(", "uri", "[", "'server-hardware-types'", "]", "in", "name", ")", ")", ":", "return", "name", "else", ":", "shts", "=", "srv", ".", "get_server_hardware_types", "(", ")", "for", "sht", "in", "shts", ":", "if", "(", "sht", "[", "'name'", "]", "==", "name", ")", ":", "return", "sht", "return", "None", "def", "define_profile_template", "(", "srv", ",", "name", ",", "desc", ",", "sp_desc", ",", "server_hwt", ",", "enc_group", ",", "affinity", ",", "hide_flexnics", ",", "conn_list", ",", "fw_settings", ",", "boot", ",", "bootmode", ")", ":", "if", "conn_list", ":", "conn", "=", "json", ".", "loads", "(", "open", "(", "conn_list", ")", ".", "read", "(", ")", ")", "else", ":", "conn", "=", "[", "]", "profile_template", "=", "srv", ".", "create_server_profile_template", "(", "name", "=", "name", ",", "description", "=", "desc", ",", "serverProfileDescription", "=", "sp_desc", ",", "serverHardwareTypeUri", "=", "server_hwt", ",", "enclosureGroupUri", "=", "enc_group", ",", "affinity", "=", "affinity", ",", "hideUnusedFlexNics", "=", "hide_flexnics", ",", "profileConnectionV4", "=", "conn", ",", "firmwareSettingsV3", "=", "fw_settings", ",", "bootSettings", "=", "boot", ",", "bootModeSetting", "=", "bootmode", ")", "if", "(", "'serialNumberType'", "in", "profile_template", ")", ":", "print", "(", "'\\n\\nName:                '", ",", "profile_template", "[", "'name'", "]", ")", "print", "(", "'Type:                '", ",", "profile_template", "[", "'type'", "]", ")", "print", "(", "'Description:         '", ",", "profile_template", "[", "'description'", "]", ")", "print", "(", "'serialNumberType:    '", ",", "profile_template", "[", "'serialNumberType'", "]", ")", "print", "(", "'Connections:'", ")", "for", "connection", "in", "profile_template", "[", "'connections'", "]", ":", "print", "(", "'  name:          '", ",", "connection", "[", "'name'", "]", ")", "print", "(", "'  functionType:  '", ",", "connection", "[", "'functionType'", "]", ")", "print", "(", "'  networkUri:    '", ",", "connection", "[", "'networkUri'", "]", ")", "print", "(", "'Firmware:'", ")", "print", "(", "'  manageFirmware:       '", ",", "profile_template", "[", "'firmware'", "]", "[", "'manageFirmware'", "]", ")", "print", "(", "'  forceInstallFirmware: '", ",", "profile_template", "[", "'firmware'", "]", "[", "'forceInstallFirmware'", "]", ")", "print", "(", "'  firmwareBaselineUri:  '", ",", "profile_template", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", ")", "print", "(", "'Bios:'", ")", "print", "(", "'  manageBios:         '", ",", "profile_template", "[", "'bios'", "]", "[", "'manageBios'", "]", ")", "print", "(", "'  overriddenSettings: '", ",", "profile_template", "[", "'bios'", "]", "[", "'overriddenSettings'", "]", ")", "print", "(", "'Boot:'", ")", "print", "(", "'  manageBoot:         '", ",", "profile_template", "[", "'boot'", "]", "[", "'manageBoot'", "]", ")", "print", "(", "'  order:              '", ",", "profile_template", "[", "'boot'", "]", "[", "'order'", "]", ",", "'\\n'", ")", "else", ":", "pprint", "(", "profile_template", ")", "def", "main", "(", ")", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "'\\n    Define a server profile template'", ")", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Appliance hostname or IP address'", ")", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "'Administrator'", ",", "help", "=", "'\\n    HP OneView Username'", ")", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Password'", ")", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Proxy (host:port format'", ")", "parser", ".", "add_argument", "(", "'-n'", ",", "dest", "=", "'name'", ",", "required", "=", "True", ",", "help", "=", "'\\n    Name of the profile template'", ")", "parser", ".", "add_argument", "(", "'-d'", ",", "dest", "=", "'desc'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Description for the server profile template'", ")", "parser", ".", "add_argument", "(", "'-spd'", ",", "dest", "=", "'sp_desc'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Server profile description'", ")", "parser", ".", "add_argument", "(", "'-sht'", ",", "dest", "=", "'server_hwt'", ",", "required", "=", "True", ",", "help", "=", "'\\n    Server hardware type is required for defining an unassigned profile. Note\\n    the Server Hardware Type must be present in the HP OneView appliance\\n    before it can be used. For example, a single server with the specific server\\n    hardware type must have been added to OneView for that hardware type to\\n    be used. The example script get-server-hardware-types.py with the -l\\n    argument can be used to get a list of server hardware types that have\\n    been imported into the OneView appliance'", ")", "parser", ".", "add_argument", "(", "'-eg'", ",", "dest", "=", "'enc_group'", ",", "required", "=", "True", ",", "help", "=", "'\\n    Identifies the enclosure group for which the Server Profile Template\\n    was designed. The enclosureGroupUri is determined when the profile\\n    template is created and cannot be modified\\n                        '", ")", "parser", ".", "add_argument", "(", "'-af'", ",", "dest", "=", "'affinity'", ",", "required", "=", "False", ",", "choices", "=", "[", "'Bay'", ",", "'BayAndServer'", "]", ",", "default", "=", "'Bay'", ",", "help", "=", "'\\n    This identifies the behavior of the server profile when the server\\n    hardware is removed or replaced.\\n\\n        . Bay:  This profile remains with the device bay when the server\\n                hardware is removed or replaced.\\n\\n        . BayAndServer This profile is pinned to both the device bay and\\n          specific server hardware.'", ")", "parser", ".", "add_argument", "(", "'-hn'", ",", "dest", "=", "'hide_flexnics'", ",", "required", "=", "False", ",", "choices", "=", "[", "'true'", ",", "'false'", "]", ",", "help", "=", "\"\\n    This setting controls the enumeration of physical functions that do not\\n    correspond to connections in a profile. Using this flag will SHOW unused\\n    FlexNICs to the Operating System. Changing this setting may alter the order\\n    of network interfaces in the Operating System. This option sets the 'Hide\\n    Unused FlexNICs' to disabled, eight FlexNICs will be enumerated in the\\n    Operating System as network interfaces for each Flex-10 or FlexFabric\\n    adapter.  Configuring Fibre Channel connections on a FlexFabric adapter may\\n    enumerate two storage interfaces, reducing the number of network interfaces\\n    to six. The default (this option is not selected) enables 'Hide Unused\\n    FlexNICs' and may suppress enumeration of FlexNICs that do not correspond\\n    to profile connections. FlexNICs are hidden in pairs, starting with the 4th\\n    pair. For instance, if the 4th FlexNIC on either physical port corresponds\\n    to a profile connection, all eight physical functions are enumerated. If a\\n    profile connection corresponds to the 2nd FlexNIC on either physical port,\\n    but no connection corresponds to the 3rd or 4th FlexNIC on either physical\\n    port, only the 1st and 2nd physical functions are enumerated in the\\n    Operating System.\"", ")", "parser", ".", "add_argument", "(", "'-cl'", ",", "dest", "=", "'conn_list'", ",", "required", "=", "False", ",", "help", "=", "'\\n    File with list of connections for this profile in JSON format. This file\\n    can be created with multiple calls to define-connection-list.py'", ")", "parser", ".", "add_argument", "(", "'-fw'", ",", "dest", "=", "'baseline'", ",", "required", "=", "False", ",", "help", "=", "'\\n    SPP Baseline file name. e.g. SPP2013090_2013_0830_30.iso'", ")", "parser", ".", "add_argument", "(", "'-mb'", ",", "dest", "=", "'disable_manage_boot'", ",", "action", "=", "'store_true'", ",", "help", "=", "'\\n    Explicitly DISABLE Boot Order Management. This value is enabled by\\n    default and required for Connection boot enablement. If this option is\\n    disabled, then  PXE and FC BfS settings are disabled within the entire\\n    Server Profile.'", ")", "parser", ".", "add_argument", "(", "'-bo'", ",", "dest", "=", "'boot_order'", ",", "required", "=", "False", ",", "nargs", "=", "'+'", ",", "help", "=", "\"\\n    Defines the order in which boot will be attempted on the available\\n    devices. Please NOTE the supported boot order is server hardware type\\n    specific. For Gen7 and Gen8 server hardware the possible values are 'CD',\\n    'Floppy', 'USB', 'HardDisk', and 'PXE'. For Gen9 BL server hardware in\\n    Legacy BIOS boot mode, the possible values are 'CD', 'USB', 'HardDisk',\\n    and 'PXE'. For Gen9 BL server hardware in UEFI or UEFI Optimized boot\\n    mode, only one value is allowed and must be either 'HardDisk' or 'PXE'.\\n    For Gen9 DL server hardware in Legacy BIOS boot mode, the possible\\n    values are 'CD', 'USB', 'HardDisk', and 'PXE'. For Gen9 DL server\\n    hardware in UEFI or UEFI Optimized boot mode, boot order configuration\\n    is not supported.\\n\\n    Server boot order defined as a list separated by spaces. For example:\\n\\n    Gen7/8 BIOS Default Boot Order:\\n                            -bo CD Floppy USB HardDisk PXE\\n    Gen9 Legacy BIOS Boot Order:\\n                            -bo CD USB HardDisk PXE\\n    Gen9 UEFI Default Boot Order:\\n                            -bo HardDisk\\n    \"", ")", "parser", ".", "add_argument", "(", "'-bm'", ",", "dest", "=", "'boot_mode'", ",", "required", "=", "False", ",", "choices", "=", "[", "'UEFI'", ",", "'UEFIOptimized'", ",", "'BIOS'", "]", ",", "default", "=", "'BIOS'", ",", "help", "=", "'\\n    Specify the Gen9 Boot Environment.\\n\\n    Sets the boot mode as one of the following:\\n\\n        . UEFI\\n        . UEFIOptimized\\n        . BIOS\\n\\n    If you select UEFI or UEFI optimized for an HP ProLiant DL Gen9 rack\\n    mount server, the remaining boot setting available is the PXE boot policy.\\n\\n    For the UEFI or UEFI optimized boot mode options, the boot mode choice\\n    should be based on the expected OS and required boot features for the\\n    server hardware. UEFI optimized boot mode reduces the time the system\\n    spends in POST(Video driver initialization). In order to select the\\n    appropriate boot mode, consider the following:\\n\\n        . If a secure boot is required, the boot mode must be set to UEFI\\n          or UEFI optimized .\\n        . For operating systems that do not support UEFI (such as DOS, or\\n          older versions of Windows and Linux), the boot mode must be set\\n          to BIOS.\\n        . When booting in UEFI mode, Windows 7, Server 2008, or 2008 R2\\n          should not be set to UEFIOptimized.'", ")", "parser", ".", "add_argument", "(", "'-px'", ",", "dest", "=", "'pxe'", ",", "required", "=", "False", ",", "choices", "=", "[", "'Auto'", ",", "'IPv4'", ",", "'IPv6'", ",", "'IPv4ThenIPv6'", ",", "'IPv6ThenIPv4'", "]", ",", "default", "=", "'IPv4'", ",", "help", "="], 0]
[["eg", "[", "'name'", "]", "==", "name", ")", ":", "return", "eg", "[", "'uri'", "]", "return", "None", "def", "get_sht_from_arg", "(", "srv", ",", "name", ")", ":", "if", "(", "srv", "and", "name", ")", ":", "if", "(", "name", ".", "startswith", "(", "'/rest'", ")", "and", "(", "uri", "[", "'server-hardware-types'", "]", "in", "name", ")", ")", ":", "return", "name", "else", ":", "shts", "=", "srv", ".", "get_server_hardware_types", "(", ")", "for", "sht", "in", "shts", ":", "if", "(", "sht", "[", "'name'", "]", "==", "name", ")", ":", "return", "sht", "return", "None", "def", "define_profile_template", "(", "srv", ",", "name", ",", "desc", ",", "sp_desc", ",", "server_hwt", ",", "enc_group", ",", "affinity", ",", "hide_flexnics", ",", "conn_list", ",", "fw_settings", ",", "boot", ",", "bootmode", ")", ":", "if", "conn_list", ":", "conn", "=", "json", ".", "loads", "(", "open", "(", "conn_list", ")", ".", "read", "(", ")", ")", "else", ":", "conn", "=", "[", "]", "profile_template", "=", "srv", ".", "create_server_profile_template", "(", "name", "=", "name", ",", "description", "=", "desc", ",", "serverProfileDescription", "=", "sp_desc", ",", "serverHardwareTypeUri", "=", "server_hwt", ",", "enclosureGroupUri", "=", "enc_group", ",", "affinity", "=", "affinity", ",", "hideUnusedFlexNics", "=", "hide_flexnics", ",", "profileConnectionV4", "=", "conn", ",", "firmwareSettingsV3", "=", "fw_settings", ",", "bootSettings", "=", "boot", ",", "bootModeSetting", "=", "bootmode", ")", "if", "(", "'serialNumberType'", "in", "profile_template", ")", ":", "print", "(", "'\\n\\nName:                '", ",", "profile_template", "[", "'name'", "]", ")", "print", "(", "'Type:                '", ",", "profile_template", "[", "'type'", "]", ")", "print", "(", "'Description:         '", ",", "profile_template", "[", "'description'", "]", ")", "print", "(", "'serialNumberType:    '", ",", "profile_template", "[", "'serialNumberType'", "]", ")", "print", "(", "'Connections:'", ")", "for", "connection", "in", "profile_template", "[", "'connections'", "]", ":", "print", "(", "'  name:          '", ",", "connection", "[", "'name'", "]", ")", "print", "(", "'  functionType:  '", ",", "connection", "[", "'functionType'", "]", ")", "print", "(", "'  networkUri:    '", ",", "connection", "[", "'networkUri'", "]", ")", "print", "(", "'Firmware:'", ")", "print", "(", "'  manageFirmware:       '", ",", "profile_template", "[", "'firmware'", "]", "[", "'manageFirmware'", "]", ")", "print", "(", "'  forceInstallFirmware: '", ",", "profile_template", "[", "'firmware'", "]", "[", "'forceInstallFirmware'", "]", ")", "print", "(", "'  firmwareBaselineUri:  '", ",", "profile_template", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", ")", "print", "(", "'Bios:'", ")", "print", "(", "'  manageBios:         '", ",", "profile_template", "[", "'bios'", "]", "[", "'manageBios'", "]", ")", "print", "(", "'  overriddenSettings: '", ",", "profile_template", "[", "'bios'", "]", "[", "'overriddenSettings'", "]", ")", "print", "(", "'Boot:'", ")", "print", "(", "'  manageBoot:         '", ",", "profile_template", "[", "'boot'", "]", "[", "'manageBoot'", "]", ")", "print", "(", "'  order:              '", ",", "profile_template", "[", "'boot'", "]", "[", "'order'", "]", ",", "'\\n'", ")", "else", ":", "pprint", "(", "profile_template", ")", "def", "main", "(", ")", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "'\\n    Define a server profile template'", ")", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Appliance hostname or IP address'", ")", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "'Administrator'", ",", "help", "=", "'\\n    HP OneView Username'", ")", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Password'", ")", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Proxy (host:port format'", ")", "parser", ".", "add_argument", "(", "'-n'", ",", "dest", "=", "'name'", ",", "required", "=", "True", ",", "help", "=", "'\\n    Name of the profile template'", ")", "parser", ".", "add_argument", "(", "'-d'", ",", "dest", "=", "'desc'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Description for the server profile template'", ")", "parser", ".", "add_argument", "(", "'-spd'", ",", "dest", "=", "'sp_desc'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Server profile description'", ")", "parser", ".", "add_argument", "(", "'-sht'", ",", "dest", "=", "'server_hwt'", ",", "required", "=", "True", ",", "help", "=", "'\\n    Server hardware type is required for defining an unassigned profile. Note\\n    the Server Hardware Type must be present in the HP OneView appliance\\n    before it can be used. For example, a single server with the specific server\\n    hardware type must have been added to OneView for that hardware type to\\n    be used. The example script get-server-hardware-types.py with the -l\\n    argument can be used to get a list of server hardware types that have\\n    been imported into the OneView appliance'", ")", "parser", ".", "add_argument", "(", "'-eg'", ",", "dest", "=", "'enc_group'", ",", "required", "=", "True", ",", "help", "=", "'\\n    Identifies the enclosure group for which the Server Profile Template\\n    was designed. The enclosureGroupUri is determined when the profile\\n    template is created and cannot be modified\\n                        '", ")", "parser", ".", "add_argument", "(", "'-af'", ",", "dest", "=", "'affinity'", ",", "required", "=", "False", ",", "choices", "=", "[", "'Bay'", ",", "'BayAndServer'", "]", ",", "default", "=", "'Bay'", ",", "help", "=", "'\\n    This identifies the behavior of the server profile when the server\\n    hardware is removed or replaced.\\n\\n        . Bay:  This profile remains with the device bay when the server\\n                hardware is removed or replaced.\\n\\n        . BayAndServer This profile is pinned to both the device bay and\\n          specific server hardware.'", ")", "parser", ".", "add_argument", "(", "'-hn'", ",", "dest", "=", "'hide_flexnics'", ",", "required", "=", "False", ",", "choices", "=", "[", "'true'", ",", "'false'", "]", ",", "help", "=", "\"\\n    This setting controls the enumeration of physical functions that do not\\n    correspond to connections in a profile. Using this flag will SHOW unused\\n    FlexNICs to the Operating System. Changing this setting may alter the order\\n    of network interfaces in the Operating System. This option sets the 'Hide\\n    Unused FlexNICs' to disabled, eight FlexNICs will be enumerated in the\\n    Operating System as network interfaces for each Flex-10 or FlexFabric\\n    adapter.  Configuring Fibre Channel connections on a FlexFabric adapter may\\n    enumerate two storage interfaces, reducing the number of network interfaces\\n    to six. The default (this option is not selected) enables 'Hide Unused\\n    FlexNICs' and may suppress enumeration of FlexNICs that do not correspond\\n    to profile connections. FlexNICs are hidden in pairs, starting with the 4th\\n    pair. For instance, if the 4th FlexNIC on either physical port corresponds\\n    to a profile connection, all eight physical functions are enumerated. If a\\n    profile connection corresponds to the 2nd FlexNIC on either physical port,\\n    but no connection corresponds to the 3rd or 4th FlexNIC on either physical\\n    port, only the 1st and 2nd physical functions are enumerated in the\\n    Operating System.\"", ")", "parser", ".", "add_argument", "(", "'-cl'", ",", "dest", "=", "'conn_list'", ",", "required", "=", "False", ",", "help", "=", "'\\n    File with list of connections for this profile in JSON format. This file\\n    can be created with multiple calls to define-connection-list.py'", ")", "parser", ".", "add_argument", "(", "'-fw'", ",", "dest", "=", "'baseline'", ",", "required", "=", "False", ",", "help", "=", "'\\n    SPP Baseline file name. e.g. SPP2013090_2013_0830_30.iso'", ")", "parser", ".", "add_argument", "(", "'-mb'", ",", "dest", "=", "'disable_manage_boot'", ",", "action", "=", "'store_true'", ",", "help", "=", "'\\n    Explicitly DISABLE Boot Order Management. This value is enabled by\\n    default and required for Connection boot enablement. If this option is\\n    disabled, then  PXE and FC BfS settings are disabled within the entire\\n    Server Profile.'", ")", "parser", ".", "add_argument", "(", "'-bo'", ",", "dest", "=", "'boot_order'", ",", "required", "=", "False", ",", "nargs", "=", "'+'", ",", "help", "=", "\"\\n    Defines the order in which boot will be attempted on the available\\n    devices. Please NOTE the supported boot order is server hardware type\\n    specific. For Gen7 and Gen8 server hardware the possible values are 'CD',\\n    'Floppy', 'USB', 'HardDisk', and 'PXE'. For Gen9 BL server hardware in\\n    Legacy BIOS boot mode, the possible values are 'CD', 'USB', 'HardDisk',\\n    and 'PXE'. For Gen9 BL server hardware in UEFI or UEFI Optimized boot\\n    mode, only one value is allowed and must be either 'HardDisk' or 'PXE'.\\n    For Gen9 DL server hardware in Legacy BIOS boot mode, the possible\\n    values are 'CD', 'USB', 'HardDisk', and 'PXE'. For Gen9 DL server\\n    hardware in UEFI or UEFI Optimized boot mode, boot order configuration\\n    is not supported.\\n\\n    Server boot order defined as a list separated by spaces. For example:\\n\\n    Gen7/8 BIOS Default Boot Order:\\n                            -bo CD Floppy USB HardDisk PXE\\n    Gen9 Legacy BIOS Boot Order:\\n                            -bo CD USB HardDisk PXE\\n    Gen9 UEFI Default Boot Order:\\n                            -bo HardDisk\\n    \"", ")", "parser", ".", "add_argument", "(", "'-bm'", ",", "dest", "=", "'boot_mode'", ",", "required", "=", "False", ",", "choices", "=", "[", "'UEFI'", ",", "'UEFIOptimized'", ",", "'BIOS'", "]", ",", "default", "=", "'BIOS'", ",", "help", "=", "'\\n    Specify the Gen9 Boot Environment.\\n\\n    Sets the boot mode as one of the following:\\n\\n        . UEFI\\n        . UEFIOptimized\\n        . BIOS\\n\\n    If you select UEFI or UEFI optimized for an HP ProLiant DL Gen9 rack\\n    mount server, the remaining boot setting available is the PXE boot policy.\\n\\n    For the UEFI or UEFI optimized boot mode options, the boot mode choice\\n    should be based on the expected OS and required boot features for the\\n    server hardware. UEFI optimized boot mode reduces the time the system\\n    spends in POST(Video driver initialization). In order to select the\\n    appropriate boot mode, consider the following:\\n\\n        . If a secure boot is required, the boot mode must be set to UEFI\\n          or UEFI optimized .\\n        . For operating systems that do not support UEFI (such as DOS, or\\n          older versions of Windows and Linux), the boot mode must be set\\n          to BIOS.\\n        . When booting in UEFI mode, Windows 7, Server 2008, or 2008 R2\\n          should not be set to UEFIOptimized.'", ")", "parser", ".", "add_argument", "(", "'-px'", ",", "dest", "=", "'pxe'", ",", "required", "=", "False", ",", "choices", "=", "[", "'Auto'", ",", "'IPv4'", ",", "'IPv6'", ",", "'IPv4ThenIPv6'", ",", "'IPv6ThenIPv4'", "]", ",", "default", "=", "'IPv4'", ",", "help", "=", "\"\\n    Controls the ordering of the network modes available to the Flexible\\n    LOM (FLB); for example, IPv4 and IPv6.\\n\\n    Select from the following policies:\\n\\n        . Auto\\n        . IPv4 only\\n        . IPv6 only\\n        . IPv4 then IPv6\\n        . IPv6 then IPv4\\n\\n    Setting the policy to Auto means the order of the existing network boot\\n    targets in the UEFI Boot Order list will not be modified, and any new\\n    network boot targets will be added to the end of the list using the\\n    System ROM's default policy.\"", ")", "args", "=", "parser", ".", "parse_args", "(", ")", "credential", "=", "{", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "srv", "=", "hpov", ".", "servers", "(", "con", ")", "sts", "=", "hpov", ".", "settings", "(", "con", ")", "if", "args", ".", "proxy", ":", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "if", "args", ".", "cert", ":", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "login", "(", "con", ",", "credential", ")", "acceptEULA", "(", "con", ")", "eg_uri", "=", "get_eg_uri_from_arg", "(", "srv", ",", "args", ".", "enc_group", ")", "sht", "=", "get_sht_from_arg", "(", "srv", ",", "args", ".", "server_hwt", ")", "fw_settings", "=", "profile", ".", "make_firmware_dict", "(", "sts", ",", "args", ".", "baseline", ")", "(", "boot", ",", "bootmode", ")", "=", "profile", ".", "make_boot_settings_dict", "(", "srv", ",", "sht", ",", "args", ".", "disable_manage_boot", ",", "args", ".", "boot_order", ",", "args", ".", "boot_mode", ",", "args", ".", "pxe", ")", "define_profile_template", "(", "srv", ",", "args", ".", "name", ",", "args", ".", "desc", ",", "args", ".", "sp_desc", ",", "sht", "[", "'uri'", "]", ",", "eg_uri", ",", "args", ".", "affinity", ",", "args", ".", "hide_flexnics", ",", "args", ".", "conn_list", ",", "fw_settings", ",", "boot", ",", "bootmode", ")", "if", "(", "__name__", "==", "'__main__'", ")", ":", "import", "argparse", "sys", ".", "exit", "(", "main", "(", ")", ")"], 774]
[["from", "__future__", "import", "print_function", "from", "__future__", "import", "unicode_literals", "from", "__future__", "import", "division", "from", "__future__", "import", "absolute_import", "from", "builtins", "import", "range", "from", "future", "import", "standard_library", "standard_library", ".", "install_aliases", "(", ")", "import", "sys", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "if", "PY2", ":", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "import", "hpOneView", "as", "hpov", "from", "pprint", "import", "pprint", "def", "acceptEULA", "(", "con", ")", ":", "con", ".", "get_eula_status", "(", ")", "try", ":", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "print", "(", "'EULA display needed'", ")", "con", ".", "set_eula", "(", "'no'", ")", "except", "Exception", "as", "e", ":", "print", "(", "'EXCEPTION:'", ")", "print", "(", "e", ")", "def", "login", "(", "con", ",", "credential", ")", ":", "try", ":", "con", ".", "login", "(", "credential", ")", "except", ":", "print", "(", "'Login failed'", ")", "def", "get_address_pools", "(", "con", ",", "srv", ",", "types", ")", ":", "if", "(", "(", "types", "==", "'ALL'", ")", "or", "(", "types", "==", "'VMAC'", ")", ")", ":", "vmac", "=", "srv", ".", "get_vmac_pool", "(", ")", "print", "(", ")", "for", "key", "in", "sorted", "(", "vmac", ")", ":", "print", "(", "'{0:16} : {1:}'", ".", "format", "(", "key", ",", "vmac", "[", "key", "]", ")", ")", "if", "(", "'rangeUris'", "in", "vmac", ")", ":", "for", "uri", "in", "vmac", "[", "'rangeUris'", "]", ":", "ranges", "=", "con", ".", "get", "(", "uri", ")", "print", "(", "'startAddress     :'", ",", "ranges", "[", "'startAddress'", "]", ")", "print", "(", "'endAddress       :'", ",", "ranges", "[", "'endAddress'", "]", ")", "print", "(", "'totalCount       :'", ",", "ranges", "[", "'totalCount'", "]", ")", "if", "(", "(", "types", "==", "'ALL'", ")", "or", "(", "types", "==", "'VWWN'", ")", ")", ":", "vwwn", "=", "srv", ".", "get_vwwn_pool", "(", ")", "print", "(", ")", "for", "key", "in", "sorted", "(", "vwwn", ")", ":", "print", "(", "'{0:16} : {1:}'", ".", "format", "(", "key", ",", "vwwn", "[", "key", "]", ")", ")", "if", "(", "'rangeUris'", "in", "vwwn", ")", ":", "for", "uri", "in", "vwwn", "[", "'rangeUris'", "]", ":", "ranges", "=", "con", ".", "get", "(", "uri", ")", "print", "(", "'startAddress     :'", ",", "ranges", "[", "'startAddress'", "]", ")", "print", "(", "'endAddress       :'", ",", "ranges", "[", "'endAddress'", "]", ")", "print", "(", "'totalCount       :'", ",", "ranges", "[", "'totalCount'", "]", ")", "if", "(", "(", "types", "==", "'ALL'", ")", "or", "(", "types", "==", "'VSN'", ")", ")", ":", "vsn", "=", "srv", ".", "get_vsn_pool", "(", ")", "print", "(", ")", "for", "key", "in", "sorted", "(", "vsn", ")", ":", "print", "(", "'{0:16} : {1:}'", ".", "format", "(", "key", ",", "vsn", "[", "key", "]", ")", ")", "if", "(", "'rangeUris'", "in", "vsn", ")", ":", "for", "uri", "in", "vsn", "[", "'rangeUris'", "]", ":", "ranges", "=", "con", ".", "get", "(", "uri", ")", "print", "(", "'startAddress     :'", ",", "ranges", "[", "'startAddress'", "]", ")", "print", "(", "'endAddress       :'", ",", "ranges", "[", "'endAddress'", "]", ")", "print", "(", "'totalCount       :'", ",", "ranges", "[", "'totalCount'", "]", ")", "def", "main", "(", ")", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "'\\n    Display the avilable and configured Address Pools, and their associated\\n    Ranges from the appliance.  Currently, the appliance supports the\\n    following Address Pools:\\n\\n        - VMAC\\n        - VWWN\\n        - VSN\\n\\n    You can specify one or all of the Pool types.\\n\\n    Usage: '", ")", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Appliance hostname or IP address'", ")", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "'Administrator'", ",", "help", "=", "'\\n    HP OneView Username'", ")", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Password'", ")", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Proxy (host:port format'", ")", "parser", ".", "add_argument", "(", "'-j'", ",", "dest", "=", "'domain'", ",", "required", "=", "False", ",", "default", "=", "'Local'", ",", "help", "=", "'\\n    HP OneView Authorized Login Domain'", ")", "parser", ".", "add_argument", "(", "'-t'", ",", "dest", "=", "'types'", ",", "required", "=", "False", ",", "choices", "=", "[", "'VMAC'", ",", "'VWWN'", ",", "'VSN'", ",", "'ALL'", "]", ",", "default", "=", "'ALL'", ",", "help", "=", "'\\n    Address Pool type.  Accepted values are VMAC, VWWN, VSN, or All'", ")", "args", "=", "parser", ".", "parse_args", "(", ")", "credential", "=", "{", "'authLoginDomain'", ":", "args", ".", "domain", ".", "upper", "(", ")", ",", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "srv", "=", "hpov", ".", "servers", "(", "con", ")", "if", "args", ".", "proxy", ":", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "if", "args", ".", "cert", ":", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "login", "(", "con", ",", "credential", ")", "acceptEULA", "(", "con", ")", "get_address_pools", "(", "con", ",", "srv", ",", "args", ".", "types", ")", "if", "(", "__name__", "==", "'__main__'", ")", ":", "import", "sys", "import", "argparse", "sys", ".", "exit", "(", "main", "(", ")", ")"], 0]
[["from", "__future__", "import", "print_function", "from", "__future__", "import", "unicode_literals", "from", "__future__", "import", "division", "from", "__future__", "import", "absolute_import", "from", "builtins", "import", "range", "from", "future", "import", "standard_library", "standard_library", ".", "install_aliases", "(", ")", "import", "sys", "import", "re", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "if", "PY2", ":", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "import", "hpOneView", "as", "hpov", "from", "pprint", "import", "pprint", "def", "acceptEULA", "(", "con", ")", ":", "con", ".", "get_eula_status", "(", ")", "try", ":", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "print", "(", "'EULA display needed'", ")", "con", ".", "set_eula", "(", "'no'", ")", "except", "Exception", "as", "e", ":", "print", "(", "'EXCEPTION:'", ")", "print", "(", "e", ")", "def", "login", "(", "con", ",", "credential", ")", ":", "try", ":", "con", ".", "login", "(", "credential", ")", "except", ":", "print", "(", "'Login failed'", ")", "def", "get_managed_sans", "(", "fcs", ")", ":", "sans", "=", "fcs", ".", "get_managed_sans", "(", ")", "pprint", "(", "sans", ")", "def", "main", "(", ")", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "'\\n    Display or list the available Managed SAN resources in the appliance\\n\\n    Usage: '", ")", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Appliance hostname or IP address'", ")", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "'Administrator'", ",", "help", "=", "'\\n    HP OneView Username'", ")", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Password'", ")", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Proxy (host:port format'", ")", "parser", ".", "add_argument", "(", "'-j'", ",", "dest", "=", "'domain'", ",", "required", "=", "False", ",", "default", "=", "'Local'", ",", "help", "=", "'\\n    HP OneView Authorized Login Domain'", ")", "args", "=", "parser", ".", "parse_args", "(", ")", "credential", "=", "{", "'authLoginDomain'", ":", "args", ".", "domain", ".", "upper", "(", ")", ",", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "fcs", "=", "hpov", ".", "fcsans", "(", "con", ")", "if", "args", ".", "proxy", ":", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "if", "args", ".", "cert", ":", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "login", "(", "con", ",", "credential", ")", "acceptEULA", "(", "con", ")", "get_managed_sans", "(", "fcs", ")", "if", "(", "__name__", "==", "'__main__'", ")", ":", "import", "sys", "import", "argparse", "sys", ".", "exit", "(", "main", "(", ")", ")"], 0]
[["from", "__future__", "import", "print_function", "from", "__future__", "import", "unicode_literals", "from", "__future__", "import", "division", "from", "__future__", "import", "absolute_import", "from", "builtins", "import", "range", "from", "future", "import", "standard_library", "standard_library", ".", "install_aliases", "(", ")", "import", "sys", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "if", "PY2", ":", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "import", "hpOneView", "as", "hpov", "from", "pprint", "import", "pprint", "def", "acceptEULA", "(", "con", ")", ":", "con", ".", "get_eula_status", "(", ")", "try", ":", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "print", "(", "'EULA display needed'", ")", "con", ".", "set_eula", "(", "'no'", ")", "except", "Exception", "as", "e", ":", "print", "(", "'EXCEPTION:'", ")", "print", "(", "e", ")", "def", "login", "(", "con", ",", "credential", ")", ":", "try", ":", "con", ".", "login", "(", "credential", ")", "except", ":", "print", "(", "'Login failed'", ")", "def", "getpolicy", "(", "sts", ")", ":", "policy", "=", "sts", ".", "get_storage_vol_template_policy", "(", ")", "print", "(", "policy", "[", "'value'", "]", ")", "def", "main", "(", ")", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "'\\n    Display Storage Volume Templates\\n\\n    Usage: '", ")", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Appliance hostname or IP address'", ")", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "'Administrator'", ",", "help", "=", "'\\n    HP OneView Username'", ")", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "'\\n    HP OneView Password'", ")", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "'\\n    Proxy (host:port format'", ")", "parser", ".", "add_argument", "(", "'-j'", ",", "dest", "=", "'domain'", ",", "required", "=", "False", ",", "default", "=", "'Local'", ",", "help", "=", "'\\n    HP OneView Authorized Login Domain'", ")", "args", "=", "parser", ".", "parse_args", "(", ")", "credential", "=", "{", "'authLoginDomain'", ":", "args", ".", "domain", ".", "upper", "(", ")", ",", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "sts", "=", "hpov", ".", "settings", "(", "con", ")", "if", "args", ".", "proxy", ":", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "if", "args", ".", "cert", ":", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "login", "(", "con", ",", "credential", ")", "acceptEULA", "(", "con", ")", "getpolicy", "(", "sts", ")", "if", "(", "__name__", "==", "'__main__'", ")", ":", "import", "sys", "import", "argparse", "sys", ".", "exit", "(", "main", "(", ")", ")"], 0]
[["'\\nservers.py\\n~~~~~~~~~~~~\\n\\nThis module implements servers HP OneView REST API\\n'", "from", "__future__", "import", "unicode_literals", "from", "__future__", "import", "print_function", "from", "__future__", "import", "division", "from", "__future__", "import", "absolute_import", "from", "future", "import", "standard_library", "standard_library", ".", "install_aliases", "(", ")", "from", "pprint", "import", "pprint", "__title__", "=", "'servers'", "__version__", "=", "'0.0.1'", "__copyright__", "=", "'(C) Copyright (2012-2015) Hewlett Packard Enterprise  Development LP'", "__license__", "=", "'MIT'", "__status__", "=", "'Development'", "from", "hpOneView.common", "import", "*", "from", "hpOneView.connection", "import", "*", "from", "hpOneView.activity", "import", "*", "from", "hpOneView.exceptions", "import", "*", "class", "servers", "(", "object", ")", ":", "def", "__init__", "(", "self", ",", "con", ")", ":", "self", ".", "_con", "=", "con", "self", ".", "_activity", "=", "activity", "(", "con", ")", "def", "get_connections", "(", "self", ",", "filter", "=", "''", ")", ":", "' List all the active connections\\n\\n            Args:\\n                filter:\\n                    A general filter/query string that narrows the list of\\n                    resources returned by a multi-resource GET (read) request and\\n                    DELETE (delete) request. The default is no filter\\n                    (all resources are returned). The filter parameter specifies\\n                    a general filter/query string. This query string narrows the\\n                    selection of resources returned from a GET request that\\n                    returns a list of resources. The following example shows how to\\n                    retrieve only the first 10 connections:\\n\\n            Returns: all the connections, filtered or not.\\n            '", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'conn'", "]", "+", "filter", ")", ")", ")", "def", "get_connection", "(", "self", ",", "server", ")", ":", "' List a specific connection\\n\\n            Args:\\n                server:\\n                    Connection id\\n\\n            Returns: all the connections, filtered or not.\\n        '", "body", "=", "self", ".", "_con", ".", "get", "(", "server", "[", "'uri'", "]", ")", "return", "body", "def", "get_server_by_bay", "(", "self", ",", "baynum", ")", ":", "servers", "=", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'servers'", "]", ")", ")", "for", "server", "in", "servers", ":", "if", "(", "server", "[", "'position'", "]", "==", "baynum", ")", ":", "return", "server", "def", "get_server_by_name", "(", "self", ",", "name", ")", ":", "servers", "=", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'servers'", "]", ")", ")", "for", "server", "in", "servers", ":", "if", "(", "server", "[", "'name'", "]", "==", "name", ")", ":", "return", "server", "def", "get_available_servers", "(", "self", ",", "server_hardware_type", "=", "None", ",", "enclosure_group", "=", "None", ",", "server_profile", "=", "None", ")", ":", "filters", "=", "[", "]", "if", "server_hardware_type", ":", "filters", ".", "append", "(", "(", "'serverHardwareTypeUri='", "+", "server_hardware_type", "[", "'uri'", "]", ")", ")", "if", "enclosure_group", ":", "filters", ".", "append", "(", "(", "'enclosureGroupUri='", "+", "enclosure_group", "[", "'uri'", "]", ")", ")", "if", "server_profile", ":", "filters", ".", "append", "(", "(", "'serverProfileUri='", "+", "server_profile", "[", "'uri'", "]", ")", ")", "query_string", "=", "''", "if", "filters", ":", "query_string", "=", "(", "'?'", "+", "'&'", ".", "join", "(", "filters", ")", ")", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'profile-available-targets'", "]", "+", "query_string", ")", ")", "def", "get_servers", "(", "self", ")", ":", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'servers'", "]", ")", ")", "def", "get_utilization", "(", "self", ",", "server", ")", ":", "'Retrieves historical utilization data for the specified resource, metrics, and time span. '", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/utilization'", ")", ")", "return", "body", "def", "get_env_conf", "(", "self", ",", "server", ")", ":", "'Gets the settings that describe the environmental configuration of the server hardware resource. '", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/environmentalConfiguration'", ")", ")", "return", "body", "def", "set_server_powerstate", "(", "self", ",", "server", ",", "state", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "(", "(", "state", "==", "'Off'", ")", "and", "(", "force", "is", "True", ")", ")", ":", "powerRequest", "=", "make_powerstate_dict", "(", "'Off'", ",", "'PressAndHold'", ")", "elif", "(", "(", "state", "==", "'Off'", ")", "and", "(", "force", "is", "False", ")", ")", ":", "powerRequest", "=", "make_powerstate_dict", "(", "'Off'", ",", "'MomentaryPress'", ")", "elif", "(", "state", "==", "'On'", ")", ":", "powerRequest", "=", "make_powerstate_dict", "(", "'On'", ",", "'MomentaryPress'", ")", "elif", "(", "state", "==", "'Reset'", ")", ":", "powerRequest", "=", "make_powerstate_dict", "(", "'On'", ",", "'Reset'", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "(", "server", "[", "'uri'", "]", "+", "'/powerState'", ")", ",", "powerRequest", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "60", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "delete_server", "(", "self", ",", "server", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "update_server", "(", "self", ",", "server", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server", "[", "'uri'", "]", ",", "server", ")", "return", "body", "def", "add_server", "(", "self", ",", "server", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'servers'", "]", ",", "server", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "server", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "server", "return", "task", "def", "get_server_schema", "(", "self", ")", ":", "' Gets the JSON schema of the server hardware resource.'", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'servers'", "]", "+", "'/schema'", ")", ")", "def", "get_bios", "(", "self", ",", "server", ")", ":", "' Gets the list of BIOS/UEFI values currently set on the physical server.'", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/bios'", ")", ")", "def", "get_ilo_sso_url", "(", "self", ",", "server", ")", ":", "' Retrieves the URL to launch a Single Sign-On (SSO) session for the iLO web interface.'", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/iloSsoUrl'", ")", ")", "def", "get_java_remote_console_url", "(", "self", ",", "server", ")", ":", "' Generates a Single Sign-On (SSO) session for the iLO Java Applet console and returns\\n        the URL to launch it. '", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/javaRemoteConsoleUrl'", ")", ")", "def", "get_remote_console_url", "(", "self", ",", "server", ")", ":", "' Generates a Single Sign-On (SSO) session for the iLO Integrated Remote Console Application\\n        (IRC) and returns the URL to launch it.'", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/remoteConsoleUrl'", ")", ")", "def", "get_server_hardware_types", "(", "self", ")", ":", "' Get the list of server hardware type resources defined on the appliance.'", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'server-hardware-types'", "]", ")", "return", "get_members", "(", "body", ")", "def", "remove_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "' Remove the server hardware type with the specified URI. A server hardware type cannot be deleted\\n         if it is associated with a server hardware or server profile resource. '", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server_hardware_type", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server_hardware_type", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self"], 0]
[[",", "'Reset'", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "(", "server", "[", "'uri'", "]", "+", "'/powerState'", ")", ",", "powerRequest", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "60", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "delete_server", "(", "self", ",", "server", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "update_server", "(", "self", ",", "server", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server", "[", "'uri'", "]", ",", "server", ")", "return", "body", "def", "add_server", "(", "self", ",", "server", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'servers'", "]", ",", "server", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "server", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "server", "return", "task", "def", "get_server_schema", "(", "self", ")", ":", "' Gets the JSON schema of the server hardware resource.'", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'servers'", "]", "+", "'/schema'", ")", ")", "def", "get_bios", "(", "self", ",", "server", ")", ":", "' Gets the list of BIOS/UEFI values currently set on the physical server.'", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/bios'", ")", ")", "def", "get_ilo_sso_url", "(", "self", ",", "server", ")", ":", "' Retrieves the URL to launch a Single Sign-On (SSO) session for the iLO web interface.'", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/iloSsoUrl'", ")", ")", "def", "get_java_remote_console_url", "(", "self", ",", "server", ")", ":", "' Generates a Single Sign-On (SSO) session for the iLO Java Applet console and returns\\n        the URL to launch it. '", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/javaRemoteConsoleUrl'", ")", ")", "def", "get_remote_console_url", "(", "self", ",", "server", ")", ":", "' Generates a Single Sign-On (SSO) session for the iLO Integrated Remote Console Application\\n        (IRC) and returns the URL to launch it.'", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/remoteConsoleUrl'", ")", ")", "def", "get_server_hardware_types", "(", "self", ")", ":", "' Get the list of server hardware type resources defined on the appliance.'", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'server-hardware-types'", "]", ")", "return", "get_members", "(", "body", ")", "def", "remove_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "' Remove the server hardware type with the specified URI. A server hardware type cannot be deleted\\n         if it is associated with a server hardware or server profile resource. '", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server_hardware_type", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server_hardware_type", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "get_server_type_schema", "(", "self", ")", ":", "' Get the JSON schema of the server hardware types resource.'", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'server-hardware-types'", "]", "+", "'/schema'", ")", ")", "def", "get_server_hardware_type", "(", "self", ",", "server_type", ")", ":", "' Get the server hardware type resource with the specified ID.'", "return", "self", ".", "_con", ".", "get", "(", "server_type", "[", "'uri'", "]", ")", "def", "set_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "name", ",", "description", ")", ":", "' Updates one or more attributes for a server hardware type resource.\\n\\n        Args:\\n            name:\\n                 The localized name that describes a BIOS/UEFI setting.\\n            description:\\n                 Brief description of the server hardware type.\\n                    Maximum Length: 255\\n                    Minimum Length: 0\\n        '", "request", "=", "make_server_type_dict", "(", "name", ",", "description", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server_hardware_type", "[", "'uri'", "]", ",", "request", ")", "return", "task", "def", "create_server_profile", "(", "self", ",", "affinity", "=", "'Bay'", ",", "biosSettings", "=", "None", ",", "bootSettings", "=", "None", ",", "bootModeSetting", "=", "None", ",", "profileConnectionV4", "=", "None", ",", "description", "=", "None", ",", "firmwareSettingsV3", "=", "None", ",", "hideUnusedFlexNics", "=", "True", ",", "localStorageSettingsV3", "=", "None", ",", "macType", "=", "'Virtual'", ",", "name", "=", "None", ",", "sanStorageV3", "=", "None", ",", "serialNumber", "=", "None", ",", "serialNumberType", "=", "'Physical'", ",", "serverHardwareTypeUri", "=", "None", ",", "serverHardwareUri", "=", "None", ",", "serverProfileTemplateUri", "=", "None", ",", "uuid", "=", "None", ",", "wwnType", "=", "'Virtual'", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "' Create a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            biosSettings:\\n                Dictionary that describes Server BIOS settings\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n            profileConnectionV4:\\n                Array of ProfileConnectionV3\\n            description:\\n                Description of the Server Profile\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            localStorageSettingsV3:\\n                Dictionary that describes the local storage settings.\\n            macType:\\n                Specifies the type of MAC address to be programmed into the IO\\n                devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n            name:\\n                Unique name of the Server Profile\\n            sanStorageV3:\\n                Dictionary that describes the SAN storage settings.\\n            serialNumber:\\n                A 10-byte value that is exposed to the Operating System as the\\n                server hardware\\'s Serial Number. The value can be a virtual serial\\n                number, user defined serial number or physical serial number read\\n                from the server\\'s ROM. It cannot be modified after the profile is\\n                created.\\n            serialNumberType:\\n                 Specifies the type of Serial Number and UUID to be programmed into\\n                 the server ROM. The value can be \\'Virtual\\', \\'UserDefined\\', or\\n                 \\'Physical\\'. The serialNumberType defaults to \\'Virtual\\' when\\n                 serialNumber or uuid are not specified. It cannot be modified\\n                 after the profile is created.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            serverHardwareUri:\\n                 Identifies the server hardware to which the server profile is\\n                 currently assigned, if applicable\\n            serverProfileTemplateUri:\\n                Identifies the Server profile template the Server Profile is based\\n                on.\\n            uuid:\\n                A 36-byte value that is exposed to the Operating System as the\\n                server hardware\\'s UUID. The value can be a virtual uuid, user\\n                defined uuid or physical uuid read from the server\\'s ROM. It\\n                cannot be modified after the profile is created.\\n            wwnType:\\n                 Specifies the type of WWN address to be programmed into the IO\\n                 devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n                 It cannot be modified after the profile is created.\\n\\n        Returns: server profile or task\\n        '", "profile", "=", "make_ServerProfileV5", "(", "affinity", ",", "biosSettings", ",", "bootSettings", ",", "bootModeSetting", ",", "profileConnectionV4", ",", "description", ",", "firmwareSettingsV3", ",", "hideUnusedFlexNics", ",", "localStorageSettingsV3", ",", "macType", ",", "name", ",", "sanStorageV3", ",", "serialNumber", ",", "serialNumberType", ",", "serverHardwareTypeUri", ",", "serverHardwareUri", ",", "serverProfileTemplateUri", ",", "uuid", ",", "wwnType", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "profile", "return", "task", "def", "post_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "' POST a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            profile:\\n                ServerProfileV5\\n\\n        Returns: server profile or task\\n        '", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "profile", "return", "task", "def", "remove_server_profile", "(", "self", ",", "profile", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "("], 500]
[[".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "get_server_type_schema", "(", "self", ")", ":", "' Get the JSON schema of the server hardware types resource.'", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'server-hardware-types'", "]", "+", "'/schema'", ")", ")", "def", "get_server_hardware_type", "(", "self", ",", "server_type", ")", ":", "' Get the server hardware type resource with the specified ID.'", "return", "self", ".", "_con", ".", "get", "(", "server_type", "[", "'uri'", "]", ")", "def", "set_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "name", ",", "description", ")", ":", "' Updates one or more attributes for a server hardware type resource.\\n\\n        Args:\\n            name:\\n                 The localized name that describes a BIOS/UEFI setting.\\n            description:\\n                 Brief description of the server hardware type.\\n                    Maximum Length: 255\\n                    Minimum Length: 0\\n        '", "request", "=", "make_server_type_dict", "(", "name", ",", "description", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server_hardware_type", "[", "'uri'", "]", ",", "request", ")", "return", "task", "def", "create_server_profile", "(", "self", ",", "affinity", "=", "'Bay'", ",", "biosSettings", "=", "None", ",", "bootSettings", "=", "None", ",", "bootModeSetting", "=", "None", ",", "profileConnectionV4", "=", "None", ",", "description", "=", "None", ",", "firmwareSettingsV3", "=", "None", ",", "hideUnusedFlexNics", "=", "True", ",", "localStorageSettingsV3", "=", "None", ",", "macType", "=", "'Virtual'", ",", "name", "=", "None", ",", "sanStorageV3", "=", "None", ",", "serialNumber", "=", "None", ",", "serialNumberType", "=", "'Physical'", ",", "serverHardwareTypeUri", "=", "None", ",", "serverHardwareUri", "=", "None", ",", "serverProfileTemplateUri", "=", "None", ",", "uuid", "=", "None", ",", "wwnType", "=", "'Virtual'", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "' Create a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            biosSettings:\\n                Dictionary that describes Server BIOS settings\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n            profileConnectionV4:\\n                Array of ProfileConnectionV3\\n            description:\\n                Description of the Server Profile\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            localStorageSettingsV3:\\n                Dictionary that describes the local storage settings.\\n            macType:\\n                Specifies the type of MAC address to be programmed into the IO\\n                devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n            name:\\n                Unique name of the Server Profile\\n            sanStorageV3:\\n                Dictionary that describes the SAN storage settings.\\n            serialNumber:\\n                A 10-byte value that is exposed to the Operating System as the\\n                server hardware\\'s Serial Number. The value can be a virtual serial\\n                number, user defined serial number or physical serial number read\\n                from the server\\'s ROM. It cannot be modified after the profile is\\n                created.\\n            serialNumberType:\\n                 Specifies the type of Serial Number and UUID to be programmed into\\n                 the server ROM. The value can be \\'Virtual\\', \\'UserDefined\\', or\\n                 \\'Physical\\'. The serialNumberType defaults to \\'Virtual\\' when\\n                 serialNumber or uuid are not specified. It cannot be modified\\n                 after the profile is created.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            serverHardwareUri:\\n                 Identifies the server hardware to which the server profile is\\n                 currently assigned, if applicable\\n            serverProfileTemplateUri:\\n                Identifies the Server profile template the Server Profile is based\\n                on.\\n            uuid:\\n                A 36-byte value that is exposed to the Operating System as the\\n                server hardware\\'s UUID. The value can be a virtual uuid, user\\n                defined uuid or physical uuid read from the server\\'s ROM. It\\n                cannot be modified after the profile is created.\\n            wwnType:\\n                 Specifies the type of WWN address to be programmed into the IO\\n                 devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n                 It cannot be modified after the profile is created.\\n\\n        Returns: server profile or task\\n        '", "profile", "=", "make_ServerProfileV5", "(", "affinity", ",", "biosSettings", ",", "bootSettings", ",", "bootModeSetting", ",", "profileConnectionV4", ",", "description", ",", "firmwareSettingsV3", ",", "hideUnusedFlexNics", ",", "localStorageSettingsV3", ",", "macType", ",", "name", ",", "sanStorageV3", ",", "serialNumber", ",", "serialNumberType", ",", "serverHardwareTypeUri", ",", "serverHardwareUri", ",", "serverProfileTemplateUri", ",", "uuid", ",", "wwnType", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "profile", "return", "task", "def", "post_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "' POST a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            profile:\\n                ServerProfileV5\\n\\n        Returns: server profile or task\\n        '", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "profile", "return", "task", "def", "remove_server_profile", "(", "self", ",", "profile", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "profile", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "get_server_profiles", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profiles'", "]", ")", "return", "get_members", "(", "body", ")", "def", "update_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile", "[", "'uri'", "]", ",", "profile", ")", "try", ":", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "except", "Exception", ":", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "return", "profile", "def", "update_server_profile_from_template", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "patch_request", "=", "[", "{", "'op'", ":", "'replace'", ",", "'path'", ":", "'/templateCompliance'", ",", "'value'", ":", "'Compliant'", "}", "]", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "patch", "(", "profile", "[", "'uri'", "]", ",", "patch_request", ")", "try", ":", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "except", "Exception", ":", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "return", "profile", "def", "get_server_profile_by_name", "(", "self", ",", "name", ")", ":", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profiles'", "]", ",", "'name'", ",", "name", ")", "return", "body", "def", "get_profile_message", "(", "self", ",", "profile", ")", ":", "' Retrieve the error or status messages associated with the specified profile. '", "message", "=", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/messages'", ")", ")", "return", "message", "def", "get_profile_compliance_preview", "(", "self", ",", "profile", ")", ":", "' Gets the preview of manual and automatic updates required to make the\\n        server profile consistent with its template. '", "return", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/compliance-preview'", ")", ")", "def", "create_server_profile_template", "(", "self", ",", "name", "=", "None", ",", "description", "=", "None", ",", "serverProfileDescription", "=", "None", ",", "serverHardwareTypeUri", "=", "None", ",", "enclosureGroupUri", "=", "None", ",", "affinity", "=", "None", ",", "hideUnusedFlexNics", "=", "None", ",", "profileConnectionV4", "=", "None", ",", "firmwareSettingsV3", "=", "None", ",", "bootSettings", "=", "None", ",", "bootModeSetting", "=", "None", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "'\\n        Create a ServerProfileTemplateV1 dictionary for use with the V200 API\\n        Args:\\n            name:\\n                Unique name of the Server Profile Template\\n            description:\\n                Description of the Server Profile Template\\n            serverProfileDescription:\\n                The description of the server profiles created from this template.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            enclosureGroupUri:\\n                 Identifies the enclosure group for which the Server Profile Template\\n                 was designed. The enclosureGroupUri is determined when the profile\\n                 template is created and cannot be modified.\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            profileConnectionV4:\\n                An array of profileConnectionV4\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management.\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n\\n        Returns: dict\\n        '", "profile_template", "=", "make_ServerProfileTemplateV1", "(", "name", ",", "description", ",", "serverProfileDescription", ",", "serverHardwareTypeUri", ",", "enclosureGroupUri", ",", "affinity", ",", "hideUnusedFlexNics", ",", "profileConnectionV4", ",", "firmwareSettingsV3", ",", "bootSettings", ",", "bootModeSetting", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post"], 500]
[["(", "profile", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "get_server_profiles", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profiles'", "]", ")", "return", "get_members", "(", "body", ")", "def", "update_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile", "[", "'uri'", "]", ",", "profile", ")", "try", ":", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "except", "Exception", ":", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "return", "profile", "def", "update_server_profile_from_template", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "patch_request", "=", "[", "{", "'op'", ":", "'replace'", ",", "'path'", ":", "'/templateCompliance'", ",", "'value'", ":", "'Compliant'", "}", "]", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "patch", "(", "profile", "[", "'uri'", "]", ",", "patch_request", ")", "try", ":", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "except", "Exception", ":", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "return", "profile", "def", "get_server_profile_by_name", "(", "self", ",", "name", ")", ":", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profiles'", "]", ",", "'name'", ",", "name", ")", "return", "body", "def", "get_profile_message", "(", "self", ",", "profile", ")", ":", "' Retrieve the error or status messages associated with the specified profile. '", "message", "=", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/messages'", ")", ")", "return", "message", "def", "get_profile_compliance_preview", "(", "self", ",", "profile", ")", ":", "' Gets the preview of manual and automatic updates required to make the\\n        server profile consistent with its template. '", "return", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/compliance-preview'", ")", ")", "def", "create_server_profile_template", "(", "self", ",", "name", "=", "None", ",", "description", "=", "None", ",", "serverProfileDescription", "=", "None", ",", "serverHardwareTypeUri", "=", "None", ",", "enclosureGroupUri", "=", "None", ",", "affinity", "=", "None", ",", "hideUnusedFlexNics", "=", "None", ",", "profileConnectionV4", "=", "None", ",", "firmwareSettingsV3", "=", "None", ",", "bootSettings", "=", "None", ",", "bootModeSetting", "=", "None", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "'\\n        Create a ServerProfileTemplateV1 dictionary for use with the V200 API\\n        Args:\\n            name:\\n                Unique name of the Server Profile Template\\n            description:\\n                Description of the Server Profile Template\\n            serverProfileDescription:\\n                The description of the server profiles created from this template.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            enclosureGroupUri:\\n                 Identifies the enclosure group for which the Server Profile Template\\n                 was designed. The enclosureGroupUri is determined when the profile\\n                 template is created and cannot be modified.\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            profileConnectionV4:\\n                An array of profileConnectionV4\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management.\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n\\n        Returns: dict\\n        '", "profile_template", "=", "make_ServerProfileTemplateV1", "(", "name", ",", "description", ",", "serverProfileDescription", ",", "serverHardwareTypeUri", ",", "enclosureGroupUri", ",", "affinity", ",", "hideUnusedFlexNics", ",", "profileConnectionV4", ",", "firmwareSettingsV3", ",", "bootSettings", ",", "bootModeSetting", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profile-templates'", "]", ",", "profile_template", ")", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile_template", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "profile_template", "return", "task", "def", "remove_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile_template", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "return", "body", "def", "get_server_profile_templates", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-templates'", "]", ")", "return", "get_members", "(", "body", ")", "def", "get_server_profile_template_by_name", "(", "self", ",", "name", ")", ":", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profile-templates'", "]", ",", "'name'", ",", "name", ")", "return", "body", "def", "update_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile_template", "[", "'uri'", "]", ",", "profile_template", ")", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "profileTemplateResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileTemplateResource", "[", "'resourceUri'", "]", ")", "return", "profile_template", "def", "get_server_profile_from_template", "(", "self", ",", "profile_template", ")", ":", "profile", "=", "self", ".", "_con", ".", "get", "(", "(", "profile_template", "[", "'uri'", "]", "+", "'/new-profile'", ")", ")", "return", "profile", "def", "get_enclosures", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosures'", "]", ")", "return", "get_members", "(", "body", ")", "def", "add_enclosure", "(", "self", ",", "enclosure", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosures'", "]", ",", "enclosure", ")", "if", "(", "enclosure", "[", "'state'", "]", "is", "'Monitored'", ")", ":", "tout", "=", "600", "elif", "(", "enclosure", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "enclosure", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "enclosure", "return", "task", "def", "remove_enclosure", "(", "self", ",", "enclosure", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", "."], 500]
[["(", "uri", "[", "'profile-templates'", "]", ",", "profile_template", ")", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile_template", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "profile_template", "return", "task", "def", "remove_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile_template", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "return", "body", "def", "get_server_profile_templates", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-templates'", "]", ")", "return", "get_members", "(", "body", ")", "def", "get_server_profile_template_by_name", "(", "self", ",", "name", ")", ":", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profile-templates'", "]", ",", "'name'", ",", "name", ")", "return", "body", "def", "update_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile_template", "[", "'uri'", "]", ",", "profile_template", ")", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "profileTemplateResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileTemplateResource", "[", "'resourceUri'", "]", ")", "return", "profile_template", "def", "get_server_profile_from_template", "(", "self", ",", "profile_template", ")", ":", "profile", "=", "self", ".", "_con", ".", "get", "(", "(", "profile_template", "[", "'uri'", "]", "+", "'/new-profile'", ")", ")", "return", "profile", "def", "get_enclosures", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosures'", "]", ")", "return", "get_members", "(", "body", ")", "def", "add_enclosure", "(", "self", ",", "enclosure", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosures'", "]", ",", "enclosure", ")", "if", "(", "enclosure", "[", "'state'", "]", "is", "'Monitored'", ")", ":", "tout", "=", "600", "elif", "(", "enclosure", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "enclosure", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "enclosure", "return", "task", "def", "remove_enclosure", "(", "self", ",", "enclosure", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "enclosure", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "enclosure", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "create_enclosure_group", "(", "self", ",", "associatedLIGs", ",", "name", ",", "powerMode", "=", "'RedundantPowerSupply'", ")", ":", "\" Create an EnclosureGroupV200 dictionary\\n\\n        Args:\\n            associatedLIGs:\\n                A sorted list of logical interconnect group URIs associated with\\n                the enclosure group.\\n            name:\\n                The name of the enclosure group.\\n            powerMode:\\n                Power mode of the enclosure group. Values are 'RedundantPowerFeed'\\n                or 'RedundantPowerSupply'.\\n\\n        Returns: enclosure group\\n        \"", "egroup", "=", "make_EnclosureGroupV200", "(", "associatedLIGs", ",", "name", ",", "powerMode", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosureGroups'", "]", ",", "egroup", ")", "return", "body", "def", "delete_enclosure_group", "(", "self", ",", "egroup", ")", ":", "self", ".", "_con", ".", "delete", "(", "egroup", "[", "'uri'", "]", ")", "def", "get_enclosure_groups", "(", "self", ")", ":", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosureGroups'", "]", ")", ")", "def", "update_enclosure_group", "(", "self", ",", "enclosuregroup", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "enclosuregroup", "[", "'uri'", "]", ",", "enclosuregroup", ")", "return", "body", "def", "get_pool", "(", "self", ",", "pooltype", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "(", "uri", "[", "'idpool'", "]", "+", "'/'", ")", "+", "pooltype", ")", ")", "return", "body", "def", "get_vmac_pool", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vmac-pool'", "]", ")", "return", "body", "def", "get_vwwn_pool", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vwwn-pool'", "]", ")", "return", "body", "def", "get_vsn_pool", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vsn-pool'", "]", ")", "return", "body", "def", "get_profile_networks", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks'", "]", ")", "return", "body", "def", "get_profile_schema", "(", "self", ")", ":", "return", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks-schema'", "]", ")", "def", "get_profile_available_servers", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-servers'", "]", ")", "return", "body", "def", "get_profile_available_storage_systems", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-storage-systems'", "]", ")", "return", "body", "def", "get_profile_ports", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-ports'", "]", ")", "return", "body", "def", "allocate_pool_ids", "(", "self", ",", "url", ",", "count", ")", ":", "allocatorUrl", "=", "(", "'%s/allocator'", "%", "url", ")", "allocatorBody", "=", "{", "'count'", ":", "count", "}", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "allocatorBody", ")", "return", "body", "def", "release_pool_ids", "(", "self", ",", "url", ",", "idList", ")", ":", "collectorUrl", "=", "(", "'%s/collector'", "%", "url", ")", "collectorBody", "=", "{", "'idList'", ":", "idList", "}", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "collectorUrl", ",", "collectorBody", ")", "return", "body", "def", "allocate_range_ids", "(", "self", ",", "allocatorUrl", ",", "count", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "{", "'count'", ":", "count", "}", ")", "return", "body", "def", "release_range_ids", "(", "self", ",", "collectorUrl", ",", "idList", ")", ":", "(", "task", ",", "body", ")", "="], 500]
[[")", "=", "self", ".", "_con", ".", "delete", "(", "profile_template", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "return", "body", "def", "get_server_profile_templates", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-templates'", "]", ")", "return", "get_members", "(", "body", ")", "def", "get_server_profile_template_by_name", "(", "self", ",", "name", ")", ":", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profile-templates'", "]", ",", "'name'", ",", "name", ")", "return", "body", "def", "update_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile_template", "[", "'uri'", "]", ",", "profile_template", ")", "tout", "=", "600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "profileTemplateResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileTemplateResource", "[", "'resourceUri'", "]", ")", "return", "profile_template", "def", "get_server_profile_from_template", "(", "self", ",", "profile_template", ")", ":", "profile", "=", "self", ".", "_con", ".", "get", "(", "(", "profile_template", "[", "'uri'", "]", "+", "'/new-profile'", ")", ")", "return", "profile", "def", "get_enclosures", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosures'", "]", ")", "return", "get_members", "(", "body", ")", "def", "add_enclosure", "(", "self", ",", "enclosure", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosures'", "]", ",", "enclosure", ")", "if", "(", "enclosure", "[", "'state'", "]", "is", "'Monitored'", ")", ":", "tout", "=", "600", "elif", "(", "enclosure", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "tout", "=", "600", "else", ":", "tout", "=", "3600", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "enclosure", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "return", "enclosure", "return", "task", "def", "remove_enclosure", "(", "self", ",", "enclosure", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "if", "force", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "enclosure", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "else", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "enclosure", "[", "'uri'", "]", ")", "if", "(", "blocking", "is", "True", ")", ":", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "return", "task", "def", "create_enclosure_group", "(", "self", ",", "associatedLIGs", ",", "name", ",", "powerMode", "=", "'RedundantPowerSupply'", ")", ":", "\" Create an EnclosureGroupV200 dictionary\\n\\n        Args:\\n            associatedLIGs:\\n                A sorted list of logical interconnect group URIs associated with\\n                the enclosure group.\\n            name:\\n                The name of the enclosure group.\\n            powerMode:\\n                Power mode of the enclosure group. Values are 'RedundantPowerFeed'\\n                or 'RedundantPowerSupply'.\\n\\n        Returns: enclosure group\\n        \"", "egroup", "=", "make_EnclosureGroupV200", "(", "associatedLIGs", ",", "name", ",", "powerMode", ")", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosureGroups'", "]", ",", "egroup", ")", "return", "body", "def", "delete_enclosure_group", "(", "self", ",", "egroup", ")", ":", "self", ".", "_con", ".", "delete", "(", "egroup", "[", "'uri'", "]", ")", "def", "get_enclosure_groups", "(", "self", ")", ":", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosureGroups'", "]", ")", ")", "def", "update_enclosure_group", "(", "self", ",", "enclosuregroup", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "enclosuregroup", "[", "'uri'", "]", ",", "enclosuregroup", ")", "return", "body", "def", "get_pool", "(", "self", ",", "pooltype", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "(", "uri", "[", "'idpool'", "]", "+", "'/'", ")", "+", "pooltype", ")", ")", "return", "body", "def", "get_vmac_pool", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vmac-pool'", "]", ")", "return", "body", "def", "get_vwwn_pool", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vwwn-pool'", "]", ")", "return", "body", "def", "get_vsn_pool", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vsn-pool'", "]", ")", "return", "body", "def", "get_profile_networks", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks'", "]", ")", "return", "body", "def", "get_profile_schema", "(", "self", ")", ":", "return", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks-schema'", "]", ")", "def", "get_profile_available_servers", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-servers'", "]", ")", "return", "body", "def", "get_profile_available_storage_systems", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-storage-systems'", "]", ")", "return", "body", "def", "get_profile_ports", "(", "self", ")", ":", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-ports'", "]", ")", "return", "body", "def", "allocate_pool_ids", "(", "self", ",", "url", ",", "count", ")", ":", "allocatorUrl", "=", "(", "'%s/allocator'", "%", "url", ")", "allocatorBody", "=", "{", "'count'", ":", "count", "}", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "allocatorBody", ")", "return", "body", "def", "release_pool_ids", "(", "self", ",", "url", ",", "idList", ")", ":", "collectorUrl", "=", "(", "'%s/collector'", "%", "url", ")", "collectorBody", "=", "{", "'idList'", ":", "idList", "}", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "collectorUrl", ",", "collectorBody", ")", "return", "body", "def", "allocate_range_ids", "(", "self", ",", "allocatorUrl", ",", "count", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "{", "'count'", ":", "count", "}", ")", "return", "body", "def", "release_range_ids", "(", "self", ",", "collectorUrl", ",", "idList", ")", ":", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "collectorUrl", ",", "{", "'idList'", ":", "idList", "}", ")", "return", "body", "def", "enable_range", "(", "self", ",", "url", ")", ":", "prange", "=", "self", ".", "_con", ".", "get", "(", "url", ")", "prange", "[", "'enabled'", "]", "=", "True", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "url", ",", "prange", ")", "return", "body", "def", "disable_range", "(", "self", ",", "url", ")", ":", "prange", "=", "self", ".", "_con", ".", "get", "(", "url", ")", "prange", "[", "'enabled'", "]", "=", "False", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "url", ",", "prange", ")", "return", "body"], 900]
[["'RIS Schema classes'", "import", "os", "import", "re", "import", "sys", "import", "json", "import", "locale", "import", "zipfile", "import", "logging", "import", "textwrap", "import", "validictory", "from", ".", "sharedtypes", "import", "JSONEncoder", "from", "ilorest.rest.v1_helper", "import", "RisObject", "LOGGER", "=", "logging", ".", "getLogger", "(", "__name__", ")", "class", "ValidationError", "(", "Exception", ")", ":", "'Validation Class Error'", "pass", "class", "SchemaValidationError", "(", "ValidationError", ")", ":", "'Schema Validation Class Error'", "pass", "class", "RegistryValidationError", "(", "ValidationError", ")", ":", "'Registration Validation Class Error'", "def", "__init__", "(", "self", ",", "msg", ",", "regentry", "=", "None", ",", "selector", "=", "None", ")", ":", "super", "(", "RegistryValidationError", ",", "self", ")", ".", "__init__", "(", "msg", ")", "self", ".", "reg", "=", "regentry", "self", ".", "sel", "=", "selector", "class", "UnknownValidatorError", "(", "Exception", ")", ":", "\"Raised when we find an attribute type that we don't know how to\"", "' validate. '", "class", "ValidationManager", "(", "object", ")", ":", "'Keep track of all the schemas and registries and provides helpers'", "' to simplify validation '", "def", "__init__", "(", "self", ",", "local_path", ",", "bios_local_path", ",", "romfamily", "=", "None", ",", "biosversion", "=", "None", ",", "iloversion", "=", "None", ",", "monolith", "=", "None", ")", ":", "super", "(", "ValidationManager", ",", "self", ")", ".", "__init__", "(", ")", "defaultilopath", "=", "None", "defaultbiospath", "=", "None", "schemamainfolder", "=", "None", "if", "(", "float", "(", "iloversion", ")", "<", "2.1", ")", ":", "if", "(", "os", ".", "name", "==", "'nt'", ")", ":", "defaultilopath", "=", "'.\\\\hp-rest-classes-ilo4'", "defaultbiospath", "=", "'.\\\\hp-rest-classes-bios'", "schemamainfolder", "=", "os", ".", "path", ".", "dirname", "(", "sys", ".", "executable", ")", "else", ":", "defaultilopath", "=", "'/usr/share/hprest/hp-rest-classes-ilo4'", "defaultbiospath", "=", "'/usr/share/hprest/hp-rest-classes-bios'", "schemamainfolder", "=", "'/usr/share/hprest/'", "if", "(", "not", "local_path", ")", ":", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "defaultilopath", ")", ")", ":", "ilozip", "=", "self", ".", "getiloziplocation", "(", "schemamainfolder", ",", "iloversion", ")", "if", "(", "ilozip", "and", "os", ".", "path", ".", "exists", "(", "ilozip", ")", ")", ":", "with", "zipfile", ".", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "ilozip", ")", ",", "'r'", ")", "as", "zfile", ":", "zfile", ".", "extractall", "(", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "'hp-rest-classes-ilo4'", ")", ")", "local_path", "=", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "'hp-rest-classes-ilo4'", ")", "else", ":", "raise", "SchemaValidationError", "(", "'No valid iLO schema zip file found.\\nPlease refer to our documentation for further instructions on downloading the appropriate schemas.'", ")", "else", ":", "local_path", "=", "defaultilopath", "elif", "(", "not", "os", ".", "path", ".", "isdir", "(", "local_path", ")", ")", ":", "raise", "SchemaValidationError", "(", "(", "\"iLO schema directory '%s' doesn't exist\"", "%", "local_path", ")", ")", "if", "(", "not", "bios_local_path", ")", ":", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "defaultbiospath", ")", ")", ":", "bioszip", "=", "self", ".", "getbiosziplocation", "(", "romfamily", ",", "schemamainfolder", ",", "biosversion", ")", "if", "(", "bioszip", "and", "os", ".", "path", ".", "exists", "(", "bioszip", ")", ")", ":", "with", "zipfile", ".", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "bioszip", ")", ",", "'r'", ")", "as", "zfile", ":", "zfile", ".", "extractall", "(", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "'hp-rest-classes-bios'", ")", ")", "bios_local_path", "=", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "'hp-rest-classes-bios'", ")", "else", ":", "raise", "SchemaValidationError", "(", "'No valid BIOS schema zip file found.\\nPlease refer to our documentation for further instructions on downloading the appropriate schemas.'", ")", "else", ":", "bios_local_path", "=", "defaultbiospath", "elif", "(", "not", "os", ".", "path", ".", "isdir", "(", "bios_local_path", ")", ")", ":", "raise", "SchemaValidationError", "(", "(", "\"Bios schema directory '%s' doesn't exist\"", "%", "bios_local_path", ")", ")", "elif", "monolith", ".", "is_redfish", ":", "local_path", "=", "'/redfish/v1/Schemas/'", "bios_local_path", "=", "'/redfish/v1/Registries/'", "else", ":", "local_path", "=", "'/rest/v1/Schemas'", "bios_local_path", "=", "'/rest/v1/Registries'", "self", ".", "_schema_locations", "=", "list", "(", ")", "self", ".", "_classes", "=", "list", "(", ")", "self", ".", "_registry_locations", "=", "list", "(", ")", "self", ".", "_classes_registry", "=", "list", "(", ")", "self", ".", "_bios_schema_locations", "=", "list", "(", ")", "self", ".", "_bios_classes", "=", "list", "(", ")", "self", ".", "_bios_registry_locations", "=", "list", "(", ")", "self", ".", "_bios_classes_registry", "=", "list", "(", ")", "self", ".", "_ilo_messages", "=", "list", "(", ")", "self", ".", "_base_messages", "=", "list", "(", ")", "self", ".", "_hpcommon_messages", "=", "list", "(", ")", "self", ".", "_iloevents_messages", "=", "list", "(", ")", "self", ".", "_errors", "=", "list", "(", ")", "if", "monolith", ".", "is_redfish", ":", "self", ".", "_schemaid", "=", "[", "'/redfish/v1/schemas'", ",", "'Members'", "]", "self", ".", "_regid", "=", "[", "'/redfish/v1/registries'", ",", "'Members'", "]", "else", ":", "self", ".", "_schemaid", "=", "[", "'/rest/v1/schemas'", ",", "'Items'", "]", "self", ".", "_regid", "=", "[", "'/rest/v1/registries'", ",", "'Items'", "]", "if", "local_path", ":", "self", ".", "add_location", "(", "schema_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "self", ".", "add_location", "(", "registry_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "if", "bios_local_path", ":", "self", ".", "add_location", "(", "schema_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "self", ".", "add_location", "(", "registry_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "def", "getbiosziplocation", "(", "self", ",", "romfamily", ",", "schemadir", ",", "biosversion", ")", ":", "'Helper function for BIOS zip location from schema directory\\n\\n        :param romfamily: the current systems rom family.\\n        :type romfamily: str.\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param biosversion: the current system BIOS version.\\n        :type biosversion: str.\\n\\n        '", "foundfile", "=", "None", "currentver", "=", "None", "tempstr", "=", "(", "(", "(", "'hp-rest-classes-bios-'", "+", "romfamily", ")", "+", "'-'", ")", "+", "biosversion", ")", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "for", "filename", "in", "filenames", ":", "if", "(", "tempstr", "in", "filename", ")", ":", "regentry", "=", "re", ".", "compile", "(", "(", "'%s(.*?).zip'", "%", "tempstr", ")", ")", "mentry", "=", "regentry", ".", "search", "(", "filename", ")", "if", "(", "mentry", "and", "currentver", ")", ":", "if", "(", "currentver", "<", "mentry", ".", "group", "(", "1", ")", ")", ":", "foundfile", "=", "filename", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "elif", "(", "mentry", "and", "(", "not", "currentver", ")", ")", ":", "foundfile", "=", "filename", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "if", "foundfile", ":", "return", "os", ".", "path", ".", "join", "(", "schemadir", ",", "foundfile", ")", "else", ":", "return", "None", "def", "getiloziplocation", "(", "self", ",", "schemadir", ",", "iloversion", ")", ":", "'Helper function for iLO zip location from schema directory\\n\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param iloversion: the current system iLO version.\\n        :type iloversion: str.\\n\\n        '", "if", "(", "float", "(", "iloversion", ")", "<", "2.1", ")", ":", "iloversion", "=", "'2.00'", "tempstr", "=", "(", "'hp-rest-classes-ilo4-'", "+", "iloversion", ".", "replace", "(", "'.'", ",", "''", ")", ")", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "for", "filename", "in", "filenames", ":", "if", "(", "tempstr", "in", "filename", ")", ":", "return", "os", ".", "path", ".", "join", "(", "schemadir", ",", "filename", ")", "return", "None", "def", "add_location", "(", "self", ",", "schema_path", "=", "None", ",", "registry_path", "=", "None", ",", "biossection", "=", "False", ",", "monolith", "=", "None", ")", ":", "'Add schema_path and registry_path to the list of locations to'", "' search for schemas and registries\\n\\n        :param schema_path: directory or URL where schemas are located.\\n        :type  schema_path: str.\\n        :param registry_path: directory or URL where registries are located.\\n        :type registry_path: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "if", "schema_path", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_schema_locations", ".", "append", "(", "schema_path", ")", "self", ".", "_update_location_map", "(", "monolith", "=", "monolith", ")", "else", ":", "self", ".", "_bios_schema_locations", ".", "append", "(", "schema_path", ")", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "elif", "registry_path", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_registry_locations", ".", "append", "(", "registry_path", ")", "self", ".", "_update_location_map", "(", "registries", "=", "True", ",", "monolith", "="], 0]
[["=", "list", "(", ")", "self", ".", "_bios_schema_locations", "=", "list", "(", ")", "self", ".", "_bios_classes", "=", "list", "(", ")", "self", ".", "_bios_registry_locations", "=", "list", "(", ")", "self", ".", "_bios_classes_registry", "=", "list", "(", ")", "self", ".", "_ilo_messages", "=", "list", "(", ")", "self", ".", "_base_messages", "=", "list", "(", ")", "self", ".", "_hpcommon_messages", "=", "list", "(", ")", "self", ".", "_iloevents_messages", "=", "list", "(", ")", "self", ".", "_errors", "=", "list", "(", ")", "if", "monolith", ".", "is_redfish", ":", "self", ".", "_schemaid", "=", "[", "'/redfish/v1/schemas'", ",", "'Members'", "]", "self", ".", "_regid", "=", "[", "'/redfish/v1/registries'", ",", "'Members'", "]", "else", ":", "self", ".", "_schemaid", "=", "[", "'/rest/v1/schemas'", ",", "'Items'", "]", "self", ".", "_regid", "=", "[", "'/rest/v1/registries'", ",", "'Items'", "]", "if", "local_path", ":", "self", ".", "add_location", "(", "schema_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "self", ".", "add_location", "(", "registry_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "if", "bios_local_path", ":", "self", ".", "add_location", "(", "schema_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "self", ".", "add_location", "(", "registry_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "def", "getbiosziplocation", "(", "self", ",", "romfamily", ",", "schemadir", ",", "biosversion", ")", ":", "'Helper function for BIOS zip location from schema directory\\n\\n        :param romfamily: the current systems rom family.\\n        :type romfamily: str.\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param biosversion: the current system BIOS version.\\n        :type biosversion: str.\\n\\n        '", "foundfile", "=", "None", "currentver", "=", "None", "tempstr", "=", "(", "(", "(", "'hp-rest-classes-bios-'", "+", "romfamily", ")", "+", "'-'", ")", "+", "biosversion", ")", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "for", "filename", "in", "filenames", ":", "if", "(", "tempstr", "in", "filename", ")", ":", "regentry", "=", "re", ".", "compile", "(", "(", "'%s(.*?).zip'", "%", "tempstr", ")", ")", "mentry", "=", "regentry", ".", "search", "(", "filename", ")", "if", "(", "mentry", "and", "currentver", ")", ":", "if", "(", "currentver", "<", "mentry", ".", "group", "(", "1", ")", ")", ":", "foundfile", "=", "filename", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "elif", "(", "mentry", "and", "(", "not", "currentver", ")", ")", ":", "foundfile", "=", "filename", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "if", "foundfile", ":", "return", "os", ".", "path", ".", "join", "(", "schemadir", ",", "foundfile", ")", "else", ":", "return", "None", "def", "getiloziplocation", "(", "self", ",", "schemadir", ",", "iloversion", ")", ":", "'Helper function for iLO zip location from schema directory\\n\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param iloversion: the current system iLO version.\\n        :type iloversion: str.\\n\\n        '", "if", "(", "float", "(", "iloversion", ")", "<", "2.1", ")", ":", "iloversion", "=", "'2.00'", "tempstr", "=", "(", "'hp-rest-classes-ilo4-'", "+", "iloversion", ".", "replace", "(", "'.'", ",", "''", ")", ")", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "for", "filename", "in", "filenames", ":", "if", "(", "tempstr", "in", "filename", ")", ":", "return", "os", ".", "path", ".", "join", "(", "schemadir", ",", "filename", ")", "return", "None", "def", "add_location", "(", "self", ",", "schema_path", "=", "None", ",", "registry_path", "=", "None", ",", "biossection", "=", "False", ",", "monolith", "=", "None", ")", ":", "'Add schema_path and registry_path to the list of locations to'", "' search for schemas and registries\\n\\n        :param schema_path: directory or URL where schemas are located.\\n        :type  schema_path: str.\\n        :param registry_path: directory or URL where registries are located.\\n        :type registry_path: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "if", "schema_path", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_schema_locations", ".", "append", "(", "schema_path", ")", "self", ".", "_update_location_map", "(", "monolith", "=", "monolith", ")", "else", ":", "self", ".", "_bios_schema_locations", ".", "append", "(", "schema_path", ")", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "elif", "registry_path", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_registry_locations", ".", "append", "(", "registry_path", ")", "self", ".", "_update_location_map", "(", "registries", "=", "True", ",", "monolith", "=", "monolith", ")", "else", ":", "self", ".", "_bios_registry_locations", ".", "append", "(", "registry_path", ")", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "registries", "=", "True", ",", "monolith", "=", "monolith", ")", "else", ":", "raise", "ValueError", "(", "\"'schema_path' and 'registry_path' are undefined\"", ")", "def", "_update_location_map", "(", "self", ",", "biossection", "=", "False", ",", "registries", "=", "False", ",", "monolith", "=", "None", ")", ":", "'Searches locations to build a map of type to filename\\n\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "locationslist", "=", "list", "(", ")", "pathjoinstr", "=", "None", "if", "(", "not", "registries", ")", ":", "pathjoinstr", "=", "'Schemas'", "if", "(", "not", "biossection", ")", ":", "locationslist", "=", "self", ".", "_schema_locations", "else", ":", "locationslist", "=", "self", ".", "_bios_schema_locations", "else", ":", "pathjoinstr", "=", "'Registries'", "if", "(", "not", "biossection", ")", ":", "locationslist", "=", "self", ".", "_registry_locations", "else", ":", "locationslist", "=", "self", ".", "_bios_registry_locations", "for", "location", "in", "locationslist", ":", "if", "monolith", ":", "self", ".", "new_load_file", "(", "monolith", ",", "root", "=", "location", ",", "biossection", "=", "biossection", ",", "registries", "=", "registries", ")", "elif", "self", ".", "_is_local", "(", "location", ")", ":", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "location", ",", "pathjoinstr", ")", ")", ":", "for", "filename", "in", "filenames", ":", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "if", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "location", ",", "biossection", "=", "biossection", ",", "registries", "=", "registries", ")", ":", "LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "def", "new_load_file", "(", "self", ",", "monolith", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "registries", "=", "False", ")", ":", "'Loads the types from monolith.\\n\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param root: pointer to the root of the load.\\n        :type root: class obj.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n\\n        '", "classesdataholder", "=", "[", "]", "for", "itemtype", "in", "monolith", ".", "types", ":", "if", "(", "itemtype", ".", "startswith", "(", "'#SchemaFileCollection.'", ")", "or", "(", "itemtype", ".", "startswith", "(", "'Collection.'", ")", "and", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ")", ":", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "if", "(", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", "or", "(", "self", ".", "_regid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "if", "(", "(", "not", "registries", ")", "and", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "if", "classesdataholder", ":", "if", "(", "self", ".", "_schemaid", "[", "1", "]", "in", "instance", ".", "resp", ".", "dict", ")", ":", "classesdataholder", "[", "0", "]", "[", "self", ".", "_schemaid", "[", "1", "]", "]", ".", "extend", "(", "instance", ".", "resp", ".", "dict", "[", "self", ".", "_schemaid", "[", "1", "]", "]", ")", "else", ":", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "elif", "(", "registries", "and", "(", "self", ".", "_regid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "if", "classesdataholder", ":", "if", "monolith", ".", "is_redfish", ":", "classesdataholder", "[", "0", "]", "[", "self", ".", "_regid", "[", "1", "]", "]", ".", "extend", "(", "instance", ".", "resp", ".", "dict", "[", "self", ".", "_regid", "[", "1", "]"], 500]
[["monolith", ")", "else", ":", "self", ".", "_bios_registry_locations", ".", "append", "(", "registry_path", ")", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "registries", "=", "True", ",", "monolith", "=", "monolith", ")", "else", ":", "raise", "ValueError", "(", "\"'schema_path' and 'registry_path' are undefined\"", ")", "def", "_update_location_map", "(", "self", ",", "biossection", "=", "False", ",", "registries", "=", "False", ",", "monolith", "=", "None", ")", ":", "'Searches locations to build a map of type to filename\\n\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "locationslist", "=", "list", "(", ")", "pathjoinstr", "=", "None", "if", "(", "not", "registries", ")", ":", "pathjoinstr", "=", "'Schemas'", "if", "(", "not", "biossection", ")", ":", "locationslist", "=", "self", ".", "_schema_locations", "else", ":", "locationslist", "=", "self", ".", "_bios_schema_locations", "else", ":", "pathjoinstr", "=", "'Registries'", "if", "(", "not", "biossection", ")", ":", "locationslist", "=", "self", ".", "_registry_locations", "else", ":", "locationslist", "=", "self", ".", "_bios_registry_locations", "for", "location", "in", "locationslist", ":", "if", "monolith", ":", "self", ".", "new_load_file", "(", "monolith", ",", "root", "=", "location", ",", "biossection", "=", "biossection", ",", "registries", "=", "registries", ")", "elif", "self", ".", "_is_local", "(", "location", ")", ":", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "location", ",", "pathjoinstr", ")", ")", ":", "for", "filename", "in", "filenames", ":", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "if", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "location", ",", "biossection", "=", "biossection", ",", "registries", "=", "registries", ")", ":", "LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "def", "new_load_file", "(", "self", ",", "monolith", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "registries", "=", "False", ")", ":", "'Loads the types from monolith.\\n\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param root: pointer to the root of the load.\\n        :type root: class obj.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n\\n        '", "classesdataholder", "=", "[", "]", "for", "itemtype", "in", "monolith", ".", "types", ":", "if", "(", "itemtype", ".", "startswith", "(", "'#SchemaFileCollection.'", ")", "or", "(", "itemtype", ".", "startswith", "(", "'Collection.'", ")", "and", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ")", ":", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "if", "(", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", "or", "(", "self", ".", "_regid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "if", "(", "(", "not", "registries", ")", "and", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "if", "classesdataholder", ":", "if", "(", "self", ".", "_schemaid", "[", "1", "]", "in", "instance", ".", "resp", ".", "dict", ")", ":", "classesdataholder", "[", "0", "]", "[", "self", ".", "_schemaid", "[", "1", "]", "]", ".", "extend", "(", "instance", ".", "resp", ".", "dict", "[", "self", ".", "_schemaid", "[", "1", "]", "]", ")", "else", ":", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "elif", "(", "registries", "and", "(", "self", ".", "_regid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "if", "classesdataholder", ":", "if", "monolith", ".", "is_redfish", ":", "classesdataholder", "[", "0", "]", "[", "self", ".", "_regid", "[", "1", "]", "]", ".", "extend", "(", "instance", ".", "resp", ".", "dict", "[", "self", ".", "_regid", "[", "1", "]", "]", ")", "else", ":", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "if", "classesdataholder", ":", "classesdataholder", "=", "classesdataholder", "[", "0", "]", "try", ":", "if", "(", "(", "monolith", ".", "_typestring", "in", "classesdataholder", ")", "and", "(", "(", "'Collection.'", "in", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "or", "(", "(", "'#SchemaFileCollection.'", "in", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "and", "monolith", ".", "is_redfish", ")", ")", ")", ":", "newclass", "=", "Classes", ".", "parse", "(", "classesdataholder", ")", "newclass", ".", "set_root", "(", "root", ")", "if", "(", "not", "registries", ")", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "elif", "(", "not", "biossection", ")", ":", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")", "except", "BaseException", ":", "pass", "else", ":", "pass", "def", "load_file", "(", "self", ",", "filepath", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "registries", "=", "False", ",", "datareturn", "=", "False", ")", ":", "'Loads the types from filepath.\\n\\n        :param filepath: path to a file to load, local or URL.\\n        :type filepath: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param datareturn: flag to determine if the raw data should be returned.\\n        :type datareturn: boolean.\\n\\n        '", "result", "=", "False", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "try", ":", "filehand", "=", "open", "(", "filepath", ",", "'r'", ")", "data", "=", "json", ".", "load", "(", "filehand", ")", "if", "datareturn", ":", "return", "data", "if", "(", "(", "'Type'", "in", "data", ")", "and", "(", "data", "[", "'Type'", "]", "==", "'Collection.1.0.0'", ")", ")", ":", "if", "(", "biossection", "and", "registries", ")", ":", "itemsreturn", "=", "self", ".", "bios_helper_function", "(", "data", ",", "root", ")", "data", "[", "'Items'", "]", "=", "itemsreturn", "newclass", "=", "Classes", ".", "parse", "(", "data", ")", "newclass", ".", "set_root", "(", "root", ")", "if", "(", "not", "registries", ")", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "elif", "(", "not", "biossection", ")", ":", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")", "result", "=", "True", "except", "BaseException", ":", "pass", "else", ":", "pass", "finally", ":", "filehand", ".", "close", "(", ")", "return", "result", "def", "bios_helper_function", "(", "self", ",", "data", ",", "root", ")", ":", "'Helper function for BIOS schemas\\n\\n        :param data: current retrieved data for BIOS.\\n        :type data: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n\\n        '", "folderentries", "=", "data", "[", "'links'", "]", "datareturn", "=", "list", "(", ")", "for", "entry", "in", "folderentries", "[", "'Member'", "]", ":", "joinstr", "=", "entry", "[", "'href'", "]", "if", "(", "(", "os", ".", "name", "==", "'nt'", ")", "and", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ")", ":", "joinstr", "=", "joinstr", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "[", "1", ":", "]", "elif", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ":", "joinstr", "=", "joinstr", "[", "1", ":", "]", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "root", ",", "joinstr", ")", ")", ":", "for", "filename", "in", "filenames", ":", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "datareturn", ".", "append", "(", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "root", ",", "biossection", "=", "True", ",", "registries", "=", "True", ",", "datareturn", "=", "True", ")", ")"], 500]
[["]", ")", "else", ":", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "if", "classesdataholder", ":", "classesdataholder", "=", "classesdataholder", "[", "0", "]", "try", ":", "if", "(", "(", "monolith", ".", "_typestring", "in", "classesdataholder", ")", "and", "(", "(", "'Collection.'", "in", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "or", "(", "(", "'#SchemaFileCollection.'", "in", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "and", "monolith", ".", "is_redfish", ")", ")", ")", ":", "newclass", "=", "Classes", ".", "parse", "(", "classesdataholder", ")", "newclass", ".", "set_root", "(", "root", ")", "if", "(", "not", "registries", ")", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "elif", "(", "not", "biossection", ")", ":", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")", "except", "BaseException", ":", "pass", "else", ":", "pass", "def", "load_file", "(", "self", ",", "filepath", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "registries", "=", "False", ",", "datareturn", "=", "False", ")", ":", "'Loads the types from filepath.\\n\\n        :param filepath: path to a file to load, local or URL.\\n        :type filepath: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param datareturn: flag to determine if the raw data should be returned.\\n        :type datareturn: boolean.\\n\\n        '", "result", "=", "False", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "try", ":", "filehand", "=", "open", "(", "filepath", ",", "'r'", ")", "data", "=", "json", ".", "load", "(", "filehand", ")", "if", "datareturn", ":", "return", "data", "if", "(", "(", "'Type'", "in", "data", ")", "and", "(", "data", "[", "'Type'", "]", "==", "'Collection.1.0.0'", ")", ")", ":", "if", "(", "biossection", "and", "registries", ")", ":", "itemsreturn", "=", "self", ".", "bios_helper_function", "(", "data", ",", "root", ")", "data", "[", "'Items'", "]", "=", "itemsreturn", "newclass", "=", "Classes", ".", "parse", "(", "data", ")", "newclass", ".", "set_root", "(", "root", ")", "if", "(", "not", "registries", ")", ":", "if", "(", "not", "biossection", ")", ":", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "elif", "(", "not", "biossection", ")", ":", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "else", ":", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")", "result", "=", "True", "except", "BaseException", ":", "pass", "else", ":", "pass", "finally", ":", "filehand", ".", "close", "(", ")", "return", "result", "def", "bios_helper_function", "(", "self", ",", "data", ",", "root", ")", ":", "'Helper function for BIOS schemas\\n\\n        :param data: current retrieved data for BIOS.\\n        :type data: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n\\n        '", "folderentries", "=", "data", "[", "'links'", "]", "datareturn", "=", "list", "(", ")", "for", "entry", "in", "folderentries", "[", "'Member'", "]", ":", "joinstr", "=", "entry", "[", "'href'", "]", "if", "(", "(", "os", ".", "name", "==", "'nt'", ")", "and", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ")", ":", "joinstr", "=", "joinstr", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "[", "1", ":", "]", "elif", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ":", "joinstr", "=", "joinstr", "[", "1", ":", "]", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "root", ",", "joinstr", ")", ")", ":", "for", "filename", "in", "filenames", ":", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "datareturn", ".", "append", "(", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "root", ",", "biossection", "=", "True", ",", "registries", "=", "True", ",", "datareturn", "=", "True", ")", ")", "LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "return", "datareturn", "def", "validate", "(", "self", ",", "item", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "newarg", "=", "None", ",", "checkall", "=", "False", ",", "regloc", "=", "None", ")", ":", "'Search for matching schemas and attribute registries and'", "' ensure that item is valid.\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param regloc: path to registry location.\\n        :type regloc: str.\\n\\n        '", "if", "regloc", ":", "attrreg", "=", "RepoRegistryEntry", "(", "regloc", ")", "else", ":", "attrreg", "=", "self", ".", "find_schema", "(", "schname", "=", "item", "[", "monolith", ".", "_typestring", "]", ")", "if", "attrreg", ":", "tempvalue", "=", "attrreg", ".", "validate", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ",", "currdict", "=", "currdict", ",", "monolith", "=", "monolith", ",", "newarg", "=", "newarg", ",", "checkall", "=", "checkall", ")", "if", "(", "tempvalue", "is", "True", ")", ":", "return", "False", "elif", "tempvalue", ":", "self", ".", "_errors", "=", "tempvalue", "return", "True", "def", "bios_validate", "(", "self", ",", "item", ",", "regname", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "checkall", "=", "False", ",", "monolith", "=", "None", ")", ":", "'BIOS Search for matching schemas and attribute registries and'", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "if", "attrreg", ":", "tempvalue", "=", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ",", "currdict", "=", "currdict", ",", "checkall", "=", "checkall", ",", "monolith", "=", "monolith", ")", "if", "(", "tempvalue", "==", "'readonly'", ")", ":", "return", "tempvalue", "elif", "(", "tempvalue", "==", "'unique'", ")", ":", "return", "tempvalue", "elif", "tempvalue", ":", "self", ".", "_errors", "=", "tempvalue", "return", "True", "def", "bios_info", "(", "self", ",", "item", ",", "regname", ",", "selector", ")", ":", "'BIOS Search for matching schemas and attribute registries and'", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n\\n        '", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "if", "attrreg", ":", "if", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ")", ":", "return", "False", "return", "True", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "'Searches through all locations and returns the first schema'", "' found for the provided type\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "for", "cls", "in", "self", ".", "_classes", ":", "found", "=", "cls", ".", "find_schema", "(", "schname", "=", "schname", ")", "if", "found", ":", "return", "found", "return", "None", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "'Searches through all locations and returns the first registry'", "' found for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "for", "cls", "in", "self", ".", "_classes_registry", ":", "found", "=", "cls", ".", "find_registry", "(", "regname", "=", "regname", ")", "if", "found", ":", "return", "found", "return", "None", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "'Searches through all locations and returns the first schema found'", "' for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "for", "cls", "in", "self", ".", "_bios_classes_registry", ":", "found", "=", "cls", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "if", "found", ":", "return", "found", "return", "None", "def", "get_errors", "(", "self", ")", ":", "'Return a list of errors encountered'", "return", "self", ".", "_errors", "def", "_is_local", "(", "self", ",", "path", ")", ":", "'Determine if path is a local file or remote\\n\\n        :param path: The path to examine.\\n        :type path: str.\\n\\n        '", "if", "(", "'://'", "in", "path", ")", ":", "return", "False", "return", "True", "class", "Classes", "(", "RisObject", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "item", ")", ":", "super", "(", "Classes", ",", "self", ")", ".", "__init__", "(", "item", ")", "self", ".", "_root", "=", "None", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "self", ".", "_root", "=", "newroot", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "'Returns iLO schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "entry", "and", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", "."], 500]
[["LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "return", "datareturn", "def", "validate", "(", "self", ",", "item", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "newarg", "=", "None", ",", "checkall", "=", "False", ",", "regloc", "=", "None", ")", ":", "'Search for matching schemas and attribute registries and'", "' ensure that item is valid.\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param regloc: path to registry location.\\n        :type regloc: str.\\n\\n        '", "if", "regloc", ":", "attrreg", "=", "RepoRegistryEntry", "(", "regloc", ")", "else", ":", "attrreg", "=", "self", ".", "find_schema", "(", "schname", "=", "item", "[", "monolith", ".", "_typestring", "]", ")", "if", "attrreg", ":", "tempvalue", "=", "attrreg", ".", "validate", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ",", "currdict", "=", "currdict", ",", "monolith", "=", "monolith", ",", "newarg", "=", "newarg", ",", "checkall", "=", "checkall", ")", "if", "(", "tempvalue", "is", "True", ")", ":", "return", "False", "elif", "tempvalue", ":", "self", ".", "_errors", "=", "tempvalue", "return", "True", "def", "bios_validate", "(", "self", ",", "item", ",", "regname", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "checkall", "=", "False", ",", "monolith", "=", "None", ")", ":", "'BIOS Search for matching schemas and attribute registries and'", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "if", "attrreg", ":", "tempvalue", "=", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ",", "currdict", "=", "currdict", ",", "checkall", "=", "checkall", ",", "monolith", "=", "monolith", ")", "if", "(", "tempvalue", "==", "'readonly'", ")", ":", "return", "tempvalue", "elif", "(", "tempvalue", "==", "'unique'", ")", ":", "return", "tempvalue", "elif", "tempvalue", ":", "self", ".", "_errors", "=", "tempvalue", "return", "True", "def", "bios_info", "(", "self", ",", "item", ",", "regname", ",", "selector", ")", ":", "'BIOS Search for matching schemas and attribute registries and'", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n\\n        '", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "if", "attrreg", ":", "if", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ")", ":", "return", "False", "return", "True", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "'Searches through all locations and returns the first schema'", "' found for the provided type\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "for", "cls", "in", "self", ".", "_classes", ":", "found", "=", "cls", ".", "find_schema", "(", "schname", "=", "schname", ")", "if", "found", ":", "return", "found", "return", "None", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "'Searches through all locations and returns the first registry'", "' found for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "for", "cls", "in", "self", ".", "_classes_registry", ":", "found", "=", "cls", ".", "find_registry", "(", "regname", "=", "regname", ")", "if", "found", ":", "return", "found", "return", "None", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "'Searches through all locations and returns the first schema found'", "' for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "for", "cls", "in", "self", ".", "_bios_classes_registry", ":", "found", "=", "cls", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "if", "found", ":", "return", "found", "return", "None", "def", "get_errors", "(", "self", ")", ":", "'Return a list of errors encountered'", "return", "self", ".", "_errors", "def", "_is_local", "(", "self", ",", "path", ")", ":", "'Determine if path is a local file or remote\\n\\n        :param path: The path to examine.\\n        :type path: str.\\n\\n        '", "if", "(", "'://'", "in", "path", ")", ":", "return", "False", "return", "True", "class", "Classes", "(", "RisObject", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "item", ")", ":", "super", "(", "Classes", ",", "self", ")", ".", "__init__", "(", "item", ")", "self", ".", "_root", "=", "None", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "self", ".", "_root", "=", "newroot", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "'Returns iLO schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "entry", "and", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", "==", "schname", ".", "lower", "(", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "schname", "=", "schname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "for", "entry", "in", "self", ".", "Members", ":", "schlink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "schlink", "=", "schlink", "[", "(", "len", "(", "schlink", ")", "-", "2", ")", "]", "if", "(", "schname", ".", "lower", "(", ")", "==", "schlink", ".", "lower", "(", ")", ")", ":", "result", "=", "entry", "break", "return", "result", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "'Returns iLO registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ".", "startswith", "(", "regname", ".", "lower", "(", ")", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "regname", "=", "regname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "for", "entry", "in", "self", ".", "Members", ":", "reglink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "reglink", "=", "reglink", "[", "(", "len", "(", "reglink", ")", "-", "2", ")", "]", "if", "(", "regname", ".", "lower", "(", ")", "==", "reglink", ".", "lower", "(", ")", ")", ":", "result", "=", "entry", "break", "return", "result", "def", "find_bios_schema", "(", "self", ",", "schname", ")", ":", "'Returns BIOS schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", "==", "schname", ".", "lower", "(", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "return", "result", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "'Returns BIOS registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "regname", ".", "lower", "(", ")", "in", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "return", "result", "class", "RepoBaseEntry", "(", "RisObject", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "RepoBaseEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "self", ".", "_root", "=", "None", "def", "set_root"], 500]
[["lower", "(", ")", "==", "schname", ".", "lower", "(", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "schname", "=", "schname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "for", "entry", "in", "self", ".", "Members", ":", "schlink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "schlink", "=", "schlink", "[", "(", "len", "(", "schlink", ")", "-", "2", ")", "]", "if", "(", "schname", ".", "lower", "(", ")", "==", "schlink", ".", "lower", "(", ")", ")", ":", "result", "=", "entry", "break", "return", "result", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "'Returns iLO registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ".", "startswith", "(", "regname", ".", "lower", "(", ")", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "regname", "=", "regname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "for", "entry", "in", "self", ".", "Members", ":", "reglink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "reglink", "=", "reglink", "[", "(", "len", "(", "reglink", ")", "-", "2", ")", "]", "if", "(", "regname", ".", "lower", "(", ")", "==", "reglink", ".", "lower", "(", ")", ")", ":", "result", "=", "entry", "break", "return", "result", "def", "find_bios_schema", "(", "self", ",", "schname", ")", ":", "'Returns BIOS schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", "==", "schname", ".", "lower", "(", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "return", "result", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "'Returns BIOS registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "result", "=", "None", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "for", "entry", "in", "self", ".", "Items", ":", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "regname", ".", "lower", "(", ")", "in", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ")", ")", ")", ":", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "result", "=", "regentry", "break", "return", "result", "class", "RepoBaseEntry", "(", "RisObject", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "RepoBaseEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "self", ".", "_root", "=", "None", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "self", ".", "_root", "=", "newroot", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "result", "=", "None", "if", "(", "'Uri'", "in", "currloc", ")", ":", "root", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "_root", ")", "xref", "=", "os", ".", "path", ".", "normpath", "(", "currloc", ".", "Uri", ".", "extref", ")", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", "fqpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "xref", ")", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath", ")", ")", ":", "errlist", ".", "append", "(", "SchemaValidationError", "(", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "fqpath", ")", ")", ")", "else", ":", "result", "=", "None", "if", "fqpath", ".", "endswith", "(", "'.json'", ")", ":", "result", "=", "open", "(", "fqpath", ")", ".", "read", "(", ")", "return", "result", "class", "RepoRegistryEntry", "(", "RepoBaseEntry", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "RepoRegistryEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "checkall", "=", "False", ",", "monolith", "=", "None", ",", "newarg", "=", "None", ")", ":", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "reg", "=", "self", ".", "get_registry_model", "(", "errlist", "=", "errlist", ",", "currdict", "=", "currdict", ",", "monolith", "=", "monolith", ",", "newarg", "=", "newarg", ")", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "try", ":", "if", "reg", "[", "selector", "]", ".", "readonly", ":", "return", "True", "except", "BaseException", ":", "pass", "else", ":", "pass", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "else", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "if", "errlist", ":", "return", "errlist", "def", "validate_bios_version", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "checkall", "=", "False", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ")", ":", "'BIOS VERSION. Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "reg", "=", "self", ".", "get_registry_model_bios_version", "(", "errlist", "=", "errlist", ",", "currdict", "=", "currdict", ",", "monolith", "=", "monolith", ")", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "for", "item", "in", "reg", ".", "Attributes", ":", "if", "(", "not", "(", "item", "[", "'Name'", "]", "==", "selector", ")", ")", ":", "continue", "if", "(", "item", "[", "'ReadOnly'", "]", "is", "True", ")", ":", "return", "'readonly'", "try", ":", "if", "(", "item", "[", "'IsSystemUniqueProperty'", "]", "is", "True", ")", ":", "return", "'unique'", "except", "BaseException", ":", "continue", "else", ":", "continue", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "else", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "if", "errlist", ":", "return", "errlist", "def", "validate_deprecated", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "not"], 500]
[["(", "self", ",", "newroot", ")", ":", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "self", ".", "_root", "=", "newroot", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "result", "=", "None", "if", "(", "'Uri'", "in", "currloc", ")", ":", "root", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "_root", ")", "xref", "=", "os", ".", "path", ".", "normpath", "(", "currloc", ".", "Uri", ".", "extref", ")", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", "fqpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "xref", ")", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath", ")", ")", ":", "errlist", ".", "append", "(", "SchemaValidationError", "(", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "fqpath", ")", ")", ")", "else", ":", "result", "=", "None", "if", "fqpath", ".", "endswith", "(", "'.json'", ")", ":", "result", "=", "open", "(", "fqpath", ")", ".", "read", "(", ")", "return", "result", "class", "RepoRegistryEntry", "(", "RepoBaseEntry", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "RepoRegistryEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "checkall", "=", "False", ",", "monolith", "=", "None", ",", "newarg", "=", "None", ")", ":", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "reg", "=", "self", ".", "get_registry_model", "(", "errlist", "=", "errlist", ",", "currdict", "=", "currdict", ",", "monolith", "=", "monolith", ",", "newarg", "=", "newarg", ")", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "try", ":", "if", "reg", "[", "selector", "]", ".", "readonly", ":", "return", "True", "except", "BaseException", ":", "pass", "else", ":", "pass", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "else", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "if", "errlist", ":", "return", "errlist", "def", "validate_bios_version", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "checkall", "=", "False", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ")", ":", "'BIOS VERSION. Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "reg", "=", "self", ".", "get_registry_model_bios_version", "(", "errlist", "=", "errlist", ",", "currdict", "=", "currdict", ",", "monolith", "=", "monolith", ")", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "for", "item", "in", "reg", ".", "Attributes", ":", "if", "(", "not", "(", "item", "[", "'Name'", "]", "==", "selector", ")", ")", ":", "continue", "if", "(", "item", "[", "'ReadOnly'", "]", "is", "True", ")", ":", "return", "'readonly'", "try", ":", "if", "(", "item", "[", "'IsSystemUniqueProperty'", "]", "is", "True", ")", ":", "return", "'unique'", "except", "BaseException", ":", "continue", "else", ":", "continue", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "else", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "if", "errlist", ":", "return", "errlist", "def", "validate_deprecated", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "return", "errlist", "currloc", "=", "None", "defloc", "=", "None", "langcode", "=", "'TBD'", "for", "loc", "in", "self", ".", "Location", ":", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "[", "loclang", "]", "break", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "defloc", "=", "loc", "[", "loclang", "]", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "return", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "if", "(", "not", "location_file", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "if", "(", "'Registry'", "in", "jsonreg", ")", ":", "if", "(", "(", "'Type'", "in", "jsonreg", ")", "and", "(", "jsonreg", "[", "'Type'", "]", "==", "'HpPropertiesRegistrySchema.1.0.0'", ")", ")", ":", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "jsonreg", "[", "'Registry'", "]", ")", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "def", "get_registry_model", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "errlist", "=", "None", ",", "skipcommit", "=", "False", ",", "searchtype", "=", "None", ",", "newarg", "=", "None", ",", "latestschema", "=", "None", ")", ":", "'Load the schema file and find the registry model if available\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param skipcommit: flag to determine if commit should be skipped.\\n        :type skipcommit: boolean.\\n        :param searchtype: classifier for the current search.\\n        :type searchtype: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param latestschema: flag to determine if we should use smart schema.\\n        :type latestschema: boolean.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "return", "None", "currloc", "=", "None", "defloc", "=", "'en'", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "langcode", "[", "0", "]", "=", "'en'", "for", "loc", "in", "self", ".", "Location", ":", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "break", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "return", "None", "if", "(", "not", "searchtype", ")", ":", "searchtype", "=", "'ob'", "location_file", "=", "None", "if", "(", "currdict", "and", "monolith", ")", ":", "for", "itemtype", "in", "monolith", ".", "types", ":", "if", "(", "itemtype", ".", "lower", "(", ")", ".", "startswith", "(", "searchtype", ".", "lower", "(", ")", ")", "and", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "try", ":", "if", "monolith", ".", "is_redfish", ":", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "'#'", ")", "[", "(", "-", "1", ")", "]", "currtype", "=", "(", "currtype", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.'", ")", "else", ":", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", "if", "latestschema", ":", "currtype", "="], 500]
[["errlist", ")", ":", "errlist", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "return", "errlist", "currloc", "=", "None", "defloc", "=", "None", "langcode", "=", "'TBD'", "for", "loc", "in", "self", ".", "Location", ":", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "[", "loclang", "]", "break", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "defloc", "=", "loc", "[", "loclang", "]", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "return", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "if", "(", "not", "location_file", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "if", "(", "'Registry'", "in", "jsonreg", ")", ":", "if", "(", "(", "'Type'", "in", "jsonreg", ")", "and", "(", "jsonreg", "[", "'Type'", "]", "==", "'HpPropertiesRegistrySchema.1.0.0'", ")", ")", ":", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "jsonreg", "[", "'Registry'", "]", ")", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "errlist", ".", "extend", "(", "results", ")", "def", "get_registry_model", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "errlist", "=", "None", ",", "skipcommit", "=", "False", ",", "searchtype", "=", "None", ",", "newarg", "=", "None", ",", "latestschema", "=", "None", ")", ":", "'Load the schema file and find the registry model if available\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param skipcommit: flag to determine if commit should be skipped.\\n        :type skipcommit: boolean.\\n        :param searchtype: classifier for the current search.\\n        :type searchtype: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param latestschema: flag to determine if we should use smart schema.\\n        :type latestschema: boolean.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "return", "None", "currloc", "=", "None", "defloc", "=", "'en'", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "langcode", "[", "0", "]", "=", "'en'", "for", "loc", "in", "self", ".", "Location", ":", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "break", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "return", "None", "if", "(", "not", "searchtype", ")", ":", "searchtype", "=", "'ob'", "location_file", "=", "None", "if", "(", "currdict", "and", "monolith", ")", ":", "for", "itemtype", "in", "monolith", ".", "types", ":", "if", "(", "itemtype", ".", "lower", "(", ")", ".", "startswith", "(", "searchtype", ".", "lower", "(", ")", ")", "and", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "try", ":", "if", "monolith", ".", "is_redfish", ":", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "'#'", ")", "[", "(", "-", "1", ")", "]", "currtype", "=", "(", "currtype", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.'", ")", "else", ":", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", "if", "latestschema", ":", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", "insttype", "=", "instance", ".", "resp", ".", "dict", "[", "'title'", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", "if", "(", "(", "currtype", "==", "insttype", ")", "or", "(", "currtype", "==", "instance", ".", "resp", ".", "dict", "[", "'oldtitle'", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", ")", ")", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "elif", "(", "(", "(", "searchtype", "==", "'ob'", ")", "and", "instance", ".", "resp", ".", "dict", "[", "'title'", "]", ".", "startswith", "(", "currtype", ")", ")", "or", "(", "(", "'oldtitle'", "in", "instance", ".", "resp", ".", "dict", ".", "keys", "(", ")", ")", "and", "(", "currdict", "[", "instance", ".", "_typestring", "]", "==", "instance", ".", "resp", ".", "dict", "[", "'oldtitle'", "]", ")", ")", ")", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "elif", "(", "(", "searchtype", "!=", "'ob'", ")", "and", "(", "currdict", "[", "instance", ".", "_typestring", "]", "in", "instance", ".", "resp", ".", "dict", "[", "'RegistryPrefix'", "]", ")", ")", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "except", "BaseException", ":", "pass", "else", ":", "pass", "if", "location_file", ":", "break", "else", ":", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "if", "(", "not", "location_file", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "if", "(", "currdict", "and", "monolith", ")", ":", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "JSONEncoder", ")", ")", "else", ":", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "if", "skipcommit", ":", "return", "jsonreg", "[", "'Messages'", "]", "if", "(", "'properties'", "in", "jsonreg", ")", ":", "regitem", "=", "jsonreg", "[", "'properties'", "]", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "if", "newarg", ":", "regcopy", "=", "reg", "for", "arg", "in", "newarg", "[", ":", "(", "-", "1", ")", "]", ":", "try", ":", "if", "(", "(", "'properties'", "in", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", "and", "(", "'patternProperties'", "in", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", ")", ":", "regcopy", "[", "arg", "]", "[", "'properties'", "]", ".", "update", "(", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", ")", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'properties'", "]", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "test", "=", "re", ".", "compile", "(", "pattern", ")", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "match", "=", "test", ".", "match", "(", "nextarg", ")", "if", "match", ":", "regcopy", "[", "nextarg", "]", "=", "regcopy", ".", "pop", "(", "pattern", ")", "break", "elif", "(", "'oneOf'", "in", "regcopy", "[", "arg", "]", ")", ":", "oneof", "=", "regcopy", "[", "arg", "]", "[", "'oneOf'", "]", "for", "item", "in", "oneof", ":", "regcopy", "=", "item", "[", "'properties'", "]", "if", "(", "not", "(", "arg", "==", "newarg", "[", "(", "-", "1", ")", "]", ")", ")", ":", "try", ":", "nextitem", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "regcopy", "[", "nextitem", "]", "break", "except", "Exception", ":", "continue", "else", ":", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'properties'", "]", "except", "Exception"], 500]
[["currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", "insttype", "=", "instance", ".", "resp", ".", "dict", "[", "'title'", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", "if", "(", "(", "currtype", "==", "insttype", ")", "or", "(", "currtype", "==", "instance", ".", "resp", ".", "dict", "[", "'oldtitle'", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", ")", ")", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "elif", "(", "(", "(", "searchtype", "==", "'ob'", ")", "and", "instance", ".", "resp", ".", "dict", "[", "'title'", "]", ".", "startswith", "(", "currtype", ")", ")", "or", "(", "(", "'oldtitle'", "in", "instance", ".", "resp", ".", "dict", ".", "keys", "(", ")", ")", "and", "(", "currdict", "[", "instance", ".", "_typestring", "]", "==", "instance", ".", "resp", ".", "dict", "[", "'oldtitle'", "]", ")", ")", ")", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "elif", "(", "(", "searchtype", "!=", "'ob'", ")", "and", "(", "currdict", "[", "instance", ".", "_typestring", "]", "in", "instance", ".", "resp", ".", "dict", "[", "'RegistryPrefix'", "]", ")", ")", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "except", "BaseException", ":", "pass", "else", ":", "pass", "if", "location_file", ":", "break", "else", ":", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "if", "(", "not", "location_file", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "if", "(", "currdict", "and", "monolith", ")", ":", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "JSONEncoder", ")", ")", "else", ":", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "if", "skipcommit", ":", "return", "jsonreg", "[", "'Messages'", "]", "if", "(", "'properties'", "in", "jsonreg", ")", ":", "regitem", "=", "jsonreg", "[", "'properties'", "]", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "if", "newarg", ":", "regcopy", "=", "reg", "for", "arg", "in", "newarg", "[", ":", "(", "-", "1", ")", "]", ":", "try", ":", "if", "(", "(", "'properties'", "in", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", "and", "(", "'patternProperties'", "in", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", ")", ":", "regcopy", "[", "arg", "]", "[", "'properties'", "]", ".", "update", "(", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", ")", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'properties'", "]", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "test", "=", "re", ".", "compile", "(", "pattern", ")", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "match", "=", "test", ".", "match", "(", "nextarg", ")", "if", "match", ":", "regcopy", "[", "nextarg", "]", "=", "regcopy", ".", "pop", "(", "pattern", ")", "break", "elif", "(", "'oneOf'", "in", "regcopy", "[", "arg", "]", ")", ":", "oneof", "=", "regcopy", "[", "arg", "]", "[", "'oneOf'", "]", "for", "item", "in", "oneof", ":", "regcopy", "=", "item", "[", "'properties'", "]", "if", "(", "not", "(", "arg", "==", "newarg", "[", "(", "-", "1", ")", "]", ")", ")", ":", "try", ":", "nextitem", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "regcopy", "[", "nextitem", "]", "break", "except", "Exception", ":", "continue", "else", ":", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'properties'", "]", "except", "Exception", ":", "try", ":", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "test", "=", "re", ".", "compile", "(", "pattern", ")", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "match", "=", "test", ".", "match", "(", "nextarg", ")", "if", "match", ":", "patterninfo", "=", "regcopy", ".", "pop", "(", "pattern", ")", "regcopy", "[", "nextarg", "]", "=", "patterninfo", "except", "BaseException", ":", "return", "None", "reg", "=", "regcopy", "return", "reg", "return", "None", "def", "get_registry_model_bios_version", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "errlist", "=", "None", ")", ":", "'BIOS VERSION Load the schema file and find the registry model'", "' if available.\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "return", "None", "currloc", "=", "None", "defloc", "=", "'en'", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "langcode", "[", "0", "]", "=", "'en'", "for", "loc", "in", "self", ".", "Location", ":", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "break", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "return", "None", "location_file", "=", "None", "if", "(", "currdict", "and", "monolith", ")", ":", "for", "itemtype", "in", "monolith", ".", "types", ":", "if", "(", "(", "'HpBiosAttributeRegistrySchema.'", "in", "itemtype", ")", "and", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "if", "location_file", ":", "break", "else", ":", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "if", "(", "not", "location_file", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "if", "(", "currdict", "and", "monolith", ")", ":", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "JSONEncoder", ")", ")", "else", ":", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "if", "(", "'RegistryEntries'", "in", "jsonreg", ")", ":", "regitem", "=", "jsonreg", "[", "'RegistryEntries'", "]", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "return", "reg", "return", "None", "class", "RepoSchemaEntry", "(", "RepoBaseEntry", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "item", ")", ":", "super", "(", "RepoSchemaEntry", ",", "self", ")", ".", "__init__", "(", "item", ")", "self", ".", "_root", "=", "None", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "self", ".", "_root", "=", "newroot", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "(", "'ArchiveUri'", "in", "currloc", ")", "and", "(", "'ArchiveFile'", "in", "currloc", ")", ")", ":", "fqpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "currloc", ".", "ArchiveUri", ".", "xref", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", ")", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath"], 500]
[[":", "try", ":", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "test", "=", "re", ".", "compile", "(", "pattern", ")", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "match", "=", "test", ".", "match", "(", "nextarg", ")", "if", "match", ":", "patterninfo", "=", "regcopy", ".", "pop", "(", "pattern", ")", "regcopy", "[", "nextarg", "]", "=", "patterninfo", "except", "BaseException", ":", "return", "None", "reg", "=", "regcopy", "return", "reg", "return", "None", "def", "get_registry_model_bios_version", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "errlist", "=", "None", ")", ":", "'BIOS VERSION Load the schema file and find the registry model'", "' if available.\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "return", "None", "currloc", "=", "None", "defloc", "=", "'en'", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "langcode", "[", "0", "]", "=", "'en'", "for", "loc", "in", "self", ".", "Location", ":", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "break", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "return", "None", "location_file", "=", "None", "if", "(", "currdict", "and", "monolith", ")", ":", "for", "itemtype", "in", "monolith", ".", "types", ":", "if", "(", "(", "'HpBiosAttributeRegistrySchema.'", "in", "itemtype", ")", "and", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "location_file", "=", "instance", ".", "resp", ".", "dict", "break", "if", "location_file", ":", "break", "else", ":", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "if", "(", "not", "location_file", ")", ":", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "if", "(", "currdict", "and", "monolith", ")", ":", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "JSONEncoder", ")", ")", "else", ":", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "if", "(", "'RegistryEntries'", "in", "jsonreg", ")", ":", "regitem", "=", "jsonreg", "[", "'RegistryEntries'", "]", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "return", "reg", "return", "None", "class", "RepoSchemaEntry", "(", "RepoBaseEntry", ")", ":", "'Represents an entry in the Classes registry'", "def", "__init__", "(", "self", ",", "item", ")", ":", "super", "(", "RepoSchemaEntry", ",", "self", ")", ".", "__init__", "(", "item", ")", "self", ".", "_root", "=", "None", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "self", ".", "_root", "=", "newroot", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "(", "'ArchiveUri'", "in", "currloc", ")", "and", "(", "'ArchiveFile'", "in", "currloc", ")", ")", ":", "fqpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "currloc", ".", "ArchiveUri", ".", "xref", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", ")", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath", ")", ")", ":", "errlist", ".", "append", "(", "SchemaValidationError", "(", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "fqpath", ")", ")", ")", "else", ":", "archive_file", "=", "currloc", ".", "ArchiveFile", "archive_fh", "=", "None", "result", "=", "None", "if", "fqpath", ".", "endswith", "(", "'.zip'", ")", ":", "archive_fh", "=", "zipfile", ".", "ZipFile", "(", "fqpath", ")", "infolist", "=", "archive_fh", ".", "infolist", "(", ")", "for", "i", "in", "infolist", ":", "if", "(", "i", ".", "filename", ".", "lower", "(", ")", "==", "archive_file", ".", "lower", "(", ")", ")", ":", "jsonsch_fh", "=", "archive_fh", ".", "open", "(", "i", ")", "result", "=", "jsonsch_fh", ".", "read", "(", ")", "jsonsch_fh", ".", "close", "(", ")", "archive_fh", ".", "close", "(", ")", "return", "result", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "result", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location property does not exist'", ")", ")", "return", "result", "currloc", "=", "None", "defloc", "=", "None", "langcode", "=", "'TBD'", "for", "loc", "in", "self", ".", "Location", ":", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "[", "loclang", "]", "break", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "defloc", "=", "loc", "[", "loclang", "]", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "result", ".", "append", "(", "SchemaValidationError", "(", "'Unable to determine location'", ")", ")", "return", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "result", ")", "if", "(", "not", "location_file", ")", ":", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "jsonsch", "=", "json", ".", "loads", "(", "location_file", ")", "validictory", ".", "validate", "(", "tdict", ",", "jsonsch", ")", "class", "HpPropertiesRegistry", "(", "RisObject", ")", ":", "'Models the HpPropertiesRegistry file'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "HpPropertiesRegistry", ",", "self", ")", ".", "__init__", "(", "d", ")", "def", "validate_attribute_values", "(", "self", ",", "tdict", ")", ":", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "result", "=", "list", "(", ")", "for", "tkey", "in", "tdict", ":", "try", ":", "if", "(", "self", "[", "tkey", "]", "and", "hasattr", "(", "self", "[", "tkey", "]", ",", "'type'", ")", ")", ":", "temp", "=", "self", ".", "validate_attribute", "(", "self", "[", "tkey", "]", ",", "tdict", "[", "tkey", "]", ",", "tkey", ")", "for", "err", "in", "temp", ":", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "if", "err", ".", "reg", ":", "err", ".", "sel", "=", "tkey", "result", ".", "extend", "(", "temp", ")", "except", "Exception", ":", "pass", "return", "result", "def", "validate_att_val_bios", "(", "self", ",", "tdict", ")", ":", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "result", "=", "list", "(", ")", "for", "tkey", "in", "tdict", ":", "for", "item", "in", "self", ".", "Attributes", ":", "try", ":", "if", "(", "(", "item", "[", "'Name'", "]", "==", "tkey", ")", "and", "hasattr", "(", "item", ",", "'Type'", ")", ")", ":", "temp", "=", "self", ".", "validate_attribute", "(", "item", ",", "tdict", "[", "tkey", "]", ",", "tkey", ")", "for", "err", "in", "temp", ":", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "if", "err", ".", "reg", ":", "err", ".", "sel", "=", "tkey", "result", ".", "extend", "(", "temp", ")", "break", "except", "Exception", ":", "pass"], 500]
[[")", ")", ":", "errlist", ".", "append", "(", "SchemaValidationError", "(", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "fqpath", ")", ")", ")", "else", ":", "archive_file", "=", "currloc", ".", "ArchiveFile", "archive_fh", "=", "None", "result", "=", "None", "if", "fqpath", ".", "endswith", "(", "'.zip'", ")", ":", "archive_fh", "=", "zipfile", ".", "ZipFile", "(", "fqpath", ")", "infolist", "=", "archive_fh", ".", "infolist", "(", ")", "for", "i", "in", "infolist", ":", "if", "(", "i", ".", "filename", ".", "lower", "(", ")", "==", "archive_file", ".", "lower", "(", ")", ")", ":", "jsonsch_fh", "=", "archive_fh", ".", "open", "(", "i", ")", "result", "=", "jsonsch_fh", ".", "read", "(", ")", "jsonsch_fh", ".", "close", "(", ")", "archive_fh", ".", "close", "(", ")", "return", "result", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "if", "(", "not", "errlist", ")", ":", "errlist", "=", "list", "(", ")", "result", "=", "list", "(", ")", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location property does not exist'", ")", ")", "return", "result", "currloc", "=", "None", "defloc", "=", "None", "langcode", "=", "'TBD'", "for", "loc", "in", "self", ".", "Location", ":", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "currloc", "=", "loc", "[", "loclang", "]", "break", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "defloc", "=", "loc", "[", "loclang", "]", "if", "(", "not", "currloc", ")", ":", "currloc", "=", "defloc", "if", "(", "not", "currloc", ")", ":", "result", ".", "append", "(", "SchemaValidationError", "(", "'Unable to determine location'", ")", ")", "return", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "result", ")", "if", "(", "not", "location_file", ")", ":", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location data is empty'", ")", ")", "else", ":", "jsonsch", "=", "json", ".", "loads", "(", "location_file", ")", "validictory", ".", "validate", "(", "tdict", ",", "jsonsch", ")", "class", "HpPropertiesRegistry", "(", "RisObject", ")", ":", "'Models the HpPropertiesRegistry file'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "HpPropertiesRegistry", ",", "self", ")", ".", "__init__", "(", "d", ")", "def", "validate_attribute_values", "(", "self", ",", "tdict", ")", ":", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "result", "=", "list", "(", ")", "for", "tkey", "in", "tdict", ":", "try", ":", "if", "(", "self", "[", "tkey", "]", "and", "hasattr", "(", "self", "[", "tkey", "]", ",", "'type'", ")", ")", ":", "temp", "=", "self", ".", "validate_attribute", "(", "self", "[", "tkey", "]", ",", "tdict", "[", "tkey", "]", ",", "tkey", ")", "for", "err", "in", "temp", ":", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "if", "err", ".", "reg", ":", "err", ".", "sel", "=", "tkey", "result", ".", "extend", "(", "temp", ")", "except", "Exception", ":", "pass", "return", "result", "def", "validate_att_val_bios", "(", "self", ",", "tdict", ")", ":", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "result", "=", "list", "(", ")", "for", "tkey", "in", "tdict", ":", "for", "item", "in", "self", ".", "Attributes", ":", "try", ":", "if", "(", "(", "item", "[", "'Name'", "]", "==", "tkey", ")", "and", "hasattr", "(", "item", ",", "'Type'", ")", ")", ":", "temp", "=", "self", ".", "validate_attribute", "(", "item", ",", "tdict", "[", "tkey", "]", ",", "tkey", ")", "for", "err", "in", "temp", ":", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "if", "err", ".", "reg", ":", "err", ".", "sel", "=", "tkey", "result", ".", "extend", "(", "temp", ")", "break", "except", "Exception", ":", "pass", "return", "result", "def", "get_validator", "(", "self", ",", "attrname", ",", "newargs", "=", "None", ",", "oneof", "=", "None", ")", ":", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param oneof: special string for \"oneof\" options within validation.\\n        :type oneof: list.\\n\\n        '", "if", "oneof", ":", "self", "=", "oneof", "if", "newargs", ":", "for", "arg", "in", "newargs", ":", "try", ":", "self", "=", "self", "[", "'properties'", "]", "except", "Exception", ":", "pass", "if", "(", "not", "hasattr", "(", "self", ",", "arg", ")", ")", ":", "return", "None", "elif", "(", "not", "(", "arg", "==", "newargs", "[", "(", "-", "1", ")", "]", ")", ")", ":", "self", "=", "self", "[", "arg", "]", "if", "(", "not", "hasattr", "(", "self", ",", "attrname", ")", ")", ":", "return", "None", "validator", "=", "None", "if", "EnumValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "EnumValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "StringValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "StringValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "ObjectValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "ObjectValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "IntegerValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "IntegerValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "BoolValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "BoolValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "PasswordValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "PasswordValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "(", "'oneOf'", "in", "self", "[", "attrname", "]", ".", "keys", "(", ")", ")", ":", "for", "item", "in", "self", "[", "attrname", "]", "[", "'oneOf'", "]", ":", "validator", "=", "self", ".", "get_validator", "(", "attrname", ",", "newargs", ",", "HpPropertiesRegistry", "(", "{", "attrname", ":", "item", "}", ")", ")", "if", "validator", ":", "break", "return", "validator", "def", "get_validator_bios", "(", "self", ",", "attrname", ")", ":", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "for", "item", "in", "self", ".", "Attributes", ":", "if", "(", "item", "[", "'Name'", "]", "==", "attrname", ")", ":", "validator", "=", "None", "if", "EnumValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "EnumValidator", ".", "parse", "(", "item", ")", "elif", "StringValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "StringValidator", ".", "parse", "(", "item", ")", "elif", "IntegerValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "IntegerValidator", ".", "parse", "(", "item", ")", "elif", "BoolValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "BoolValidator", ".", "parse", "(", "item", ")", "elif", "ObjectValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "ObjectValidator", ".", "parse", "(", "item", ")", "elif", "PasswordValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "PasswordValidator", ".", "parse", "(", "item", ")", "return", "validator", "return", "None", "def", "validate_attribute", "(", "self", ",", "attrentry", ",", "attrval", ",", "name", ")", ":", "'Function to validate attribute against iLO schema\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param attrval: attribute value to be used for validation.\\n        :type attrval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "validator", "=", "None", "if", "EnumValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "EnumValidator", ".", "parse", "(", "attrentry", ")", "elif", "StringValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "StringValidator", ".", "parse", "(", "attrentry", ")", "elif", "IntegerValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "IntegerValidator", ".", "parse", "(", "attrentry", ")", "elif", "BoolValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "BoolValidator", ".", "parse", "(", "attrentry", ")", "elif", "ObjectValidator", ".", "is_type", "(", "attrentry", ")", ":"], 500]
[["return", "result", "def", "get_validator", "(", "self", ",", "attrname", ",", "newargs", "=", "None", ",", "oneof", "=", "None", ")", ":", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param oneof: special string for \"oneof\" options within validation.\\n        :type oneof: list.\\n\\n        '", "if", "oneof", ":", "self", "=", "oneof", "if", "newargs", ":", "for", "arg", "in", "newargs", ":", "try", ":", "self", "=", "self", "[", "'properties'", "]", "except", "Exception", ":", "pass", "if", "(", "not", "hasattr", "(", "self", ",", "arg", ")", ")", ":", "return", "None", "elif", "(", "not", "(", "arg", "==", "newargs", "[", "(", "-", "1", ")", "]", ")", ")", ":", "self", "=", "self", "[", "arg", "]", "if", "(", "not", "hasattr", "(", "self", ",", "attrname", ")", ")", ":", "return", "None", "validator", "=", "None", "if", "EnumValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "EnumValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "StringValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "StringValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "ObjectValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "ObjectValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "IntegerValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "IntegerValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "BoolValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "BoolValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "PasswordValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "validator", "=", "PasswordValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "elif", "(", "'oneOf'", "in", "self", "[", "attrname", "]", ".", "keys", "(", ")", ")", ":", "for", "item", "in", "self", "[", "attrname", "]", "[", "'oneOf'", "]", ":", "validator", "=", "self", ".", "get_validator", "(", "attrname", ",", "newargs", ",", "HpPropertiesRegistry", "(", "{", "attrname", ":", "item", "}", ")", ")", "if", "validator", ":", "break", "return", "validator", "def", "get_validator_bios", "(", "self", ",", "attrname", ")", ":", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "for", "item", "in", "self", ".", "Attributes", ":", "if", "(", "item", "[", "'Name'", "]", "==", "attrname", ")", ":", "validator", "=", "None", "if", "EnumValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "EnumValidator", ".", "parse", "(", "item", ")", "elif", "StringValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "StringValidator", ".", "parse", "(", "item", ")", "elif", "IntegerValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "IntegerValidator", ".", "parse", "(", "item", ")", "elif", "BoolValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "BoolValidator", ".", "parse", "(", "item", ")", "elif", "ObjectValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "ObjectValidator", ".", "parse", "(", "item", ")", "elif", "PasswordValidator", ".", "is_type", "(", "item", ")", ":", "validator", "=", "PasswordValidator", ".", "parse", "(", "item", ")", "return", "validator", "return", "None", "def", "validate_attribute", "(", "self", ",", "attrentry", ",", "attrval", ",", "name", ")", ":", "'Function to validate attribute against iLO schema\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param attrval: attribute value to be used for validation.\\n        :type attrval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "validator", "=", "None", "if", "EnumValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "EnumValidator", ".", "parse", "(", "attrentry", ")", "elif", "StringValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "StringValidator", ".", "parse", "(", "attrentry", ")", "elif", "IntegerValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "IntegerValidator", ".", "parse", "(", "attrentry", ")", "elif", "BoolValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "BoolValidator", ".", "parse", "(", "attrentry", ")", "elif", "ObjectValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "ObjectValidator", ".", "parse", "(", "attrentry", ")", "elif", "PasswordValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "PasswordValidator", ".", "parse", "(", "attrentry", ")", "else", ":", "raise", "UnknownValidatorError", "(", "attrentry", ")", "if", "validator", ":", "result", ".", "extend", "(", "validator", ".", "validate", "(", "attrval", ",", "name", ")", ")", "return", "result", "class", "BaseValidator", "(", "RisObject", ")", ":", "'Base validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "BaseValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "def", "validate", "(", "self", ")", ":", "'Overridable function for validation '", "raise", "RuntimeError", "(", "'You must override this method in your derived class'", ")", "class", "EnumValidator", "(", "BaseValidator", ")", ":", "'Enum validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "EnumValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is enumeration\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "return", "True", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "return", "True", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "return", "True", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "try", ":", "for", "possibleval", "in", "self", ".", "enum", ":", "if", "(", "possibleval", ".", "lower", "(", ")", "==", "newval", ".", "lower", "(", ")", ")", ":", "return", "result", "except", "Exception", ":", "for", "possibleval", "in", "self", ".", "Value", ":", "if", "(", "possibleval", ".", "ValueName", ".", "lower", "(", ")", "==", "str", "(", "newval", ")", ".", "lower", "(", ")", ")", ":", "return", "result", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'"], 500]
[["validator", "=", "ObjectValidator", ".", "parse", "(", "attrentry", ")", "elif", "PasswordValidator", ".", "is_type", "(", "attrentry", ")", ":", "validator", "=", "PasswordValidator", ".", "parse", "(", "attrentry", ")", "else", ":", "raise", "UnknownValidatorError", "(", "attrentry", ")", "if", "validator", ":", "result", ".", "extend", "(", "validator", ".", "validate", "(", "attrval", ",", "name", ")", ")", "return", "result", "class", "BaseValidator", "(", "RisObject", ")", ":", "'Base validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "BaseValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "def", "validate", "(", "self", ")", ":", "'Overridable function for validation '", "raise", "RuntimeError", "(", "'You must override this method in your derived class'", ")", "class", "EnumValidator", "(", "BaseValidator", ")", ":", "'Enum validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "EnumValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is enumeration\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "return", "True", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "return", "True", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "return", "True", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "try", ":", "for", "possibleval", "in", "self", ".", "enum", ":", "if", "(", "possibleval", ".", "lower", "(", ")", "==", "newval", ".", "lower", "(", ")", ")", ":", "return", "result", "except", "Exception", ":", "for", "possibleval", "in", "self", ".", "Value", ":", "if", "(", "possibleval", ".", "ValueName", ".", "lower", "(", ")", "==", "str", "(", "newval", ")", ".", "lower", "(", ")", ")", ":", "return", "result", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "try", ":", "for", "possibleval", "in", "self", ".", "enum", ":", "out", ".", "write", "(", "(", "'    %s\\n'", "%", "possibleval", ")", ")", "except", "Exception", ":", "for", "possibleval", "in", "self", ".", "Value", ":", "out", ".", "write", "(", "(", "'    %(ValueName)s\\n'", "%", "possibleval", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "BoolValidator", "(", "BaseValidator", ")", ":", "'Bool validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "BoolValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is boolean\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if"], 500]
[["%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "try", ":", "for", "possibleval", "in", "self", ".", "enum", ":", "out", ".", "write", "(", "(", "'    %s\\n'", "%", "possibleval", ")", ")", "except", "Exception", ":", "for", "possibleval", "in", "self", ".", "Value", ":", "out", ".", "write", "(", "(", "'    %(ValueName)s\\n'", "%", "possibleval", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "BoolValidator", "(", "BaseValidator", ")", ":", "'Bool validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "BoolValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is boolean\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'boolean'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "if", "(", "(", "newval", "is", "False", ")", "or", "(", "newval", "is", "True", ")", ")", ":", "return", "result", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write"], 500]
[["(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'boolean'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "if", "(", "(", "newval", "is", "False", ")", "or", "(", "newval", "is", "True", ")", ")", ":", "return", "result", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "out", ".", "write", "(", "'    True or False\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "StringValidator", "(", "BaseValidator", ")", ":", "'Constructor '", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "StringValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is string\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "'string'", "in", "value", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "if", "(", "'MinLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be at least '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'MaxLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "if", "self", "[", "'ValueExpression'", "]", ":", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "self", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self"], 500]
[["(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "out", ".", "write", "(", "'    True or False\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "StringValidator", "(", "BaseValidator", ")", ":", "'Constructor '", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "StringValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is string\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "'string'", "in", "value", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "if", "(", "'MinLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be at least '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'MaxLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "if", "self", "[", "'ValueExpression'", "]", ":", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "self", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'MinLength'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nMIN LENGTH\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MinLength)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'MaxLength'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nMAX LENGTH\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MaxLength)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "IntegerValidator", "(", "BaseValidator", ")", ":", "'Interger validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "IntegerValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is integer\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item"], 500]
[[")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'MinLength'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nMIN LENGTH\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MinLength)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'MaxLength'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nMAX LENGTH\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MaxLength)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "IntegerValidator", "(", "BaseValidator", ")", ":", "'Interger validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "IntegerValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is integer\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "(", "item", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "(", "item", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", ":", "if", "(", "(", "value", ".", "lower", "(", ")", "==", "'interger'", ")", "or", "(", "value", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "return", "True", "elif", "(", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "intval", "=", "int", "(", "newval", ")", "pat", "=", "re", ".", "compile", "(", "'0-9+'", ")", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "intval", ")", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must be an integer value'\"", "%", "self", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "if", "(", "'LowerBound'", "in", "self", ")", ":", "if", "(", "intval", "<", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be greater than or equal to '%s'\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'UpperBound'", "in", "self", ")", ":", "if", "(", "intval", ">", "int", "(", "self", "[", "'UpperBound'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than or equal to '%s'\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "("], 500]
[["in", "attrentry", "[", "'type'", "]", ":", "if", "(", "(", "item", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "(", "item", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", ":", "if", "(", "(", "value", ".", "lower", "(", ")", "==", "'interger'", ")", "or", "(", "value", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "return", "True", "elif", "(", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "intval", "=", "int", "(", "newval", ")", "pat", "=", "re", ".", "compile", "(", "'0-9+'", ")", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "intval", ")", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must be an integer value'\"", "%", "self", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "if", "(", "'LowerBound'", "in", "self", ")", ":", "if", "(", "intval", "<", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be greater than or equal to '%s'\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'UpperBound'", "in", "self", ")", ":", "if", "(", "intval", ">", "int", "(", "self", "[", "'UpperBound'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than or equal to '%s'\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "ObjectValidator", "(", "BaseValidator", ")", ":", "'Object validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "ObjectValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is object\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'object'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'object'", ")", ")", ":", "return", "True", "elif", "(", "key", ".", "lower", "(", ")", "==", "'anyof'", ")", ":", "try", ":", "if", "(", "value", "[", "0", "]", "[", "'type'", "]", "==", "'object'", ")", ":", "return", "True", "except", "Exception", ":", "continue", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")"], 500]
[["'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "ObjectValidator", "(", "BaseValidator", ")", ":", "'Object validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "ObjectValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is object\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'object'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'object'", ")", ")", ":", "return", "True", "elif", "(", "key", ".", "lower", "(", ")", "==", "'anyof'", ")", ":", "try", ":", "if", "(", "value", "[", "0", "]", "[", "'type'", "]", "==", "'object'", ")", ":", "return", "True", "except", "Exception", ":", "continue", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "PasswordValidator", "(", "BaseValidator", ")", ":", "'Password validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "PasswordValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is password\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'password'", ")", ":", "return", "True", "elif", "(", "attrentry"], 500]
[["wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "PasswordValidator", "(", "BaseValidator", ")", ":", "'Password validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "PasswordValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is password\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'password'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'password'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "if", "(", "newval", "is", "None", ")", ":", "return", "result", "if", "(", "'MinLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be at least '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'MaxLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "if", "self", "[", "'ValueExpression'", "]", ":", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "self", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out"], 500]
[["%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "class", "PasswordValidator", "(", "BaseValidator", ")", ":", "'Password validator class'", "def", "__init__", "(", "self", ",", "d", ")", ":", "super", "(", "PasswordValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "@", "staticmethod", "def", "is_type", "(", "attrentry", ")", ":", "'Validate that the type is password\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "if", "(", "'type'", "in", "attrentry", ")", ":", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "if", "(", "item", ".", "lower", "(", ")", "==", "'password'", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'password'", ")", ")", ":", "return", "True", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "return", "True", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "return", "True", "return", "False", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "result", "=", "list", "(", ")", "if", "(", "newval", "is", "None", ")", ":", "return", "result", "if", "(", "'MinLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be at least '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'MaxLength'", "in", "self", ")", ":", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than '%s' characters long\"", "%", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "if", "self", "[", "'ValueExpression'", "]", ":", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "self", ")", ",", "regentry", "=", "self", ")", ")", "return", "result", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'DisplayName'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'description'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'HelpText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'WarningText'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "for", "item", "in", "self", "[", "'type'", "]", ":", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'Type'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'MinLength'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nMIN LENGTH\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MinLength)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'MaxLength'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nMAX LENGTH\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MaxLength)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")", "elif", "(", "'readonly'", "in", "self", ")", ":", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "out", ".", "write", "(", "'\\n'", ")"], 703]
[["from", ".", "constants", "import", "MILLI_MICROS", ",", "SECOND_MICROS", ",", "MINUTE_MICROS", "import", "calendar", "from", "datetime", "import", "datetime", "from", "dateutil", "import", "parser", "from", "dateutil.tz", "import", "tzlocal", "from", ".", "error", "import", "TimeConstructionError", "from", ".", "sanedelta", "import", "SaneDelta", "import", "pytz", "MICROS_TRANSLATIONS", "=", "(", "(", "(", "'m'", ",", "'mins'", ",", "'minutes'", ",", "'epoch_mins'", ",", "'epoch_minutes'", ")", ",", "MINUTE_MICROS", ")", ",", "(", "(", "'s'", ",", "'secs'", ",", "'seconds'", ",", "'epoch_secs'", ",", "'epoch_seconds'", ")", ",", "SECOND_MICROS", ")", ",", "(", "(", "'ms'", ",", "'millis'", ",", "'milliseconds'", ",", "'epoch_millis'", ",", "'epoch_milliseconds'", ")", ",", "MILLI_MICROS", ")", ",", "(", "(", "'us'", ",", "'micros'", ",", "'microseconds'", ",", "'epoch_micros'", ",", "'epoch_microseconds'", ")", ",", "1", ")", ")", "MICROS_TRANSLATION_HASH", "=", "dict", "(", "(", "(", "alt", ",", "v", ")", "for", "(", "k", ",", "v", ")", "in", "MICROS_TRANSLATIONS", "for", "alt", "in", "k", ")", ")", "class", "SaneTime", "(", "object", ")", ":", "'\\n    A time stored in epoch microseconds, and optionally decorated with a timezone.\\n    An object of this class represents a moment in time.\\n    A moment in time experience in America/New_York is equal to the same moment in time experienced in Europe/Dublin\\n    '", "\"\\n    Why not store in millis or seconds?\\n    datetime stores things in micros, and since millis already crosses over the 32bit boundary, we\\n    might as well store everything we got in the 64 bit numbers.  This will force 32bit machines to\\n    go to long's, so maybe a little reduced performance there, but isn't everything on 64 bit now?\\n    This also avoids the unexpected scenario where two different datetimes would compare as equal\\n    when they were converted to sanetimes.  As to why-not-seconds, well that's just lame.  You can\\n    easily go to seconds or millis from sanetime by using the .s or .ms properties.\\n\\n    When you do arithmetic with sanetime you are operating on microseconds.  st + 1 creates a new\\n    sanetime that is 1 microsecond in the future from the st sanetime.\\n\\n    When you do comparisons, all comparisons are happening at the microsecond level.  You are\\n    comparing microseconds in time.\\n    \"", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "'\\n        acceptable arg inputs:\\n          1) epoch micros integer (or int like)\\n          2) a datetime\\n            NOTE!! a naive datetime is assumed to be in UTC, unless you tell this\\n            method otherwise by also passing in a tz paramter.  A timezoned datetime is \\n            preserved with the timezone it has\\n          3) a string representation that the dateutil parser can deal with\\n          4) multiple args just as datetime would accept\\n\\n        acceptable keyworded inputs:\\n          1) us = an int/long in epoch micros\\n          2) ms = an int/long in epoch millis\\n          3) s = an int/long in epoch seconds\\n          4) m = an int/long in epoch minutes\\n          5) tz = a timezone (either a pytz timezone object, a recognizeable pytz timezone string, or a dateutil tz object)\\n        '", "super", "(", "time", ",", "self", ")", ".", "__init__", "(", ")", "uss", "=", "set", "(", ")", "tzs", "=", "set", "(", ")", "naive_dt", "=", "None", "avoid_localize", "=", "False", "for", "(", "k", ",", "v", ")", "in", "kwargs", ".", "iteritems", "(", ")", ":", "if", "(", "k", "in", "(", "'tz'", ",", "'timezone'", ")", ")", ":", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "v", ")", ")", "elif", "(", "k", "in", "MICROS_TRANSLATION_HASH", ")", ":", "uss", ".", "add", "(", "(", "MICROS_TRANSLATION_HASH", "[", "k", "]", "*", "v", ")", ")", "else", ":", "raise", "TimeConstructionError", "(", "(", "'Unexpected kwarg in SaneTime constructor! (%s = %s)'", "%", "(", "k", ",", "v", ")", ")", ")", "args", "=", "list", "(", "args", ")", "if", "(", "(", "len", "(", "args", ")", ">", "2", ")", "and", "(", "len", "(", "args", ")", "<=", "8", ")", ")", ":", "args", "=", "[", "datetime", "(", "*", "args", ")", "]", "if", "(", "len", "(", "args", ")", "==", "2", ")", ":", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "args", ".", "pop", "(", ")", ")", ")", "if", "(", "len", "(", "args", ")", "==", "1", ")", ":", "arg", "=", "args", ".", "pop", "(", ")", "if", "hasattr", "(", "arg", ",", "'__int__'", ")", ":", "uss", ".", "add", "(", "int", "(", "arg", ")", ")", "if", "hasattr", "(", "arg", ",", "'tz'", ")", ":", "tzs", ".", "add", "(", "arg", ".", "tz", ")", "elif", "isinstance", "(", "arg", ",", "basestring", ")", ":", "parts", "=", "arg", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "if", "(", "(", "len", "(", "parts", ")", ">", "1", ")", "and", "parts", "[", "(", "-", "1", ")", "]", ".", "startswith", "(", "'+'", ")", ")", ":", "try", ":", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "parts", "[", "(", "-", "1", ")", "]", "[", "1", ":", "]", ")", ")", "arg", "=", "' '", ".", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "except", ":", "pass", "utc", "=", "(", "arg", ".", "endswith", "(", "'Z'", ")", "or", "arg", ".", "endswith", "(", "'+00:00'", ")", ")", "arg", "=", "parser", ".", "parse", "(", "arg", ")", "if", "arg", ".", "tzinfo", ":", "if", "utc", ":", "tzs", ".", "add", "(", "pytz", ".", "utc", ")", "arg", "=", "arg", ".", "replace", "(", "tzinfo", "=", "None", ")", "elif", "isinstance", "(", "arg", ".", "tzinfo", ",", "tzlocal", ")", ":", "arg", "=", "arg", ".", "replace", "(", "tzinfo", "=", "None", ")", "else", ":", "avoid_localize", "=", "True", "arg", "=", "arg", ".", "astimezone", "(", "pytz", ".", "utc", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "if", "(", "type", "(", "arg", ")", "==", "datetime", ")", ":", "naive_dt", "=", "arg", "if", "naive_dt", ".", "tzinfo", ":", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "str", "(", "naive_dt", ".", "tzinfo", ")", ")", ")", "naive_dt", "=", "naive_dt", ".", "replace", "(", "tzinfo", "=", "None", ")", "if", "(", "len", "(", "tzs", ")", ">", "1", ")", ":", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different timezone!  I can't possibly resolve that!  (timezones implied = %s)\"", "%", "tzs", ")", ")", "self", ".", "tz", "=", "(", "(", "len", "(", "tzs", ")", "and", "tzs", ".", "pop", "(", ")", ")", "or", "pytz", ".", "utc", ")", "if", "naive_dt", ":", "if", "avoid_localize", ":", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "naive_dt", ")", ")", "else", ":", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "self", ".", "tz", ".", "localize", "(", "naive_dt", ")", ".", "astimezone", "(", "pytz", ".", "utc", ")", ")", ")", "if", "(", "len", "(", "uss", ")", "==", "0", ")", ":", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "datetime", ".", "utcnow", "(", ")", ")", ")", "if", "(", "len", "(", "uss", ")", ">", "1", ")", ":", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different time!  I can't possibly resolve that!  (micro times implied = %s)\"", "%", "uss", ")", ")", "self", ".", "us", "=", "uss", ".", "pop", "(", ")", "if", "(", "len", "(", "args", ")", ">", "0", ")", ":", "raise", "TimeConstructionError", "(", "'Unexpected constructor arguments'", ")", "@", "property", "def", "ms", "(", "self", ")", ":", "return", "(", "self", ".", "us", "/", "MILLI_MICROS", ")", "epoch_milliseconds", "=", "epoch_millis", "=", "milliseconds", "=", "millis", "=", "ms", "@", "property", "def", "s", "(", "self", ")", ":", "return", "(", "self", ".", "us", "/", "SECOND_MICROS", ")", "epoch_seconds", "=", "epoch_secs", "=", "seconds", "=", "secs", "=", "s", "@", "property", "def", "m", "(", "self", ")", ":", "return", "(", "self", ".", "us", "/", "MINUTE_MICROS", ")", "epoch_minutes", "=", "epoch_mins", "=", "minutes", "=", "mins", "=", "m", "@", "property", "def", "micros", "(", "self", ")", ":", "return", "self", ".", "us", "epoch_microseconds", "=", "epoch_micros", "=", "microseconds", "=", "micros", "@", "property", "def", "tz_name", "(", "self", ")", ":", "return", "self", ".", "tz", ".", "zone", "@", "property", "def", "tz_abbr", "(", "self", ")", ":", "return", "self", ".", "tz", ".", "_tzname", "def", "set_tz", "(", "self", ",", "tz", ")", ":", "self", ".", "tz", "=", "self", ".", "__class__", ".", "to_timezone", "(", "tz", ")", "return", "self", "def", "with_tz", "(", "self", ",", "tz", ")", ":", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "tz", ")", "@", "property", "def", "_tuple", "(", "self", ")", ":", "return", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "def", "strftime", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "return", "self", ".", "datetime", ".", "strftime", "(", "*", "args", ",", "**", "kwargs", ")", "def", "__cmp__", "(", "self", ",", "other", ")", ":", "if", "(", "not", "hasattr", "(", "other", ",", "'__int__'", ")", ")", ":", "other", "=", "SaneTime", "(", "other", ")", "return", "cmp", "(", "self", ".", "us", ",", "int", "(", "other", ")", ")", "def", "__hash__", "(", "self", ")", ":", "return", "self", ".", "us", ".", "__hash__", "(", ")", "def", "__add__", "(", "self", ",", "operand", ")", ":", "if", "(", "not", "hasattr", "("], 0]
[[":", "arg", "=", "arg", ".", "replace", "(", "tzinfo", "=", "None", ")", "else", ":", "avoid_localize", "=", "True", "arg", "=", "arg", ".", "astimezone", "(", "pytz", ".", "utc", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "if", "(", "type", "(", "arg", ")", "==", "datetime", ")", ":", "naive_dt", "=", "arg", "if", "naive_dt", ".", "tzinfo", ":", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "str", "(", "naive_dt", ".", "tzinfo", ")", ")", ")", "naive_dt", "=", "naive_dt", ".", "replace", "(", "tzinfo", "=", "None", ")", "if", "(", "len", "(", "tzs", ")", ">", "1", ")", ":", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different timezone!  I can't possibly resolve that!  (timezones implied = %s)\"", "%", "tzs", ")", ")", "self", ".", "tz", "=", "(", "(", "len", "(", "tzs", ")", "and", "tzs", ".", "pop", "(", ")", ")", "or", "pytz", ".", "utc", ")", "if", "naive_dt", ":", "if", "avoid_localize", ":", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "naive_dt", ")", ")", "else", ":", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "self", ".", "tz", ".", "localize", "(", "naive_dt", ")", ".", "astimezone", "(", "pytz", ".", "utc", ")", ")", ")", "if", "(", "len", "(", "uss", ")", "==", "0", ")", ":", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "datetime", ".", "utcnow", "(", ")", ")", ")", "if", "(", "len", "(", "uss", ")", ">", "1", ")", ":", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different time!  I can't possibly resolve that!  (micro times implied = %s)\"", "%", "uss", ")", ")", "self", ".", "us", "=", "uss", ".", "pop", "(", ")", "if", "(", "len", "(", "args", ")", ">", "0", ")", ":", "raise", "TimeConstructionError", "(", "'Unexpected constructor arguments'", ")", "@", "property", "def", "ms", "(", "self", ")", ":", "return", "(", "self", ".", "us", "/", "MILLI_MICROS", ")", "epoch_milliseconds", "=", "epoch_millis", "=", "milliseconds", "=", "millis", "=", "ms", "@", "property", "def", "s", "(", "self", ")", ":", "return", "(", "self", ".", "us", "/", "SECOND_MICROS", ")", "epoch_seconds", "=", "epoch_secs", "=", "seconds", "=", "secs", "=", "s", "@", "property", "def", "m", "(", "self", ")", ":", "return", "(", "self", ".", "us", "/", "MINUTE_MICROS", ")", "epoch_minutes", "=", "epoch_mins", "=", "minutes", "=", "mins", "=", "m", "@", "property", "def", "micros", "(", "self", ")", ":", "return", "self", ".", "us", "epoch_microseconds", "=", "epoch_micros", "=", "microseconds", "=", "micros", "@", "property", "def", "tz_name", "(", "self", ")", ":", "return", "self", ".", "tz", ".", "zone", "@", "property", "def", "tz_abbr", "(", "self", ")", ":", "return", "self", ".", "tz", ".", "_tzname", "def", "set_tz", "(", "self", ",", "tz", ")", ":", "self", ".", "tz", "=", "self", ".", "__class__", ".", "to_timezone", "(", "tz", ")", "return", "self", "def", "with_tz", "(", "self", ",", "tz", ")", ":", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "tz", ")", "@", "property", "def", "_tuple", "(", "self", ")", ":", "return", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "def", "strftime", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "return", "self", ".", "datetime", ".", "strftime", "(", "*", "args", ",", "**", "kwargs", ")", "def", "__cmp__", "(", "self", ",", "other", ")", ":", "if", "(", "not", "hasattr", "(", "other", ",", "'__int__'", ")", ")", ":", "other", "=", "SaneTime", "(", "other", ")", "return", "cmp", "(", "self", ".", "us", ",", "int", "(", "other", ")", ")", "def", "__hash__", "(", "self", ")", ":", "return", "self", ".", "us", ".", "__hash__", "(", ")", "def", "__add__", "(", "self", ",", "operand", ")", ":", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "operand", "=", "SaneTime", "(", "operand", ")", "return", "self", ".", "__class__", "(", "(", "self", ".", "us", "+", "int", "(", "operand", ")", ")", ",", "tz", "=", "self", ".", "tz", ")", "def", "__sub__", "(", "self", ",", "operand", ")", ":", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "operand", "=", "SaneTime", "(", "operand", ")", "if", "isinstance", "(", "operand", ",", "SaneTime", ")", ":", "return", "SaneDelta", "(", "(", "self", ".", "us", "-", "int", "(", "operand", ")", ")", ")", "return", "self", ".", "__add__", "(", "(", "-", "int", "(", "operand", ")", ")", ")", "def", "__mul__", "(", "self", ",", "operand", ")", ":", "return", "(", "self", ".", "us", "*", "int", "(", "operand", ")", ")", "def", "__div__", "(", "self", ",", "operand", ")", ":", "return", "(", "self", ".", "us", "/", "int", "(", "operand", ")", ")", "def", "__int__", "(", "self", ")", ":", "return", "int", "(", "self", ".", "us", ")", "def", "__long__", "(", "self", ")", ":", "return", "long", "(", "self", ".", "us", ")", "def", "__repr__", "(", "self", ")", ":", "return", "(", "'SaneTime(%s,%s)'", "%", "(", "self", ".", "us", ",", "repr", "(", "self", ".", "tz", ")", ")", ")", "def", "__str__", "(", "self", ")", ":", "return", "unicode", "(", "self", ")", ".", "encode", "(", "'utf-8'", ")", "def", "__unicode__", "(", "self", ")", ":", "dt", "=", "self", ".", "datetime", "micros", "=", "(", "(", "'.%06d'", "%", "dt", ".", "microsecond", ")", "if", "dt", ".", "microsecond", "else", "''", ")", "time", "=", "(", "(", "' %02d:%02d:%02d%s'", "%", "(", "dt", ".", "hour", ",", "dt", ".", "minute", ",", "dt", ".", "second", ",", "micros", ")", ")", "if", "(", "dt", ".", "microsecond", "or", "dt", ".", "second", "or", "dt", ".", "minute", "or", "dt", ".", "hour", ")", "else", "''", ")", "return", "(", "'%04d-%02d-%02d%s +%s'", "%", "(", "dt", ".", "year", ",", "dt", ".", "month", ",", "dt", ".", "day", ",", "time", ",", "dt", ".", "tzinfo", ".", "zone", ")", ")", "def", "clone", "(", "self", ")", ":", "' cloning stuff '", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "@", "property", "def", "ny_str", "(", "self", ")", ":", "' a ny string '", "return", "self", ".", "ny_ndt", ".", "strftime", "(", "'%I:%M:%S%p %m/%d/%Y'", ")", "@", "property", "def", "utc_datetime", "(", "self", ")", ":", "return", "SaneTime", ".", "us_to_utc_datetime", "(", "self", ".", "us", ")", "utc_dt", "=", "utc_datetime", "@", "property", "def", "utc_naive_datetime", "(", "self", ")", ":", "return", "self", ".", "utc_datetime", ".", "replace", "(", "tzinfo", "=", "None", ")", "utc_ndt", "=", "utc_naive_datetime", "def", "to_timezoned_datetime", "(", "self", ",", "tz", ")", ":", "return", "self", ".", "utc_datetime", ".", "astimezone", "(", "SaneTime", ".", "to_timezone", "(", "tz", ")", ")", "def", "to_timezoned_naive_datetime", "(", "self", ",", "tz", ")", ":", "return", "self", ".", "to_timezoned_datetime", "(", "tz", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "@", "property", "def", "datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_datetime", "(", "self", ".", "tz", ")", "dt", "=", "datetime", "@", "property", "def", "naive_datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_naive_datetime", "(", "self", ".", "tz", ")", "ndt", "=", "naive_datetime", "@", "property", "def", "ny_datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_datetime", "(", "'America/New_York'", ")", "ny_dt", "=", "ny_datetime", "@", "property", "def", "ny_naive_datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_naive_datetime", "(", "'America/New_York'", ")", "ny_ndt", "=", "ny_naive_datetime", "@", "property", "def", "year", "(", "self"], 500]
[["=", "s", "@", "property", "def", "m", "(", "self", ")", ":", "return", "(", "self", ".", "us", "/", "MINUTE_MICROS", ")", "epoch_minutes", "=", "epoch_mins", "=", "minutes", "=", "mins", "=", "m", "@", "property", "def", "micros", "(", "self", ")", ":", "return", "self", ".", "us", "epoch_microseconds", "=", "epoch_micros", "=", "microseconds", "=", "micros", "@", "property", "def", "tz_name", "(", "self", ")", ":", "return", "self", ".", "tz", ".", "zone", "@", "property", "def", "tz_abbr", "(", "self", ")", ":", "return", "self", ".", "tz", ".", "_tzname", "def", "set_tz", "(", "self", ",", "tz", ")", ":", "self", ".", "tz", "=", "self", ".", "__class__", ".", "to_timezone", "(", "tz", ")", "return", "self", "def", "with_tz", "(", "self", ",", "tz", ")", ":", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "tz", ")", "@", "property", "def", "_tuple", "(", "self", ")", ":", "return", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "def", "strftime", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "return", "self", ".", "datetime", ".", "strftime", "(", "*", "args", ",", "**", "kwargs", ")", "def", "__cmp__", "(", "self", ",", "other", ")", ":", "if", "(", "not", "hasattr", "(", "other", ",", "'__int__'", ")", ")", ":", "other", "=", "SaneTime", "(", "other", ")", "return", "cmp", "(", "self", ".", "us", ",", "int", "(", "other", ")", ")", "def", "__hash__", "(", "self", ")", ":", "return", "self", ".", "us", ".", "__hash__", "(", ")", "def", "__add__", "(", "self", ",", "operand", ")", ":", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "operand", "=", "SaneTime", "(", "operand", ")", "return", "self", ".", "__class__", "(", "(", "self", ".", "us", "+", "int", "(", "operand", ")", ")", ",", "tz", "=", "self", ".", "tz", ")", "def", "__sub__", "(", "self", ",", "operand", ")", ":", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "operand", "=", "SaneTime", "(", "operand", ")", "if", "isinstance", "(", "operand", ",", "SaneTime", ")", ":", "return", "SaneDelta", "(", "(", "self", ".", "us", "-", "int", "(", "operand", ")", ")", ")", "return", "self", ".", "__add__", "(", "(", "-", "int", "(", "operand", ")", ")", ")", "def", "__mul__", "(", "self", ",", "operand", ")", ":", "return", "(", "self", ".", "us", "*", "int", "(", "operand", ")", ")", "def", "__div__", "(", "self", ",", "operand", ")", ":", "return", "(", "self", ".", "us", "/", "int", "(", "operand", ")", ")", "def", "__int__", "(", "self", ")", ":", "return", "int", "(", "self", ".", "us", ")", "def", "__long__", "(", "self", ")", ":", "return", "long", "(", "self", ".", "us", ")", "def", "__repr__", "(", "self", ")", ":", "return", "(", "'SaneTime(%s,%s)'", "%", "(", "self", ".", "us", ",", "repr", "(", "self", ".", "tz", ")", ")", ")", "def", "__str__", "(", "self", ")", ":", "return", "unicode", "(", "self", ")", ".", "encode", "(", "'utf-8'", ")", "def", "__unicode__", "(", "self", ")", ":", "dt", "=", "self", ".", "datetime", "micros", "=", "(", "(", "'.%06d'", "%", "dt", ".", "microsecond", ")", "if", "dt", ".", "microsecond", "else", "''", ")", "time", "=", "(", "(", "' %02d:%02d:%02d%s'", "%", "(", "dt", ".", "hour", ",", "dt", ".", "minute", ",", "dt", ".", "second", ",", "micros", ")", ")", "if", "(", "dt", ".", "microsecond", "or", "dt", ".", "second", "or", "dt", ".", "minute", "or", "dt", ".", "hour", ")", "else", "''", ")", "return", "(", "'%04d-%02d-%02d%s +%s'", "%", "(", "dt", ".", "year", ",", "dt", ".", "month", ",", "dt", ".", "day", ",", "time", ",", "dt", ".", "tzinfo", ".", "zone", ")", ")", "def", "clone", "(", "self", ")", ":", "' cloning stuff '", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "@", "property", "def", "ny_str", "(", "self", ")", ":", "' a ny string '", "return", "self", ".", "ny_ndt", ".", "strftime", "(", "'%I:%M:%S%p %m/%d/%Y'", ")", "@", "property", "def", "utc_datetime", "(", "self", ")", ":", "return", "SaneTime", ".", "us_to_utc_datetime", "(", "self", ".", "us", ")", "utc_dt", "=", "utc_datetime", "@", "property", "def", "utc_naive_datetime", "(", "self", ")", ":", "return", "self", ".", "utc_datetime", ".", "replace", "(", "tzinfo", "=", "None", ")", "utc_ndt", "=", "utc_naive_datetime", "def", "to_timezoned_datetime", "(", "self", ",", "tz", ")", ":", "return", "self", ".", "utc_datetime", ".", "astimezone", "(", "SaneTime", ".", "to_timezone", "(", "tz", ")", ")", "def", "to_timezoned_naive_datetime", "(", "self", ",", "tz", ")", ":", "return", "self", ".", "to_timezoned_datetime", "(", "tz", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "@", "property", "def", "datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_datetime", "(", "self", ".", "tz", ")", "dt", "=", "datetime", "@", "property", "def", "naive_datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_naive_datetime", "(", "self", ".", "tz", ")", "ndt", "=", "naive_datetime", "@", "property", "def", "ny_datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_datetime", "(", "'America/New_York'", ")", "ny_dt", "=", "ny_datetime", "@", "property", "def", "ny_naive_datetime", "(", "self", ")", ":", "return", "self", ".", "to_timezoned_naive_datetime", "(", "'America/New_York'", ")", "ny_ndt", "=", "ny_naive_datetime", "@", "property", "def", "year", "(", "self", ")", ":", "return", "self", ".", "dt", ".", "year", "@", "property", "def", "month", "(", "self", ")", ":", "return", "self", ".", "dt", ".", "month", "@", "property", "def", "day", "(", "self", ")", ":", "return", "self", ".", "dt", ".", "day", "@", "property", "def", "hour", "(", "self", ")", ":", "return", "self", ".", "dt", ".", "hour", "@", "property", "def", "minute", "(", "self", ")", ":", "return", "self", ".", "dt", ".", "minute", "@", "property", "def", "second", "(", "self", ")", ":", "return", "self", ".", "dt", ".", "second", "@", "property", "def", "microsecond", "(", "self", ")", ":", "return", "self", ".", "dt", ".", "microsecond", "@", "classmethod", "def", "utc_datetime_to_us", "(", "kls", ",", "dt", ")", ":", "return", "(", "(", "calendar", ".", "timegm", "(", "dt", ".", "timetuple", "(", ")", ")", "*", "(", "1000", "**", "2", ")", ")", "+", "dt", ".", "microsecond", ")", "@", "classmethod", "def", "us_to_utc_datetime", "(", "kls", ",", "us", ")", ":", "return", "pytz", ".", "utc", ".", "localize", "(", "datetime", ".", "utcfromtimestamp", "(", "(", "us", "/", "(", "10", "**", "6", ")", ")", ")", ")", ".", "replace", "(", "microsecond", "=", "(", "us", "%", "(", "10", "**", "6", ")", ")", ")", "@", "classmethod", "def", "to_timezone", "(", "kls", ",", "tz", ")", ":", "if", "(", "not", "isinstance", "(", "tz", ",", "basestring", ")", ")", ":", "return", "tz", "return", "pytz", ".", "timezone", "(", "tz", ")", "def", "ntime", "(", "*", "args", ",", "**", "kwargs", ")", ":", "if", "args", ":", "if", "(", "args", "[", "0", "]", "is", "None", ")", ":", "return", "None", "elif", "kwargs", ":", "if", "(", "None", "in", "[", "v", "for", "(", "k", ",", "v", ")", "in", "kwargs", ".", "iteritems", "(", ")", "if", "(", "k", "!=", "'tz'", ")", "]", ")", ":", "return", "None", "return", "SaneTime", "(", "*", "args", ",", "**", "kwargs", ")", "time", "=", "sanetime", "=", "SaneTime", "nsanetime", "=", "ntime"], 722]
[["'\\nFrom ericflo (https://gist.github.com/629508)\\n\\njQuery templates use constructs like:\\n\\n    {{if condition}} print something{{/if}}\\n\\nThis, of course, completely screws up Django templates,\\nbecause Django thinks {{ and }} mean something.\\n\\nWrap {% verbatim %} and {% endverbatim %} around those\\nblocks of jQuery templates and this will try its best\\nto output the contents with no changes.\\n'", "from", "django", "import", "template", "register", "=", "template", ".", "Library", "(", ")", "class", "VerbatimNode", "(", "template", ".", "Node", ")", ":", "def", "__init__", "(", "self", ",", "text", ")", ":", "self", ".", "text", "=", "text", "def", "render", "(", "self", ",", "context", ")", ":", "return", "self", ".", "text", "@", "register", ".", "tag", "def", "verbatim", "(", "parser", ",", "token", ")", ":", "text", "=", "[", "]", "while", "1", ":", "token", "=", "parser", ".", "tokens", ".", "pop", "(", "0", ")", "if", "(", "token", ".", "contents", "==", "'endverbatim'", ")", ":", "break", "if", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_VAR", ")", ":", "text", ".", "append", "(", "'{{'", ")", "elif", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_BLOCK", ")", ":", "text", ".", "append", "(", "'{%'", ")", "text", ".", "append", "(", "token", ".", "contents", ")", "if", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_VAR", ")", ":", "text", ".", "append", "(", "'}}'", ")", "elif", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_BLOCK", ")", ":", "text", ".", "append", "(", "'%}'", ")", "return", "VerbatimNode", "(", "''", ".", "join", "(", "text", ")", ")"], 0]
[["from", "django.shortcuts", "import", "render_to_response", "from", "django.template", "import", "RequestContext", "import", "pdb"], 0]
[["from", "werkzeug.utils", "import", "cached_property", "from", "base", "import", "db", ",", "Base", "from", "cluster", "import", "Cluster", "class", "Proxy", "(", "Base", ")", ":", "__tablename__", "=", "'proxy'", "host", "=", "db", ".", "Column", "(", "db", ".", "String", "(", "255", ")", ",", "nullable", "=", "False", ")", "port", "=", "db", ".", "Column", "(", "db", ".", "Integer", ",", "nullable", "=", "False", ")", "eru_container_id", "=", "db", ".", "Column", "(", "db", ".", "String", "(", "64", ")", ",", "index", "=", "True", ")", "cluster_id", "=", "db", ".", "Column", "(", "db", ".", "ForeignKey", "(", "Cluster", ".", "id", ")", ",", "index", "=", "True", ")", "suppress_alert", "=", "db", ".", "Column", "(", "db", ".", "Integer", ",", "nullable", "=", "False", ",", "default", "=", "1", ")", "__table_args__", "=", "(", "db", ".", "Index", "(", "'address'", ",", "'host'", ",", "'port'", ",", "unique", "=", "True", ")", ",", ")", "@", "cached_property", "def", "eru_deployed", "(", "self", ")", ":", "return", "(", "self", ".", "eru_container_id", "is not", "None", ")", "@", "cached_property", "def", "eru_info", "(", "self", ")", ":", "import", "eru_utils", "if", "(", "(", "eru_utils", ".", "eru_client", "is", "None", ")", "or", "(", "not", "self", ".", "eru_deployed", ")", ")", ":", "return", "None", "return", "eru_utils", ".", "eru_client", ".", "get_container", "(", "self", ".", "eru_container_id", ")", "@", "cached_property", "def", "cluster", "(", "self", ")", ":", "return", "Cluster", ".", "query", ".", "get", "(", "self", ".", "cluster_id", ")", "def", "get_by_host_port", "(", "host", ",", "port", ")", ":", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "(", "Proxy", ".", "host", "==", "host", ")", ",", "(", "Proxy", ".", "port", "==", "port", ")", ")", ".", "first", "(", ")", "def", "del_by_host_port", "(", "host", ",", "port", ")", ":", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "(", "Proxy", ".", "host", "==", "host", ")", ",", "(", "Proxy", ".", "port", "==", "port", ")", ")", ".", "delete", "(", ")", "def", "get_or_create", "(", "host", ",", "port", ",", "cluster_id", "=", "None", ")", ":", "p", "=", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "(", "Proxy", ".", "host", "==", "host", ")", ",", "(", "Proxy", ".", "port", "==", "port", ")", ")", ".", "first", "(", ")", "if", "(", "p", "is", "None", ")", ":", "p", "=", "Proxy", "(", "host", "=", "host", ",", "port", "=", "port", ",", "cluster_id", "=", "cluster_id", ")", "db", ".", "session", ".", "add", "(", "p", ")", "db", ".", "session", ".", "flush", "(", ")", "return", "p", "def", "create_eru_instance", "(", "host", ",", "port", ",", "cluster_id", ",", "eru_container_id", ")", ":", "node", "=", "Proxy", "(", "host", "=", "host", ",", "port", "=", "port", ",", "eru_container_id", "=", "eru_container_id", ",", "cluster_id", "=", "cluster_id", ")", "db", ".", "session", ".", "add", "(", "node", ")", "db", ".", "session", ".", "flush", "(", ")", "return", "node", "def", "delete_eru_instance", "(", "eru_container_id", ")", ":", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "(", "Proxy", ".", "eru_container_id", "==", "eru_container_id", ")", ")", ".", "delete", "(", ")", "def", "get_eru_by_container_id", "(", "eru_container_id", ")", ":", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "(", "Proxy", ".", "eru_container_id", "==", "eru_container_id", ")", ")", ".", "first", "(", ")", "def", "list_all", "(", ")", ":", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "all", "(", ")", "def", "list_eru_proxies", "(", "offset", ",", "limit", ")", ":", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "(", "Proxy", ".", "eru_container_id", "!=", "None", ")", ")", ".", "order_by", "(", "Proxy", ".", "id", ".", "desc", "(", ")", ")", ".", "offset", "(", "offset", ")", ".", "limit", "(", "limit", ")", ".", "all", "(", ")", "def", "list_ip", "(", ")", ":", "return", "db", ".", "session", ".", "query", "(", "Proxy", ".", "host", ",", "Proxy", ".", "port", ")", ".", "all", "(", ")"], 0]
[["' This module handles everything related to the tracker behaviour. '", "import", "json", "import", "time", "import", "urllib2", "import", "logging", "from", "view_controls.view", "import", "DrawingTool", ",", "Event", "from", "game_objects.item", "import", "Item", "from", "game_objects.state", "import", "TrackerState", ",", "TrackerStateEncoder", "from", "log_parser", "import", "LogParser", "from", "options", "import", "Options", "class", "IsaacTracker", "(", "object", ")", ":", "' The main class of the program '", "def", "__init__", "(", "self", ",", "logging_level", "=", "logging", ".", "INFO", ",", "read_timer", "=", "1", ")", ":", "self", ".", "read_timer", "=", "read_timer", "self", ".", "file_prefix", "=", "'../'", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "'tracker'", ")", "self", ".", "log", ".", "addHandler", "(", "logging", ".", "FileHandler", "(", "(", "self", ".", "file_prefix", "+", "'tracker_log.txt'", ")", ",", "mode", "=", "'w'", ")", ")", "self", ".", "log", ".", "setLevel", "(", "logging_level", ")", "with", "open", "(", "(", "self", ".", "file_prefix", "+", "'items.json'", ")", ",", "'r'", ")", "as", "items_file", ":", "Item", ".", "items_info", "=", "json", ".", "load", "(", "items_file", ")", "with", "open", "(", "(", "self", ".", "file_prefix", "+", "'version.txt'", ")", ",", "'r'", ")", "as", "f", ":", "self", ".", "tracker_version", "=", "f", ".", "read", "(", ")", "Options", "(", ")", ".", "load_options", "(", "(", "self", ".", "file_prefix", "+", "'options.json'", ")", ")", "def", "__del__", "(", "self", ")", ":", "Options", "(", ")", ".", "save_options", "(", "(", "self", ".", "file_prefix", "+", "'options.json'", ")", ")", "def", "check_for_update", "(", "self", ")", ":", "' Returns text to put in the title bar '", "try", ":", "latest", "=", "'https://api.github.com/repos/Hyphen-ated/RebirthItemTracker/releases/latest'", "github_info_json", "=", "urllib2", ".", "urlopen", "(", "latest", ")", ".", "read", "(", ")", "info", "=", "json", ".", "loads", "(", "github_info_json", ")", "latest_version", "=", "info", "[", "'name'", "]", "title_text", "=", "(", "' v'", "+", "self", ".", "tracker_version", ")", "if", "(", "latest_version", "!=", "self", ".", "tracker_version", ")", ":", "title_text", "+", "=", "' (new version available)'", "return", "title_text", "except", "Exception", "as", "e", ":", "self", ".", "log", ".", "debug", "(", "(", "'Failed to find update info: '", "+", "e", ".", "message", ")", ")", "return", "''", "def", "run", "(", "self", ")", ":", "' The main routine which controls everything '", "update_notifier", "=", "self", ".", "check_for_update", "(", ")", "framecount", "=", "0", "drawing_tool", "=", "DrawingTool", "(", "self", ".", "file_prefix", ")", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ")", "parser", "=", "LogParser", "(", "self", ".", "file_prefix", ",", "self", ".", "tracker_version", ")", "opt", "=", "Options", "(", ")", "log", "=", "logging", ".", "getLogger", "(", "'tracker'", ")", "event_result", "=", "None", "state", "=", "None", "read_from_server", "=", "opt", ".", "read_from_server", "write_to_server", "=", "opt", ".", "write_to_server", "state_version", "=", "(", "-", "1", ")", "twitch_username", "=", "None", "new_states_queue", "=", "[", "]", "screen_error_message", "=", "None", "while", "(", "event_result", "!=", "Event", ".", "DONE", ")", ":", "event_result", "=", "drawing_tool", ".", "handle_events", "(", ")", "if", "(", "(", "opt", ".", "read_from_server", "!=", "read_from_server", ")", "or", "(", "opt", ".", "twitch_name", "!=", "twitch_username", ")", ")", ":", "twitch_username", "=", "opt", ".", "twitch_name", "read_from_server", "=", "opt", ".", "read_from_server", "new_states_queue", "=", "[", "]", "if", "read_from_server", ":", "state_version", "=", "(", "-", "1", ")", "state", "=", "None", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ")", "else", ":", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ")", "if", "(", "opt", ".", "write_to_server", "and", "(", "opt", ".", "write_to_server", "!=", "write_to_server", ")", ")", ":", "write_to_server", "=", "True", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "uploading", "=", "True", ")", "if", "(", "not", "opt", ".", "write_to_server", ")", ":", "write_to_server", "=", "False", "if", "opt", ".", "read_from_server", ":", "update_timer", "=", "2", "else", ":", "update_timer", "=", "self", ".", "read_timer", "if", "(", "event_result", "==", "Event", ".", "OPTIONS_UPDATE", ")", ":", "framecount", "=", "0", "screen_error_message", "=", "None", "if", "(", "state", "is not", "None", ")", ":", "state", ".", "modified", "=", "True", "if", "(", "(", "framecount", "%", "int", "(", "(", "Options", "(", ")", ".", "framerate_limit", "*", "update_timer", ")", ")", ")", "==", "0", ")", ":", "if", "opt", ".", "read_from_server", ":", "base_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/user/'", ")", "+", "opt", ".", "twitch_name", ")", "json_dict", "=", "None", "try", ":", "json_version", "=", "urllib2", ".", "urlopen", "(", "(", "base_url", "+", "'/version'", ")", ")", ".", "read", "(", ")", "if", "(", "int", "(", "json_version", ")", ">", "state_version", ")", ":", "json_state", "=", "urllib2", ".", "urlopen", "(", "base_url", ")", ".", "read", "(", ")", "json_dict", "=", "json", ".", "loads", "(", "json_state", ")", "new_state", "=", "TrackerState", ".", "from_json", "(", "json_dict", ")", "if", "(", "new_state", "is", "None", ")", ":", "raise", "Exception", "state_version", "=", "int", "(", "json_version", ")", "new_states_queue", ".", "append", "(", "(", "state_version", ",", "new_state", ")", ")", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ",", "read_delay", "=", "opt", ".", "read_delay", ")", "except", "Exception", ":", "state", "=", "None", "log", ".", "error", "(", "\"Couldn't load state from server\"", ")", "import", "traceback", "log", ".", "error", "(", "traceback", ".", "format_exc", "(", ")", ")", "if", "(", "json_dict", "is not", "None", ")", ":", "their_version", "=", "''", "if", "(", "'tracker_version'", "in", "json_dict", ")", ":", "their_version", "=", "json_dict", "[", "'tracker_version'", "]", "else", ":", "their_version", "=", "'0.10-beta1'", "if", "(", "their_version", "!=", "self", ".", "tracker_version", ")", ":", "screen_error_message", "=", "(", "(", "(", "'They are using tracker version '", "+", "their_version", ")", "+", "' but you have '", ")", "+", "self", ".", "tracker_version", ")", "else", ":", "force_draw", "=", "(", "state", "and", "state", ".", "modified", ")", "state", "=", "parser", ".", "parse", "(", ")", "if", "force_draw", ":", "state", ".", "modified", "=", "True", "if", "(", "write_to_server", "and", "(", "not", "opt", ".", "trackerserver_authkey", ")", ")", ":", "screen_error_message", "=", "'Your authkey is blank. Get a new authkey in the options menu and paste it into the authkey text field.'", "if", "(", "(", "state", "is not", "None", ")", "and", "write_to_server", "and", "state", ".", "modified", "and", "(", "screen_error_message", "is", "None", ")", ")", ":", "opener", "=", "urllib2", ".", "build_opener", "(", "urllib2", ".", "HTTPHandler", ")", "put_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/update/'", ")", "+", "opt", ".", "trackerserver_authkey", ")", "json_string", "=", "json", ".", "dumps", "(", "state", ",", "cls", "=", "TrackerStateEncoder", ",", "sort_keys", "=", "True", ")", "request", "=", "urllib2", ".", "Request", "(", "put_url", ",", "data", "=", "json_string", ")", "request", ".", "add_header", "(", "'Content-Type'", ",", "'application/json'", ")", "request", ".", "get_method", "=", "(", "lambda", ":", "'PUT'", ")", "try", ":", "result", "=", "opener", ".", "open", "(", "request", ")", "result_json", "=", "json", ".", "loads", "(", "result", ".", "read", "(", ")", ")", "updated_user", "=", "result_json", "[", "'updated_user'", "]", "if", "(", "updated_user", "is", "None", ")", ":", "screen_error_message", "=", "\"The server didn't recognize you. Try getting a new authkey in the options menu.\"", "else", ":", "screen_error_message", "=", "None", "except", "Exception", "as", "e", ":", "import", "traceback", "errmsg", "=", "traceback", ".", "format_exc", "(", ")", "log", ".", "error", "(", "\"ERROR: Couldn't send item info to server\"", ")", "log", ".", "error", "(", "errmsg", ")", "screen_error_message", "=", "\"ERROR: Couldn't send item info to server, check tracker_log.txt\"", "if", "(", "len", "(", "new_states_queue", ")", ">", "0", ")", ":", "(", "state_timestamp", ",", "new_state", ")", "=", "new_states_queue", "[", "0", "]", "current_timestamp", "=", "int", "(", "time", ".", "time", "(", ")", ")", "if", "(", "(", "(", "current_timestamp", "-", "state_timestamp", ")", ">="], 0]
[[")", ".", "load_options", "(", "(", "self", ".", "file_prefix", "+", "'options.json'", ")", ")", "def", "__del__", "(", "self", ")", ":", "Options", "(", ")", ".", "save_options", "(", "(", "self", ".", "file_prefix", "+", "'options.json'", ")", ")", "def", "check_for_update", "(", "self", ")", ":", "' Returns text to put in the title bar '", "try", ":", "latest", "=", "'https://api.github.com/repos/Hyphen-ated/RebirthItemTracker/releases/latest'", "github_info_json", "=", "urllib2", ".", "urlopen", "(", "latest", ")", ".", "read", "(", ")", "info", "=", "json", ".", "loads", "(", "github_info_json", ")", "latest_version", "=", "info", "[", "'name'", "]", "title_text", "=", "(", "' v'", "+", "self", ".", "tracker_version", ")", "if", "(", "latest_version", "!=", "self", ".", "tracker_version", ")", ":", "title_text", "+", "=", "' (new version available)'", "return", "title_text", "except", "Exception", "as", "e", ":", "self", ".", "log", ".", "debug", "(", "(", "'Failed to find update info: '", "+", "e", ".", "message", ")", ")", "return", "''", "def", "run", "(", "self", ")", ":", "' The main routine which controls everything '", "update_notifier", "=", "self", ".", "check_for_update", "(", ")", "framecount", "=", "0", "drawing_tool", "=", "DrawingTool", "(", "self", ".", "file_prefix", ")", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ")", "parser", "=", "LogParser", "(", "self", ".", "file_prefix", ",", "self", ".", "tracker_version", ")", "opt", "=", "Options", "(", ")", "log", "=", "logging", ".", "getLogger", "(", "'tracker'", ")", "event_result", "=", "None", "state", "=", "None", "read_from_server", "=", "opt", ".", "read_from_server", "write_to_server", "=", "opt", ".", "write_to_server", "state_version", "=", "(", "-", "1", ")", "twitch_username", "=", "None", "new_states_queue", "=", "[", "]", "screen_error_message", "=", "None", "while", "(", "event_result", "!=", "Event", ".", "DONE", ")", ":", "event_result", "=", "drawing_tool", ".", "handle_events", "(", ")", "if", "(", "(", "opt", ".", "read_from_server", "!=", "read_from_server", ")", "or", "(", "opt", ".", "twitch_name", "!=", "twitch_username", ")", ")", ":", "twitch_username", "=", "opt", ".", "twitch_name", "read_from_server", "=", "opt", ".", "read_from_server", "new_states_queue", "=", "[", "]", "if", "read_from_server", ":", "state_version", "=", "(", "-", "1", ")", "state", "=", "None", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ")", "else", ":", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ")", "if", "(", "opt", ".", "write_to_server", "and", "(", "opt", ".", "write_to_server", "!=", "write_to_server", ")", ")", ":", "write_to_server", "=", "True", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "uploading", "=", "True", ")", "if", "(", "not", "opt", ".", "write_to_server", ")", ":", "write_to_server", "=", "False", "if", "opt", ".", "read_from_server", ":", "update_timer", "=", "2", "else", ":", "update_timer", "=", "self", ".", "read_timer", "if", "(", "event_result", "==", "Event", ".", "OPTIONS_UPDATE", ")", ":", "framecount", "=", "0", "screen_error_message", "=", "None", "if", "(", "state", "is not", "None", ")", ":", "state", ".", "modified", "=", "True", "if", "(", "(", "framecount", "%", "int", "(", "(", "Options", "(", ")", ".", "framerate_limit", "*", "update_timer", ")", ")", ")", "==", "0", ")", ":", "if", "opt", ".", "read_from_server", ":", "base_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/user/'", ")", "+", "opt", ".", "twitch_name", ")", "json_dict", "=", "None", "try", ":", "json_version", "=", "urllib2", ".", "urlopen", "(", "(", "base_url", "+", "'/version'", ")", ")", ".", "read", "(", ")", "if", "(", "int", "(", "json_version", ")", ">", "state_version", ")", ":", "json_state", "=", "urllib2", ".", "urlopen", "(", "base_url", ")", ".", "read", "(", ")", "json_dict", "=", "json", ".", "loads", "(", "json_state", ")", "new_state", "=", "TrackerState", ".", "from_json", "(", "json_dict", ")", "if", "(", "new_state", "is", "None", ")", ":", "raise", "Exception", "state_version", "=", "int", "(", "json_version", ")", "new_states_queue", ".", "append", "(", "(", "state_version", ",", "new_state", ")", ")", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ",", "read_delay", "=", "opt", ".", "read_delay", ")", "except", "Exception", ":", "state", "=", "None", "log", ".", "error", "(", "\"Couldn't load state from server\"", ")", "import", "traceback", "log", ".", "error", "(", "traceback", ".", "format_exc", "(", ")", ")", "if", "(", "json_dict", "is not", "None", ")", ":", "their_version", "=", "''", "if", "(", "'tracker_version'", "in", "json_dict", ")", ":", "their_version", "=", "json_dict", "[", "'tracker_version'", "]", "else", ":", "their_version", "=", "'0.10-beta1'", "if", "(", "their_version", "!=", "self", ".", "tracker_version", ")", ":", "screen_error_message", "=", "(", "(", "(", "'They are using tracker version '", "+", "their_version", ")", "+", "' but you have '", ")", "+", "self", ".", "tracker_version", ")", "else", ":", "force_draw", "=", "(", "state", "and", "state", ".", "modified", ")", "state", "=", "parser", ".", "parse", "(", ")", "if", "force_draw", ":", "state", ".", "modified", "=", "True", "if", "(", "write_to_server", "and", "(", "not", "opt", ".", "trackerserver_authkey", ")", ")", ":", "screen_error_message", "=", "'Your authkey is blank. Get a new authkey in the options menu and paste it into the authkey text field.'", "if", "(", "(", "state", "is not", "None", ")", "and", "write_to_server", "and", "state", ".", "modified", "and", "(", "screen_error_message", "is", "None", ")", ")", ":", "opener", "=", "urllib2", ".", "build_opener", "(", "urllib2", ".", "HTTPHandler", ")", "put_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/update/'", ")", "+", "opt", ".", "trackerserver_authkey", ")", "json_string", "=", "json", ".", "dumps", "(", "state", ",", "cls", "=", "TrackerStateEncoder", ",", "sort_keys", "=", "True", ")", "request", "=", "urllib2", ".", "Request", "(", "put_url", ",", "data", "=", "json_string", ")", "request", ".", "add_header", "(", "'Content-Type'", ",", "'application/json'", ")", "request", ".", "get_method", "=", "(", "lambda", ":", "'PUT'", ")", "try", ":", "result", "=", "opener", ".", "open", "(", "request", ")", "result_json", "=", "json", ".", "loads", "(", "result", ".", "read", "(", ")", ")", "updated_user", "=", "result_json", "[", "'updated_user'", "]", "if", "(", "updated_user", "is", "None", ")", ":", "screen_error_message", "=", "\"The server didn't recognize you. Try getting a new authkey in the options menu.\"", "else", ":", "screen_error_message", "=", "None", "except", "Exception", "as", "e", ":", "import", "traceback", "errmsg", "=", "traceback", ".", "format_exc", "(", ")", "log", ".", "error", "(", "\"ERROR: Couldn't send item info to server\"", ")", "log", ".", "error", "(", "errmsg", ")", "screen_error_message", "=", "\"ERROR: Couldn't send item info to server, check tracker_log.txt\"", "if", "(", "len", "(", "new_states_queue", ")", ">", "0", ")", ":", "(", "state_timestamp", ",", "new_state", ")", "=", "new_states_queue", "[", "0", "]", "current_timestamp", "=", "int", "(", "time", ".", "time", "(", ")", ")", "if", "(", "(", "(", "current_timestamp", "-", "state_timestamp", ")", ">=", "opt", ".", "read_delay", ")", "or", "(", "state", "is", "None", ")", ")", ":", "state", "=", "new_state", "new_states_queue", ".", "pop", "(", "0", ")", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ",", "read_delay", "=", "opt", ".", "read_delay", ")", "if", "(", "(", "state", "is", "None", ")", "and", "(", "screen_error_message", "is", "None", ")", ")", ":", "if", "read_from_server", ":", "screen_error_message", "=", "'Unable to read state from server. Please verify your options setup and tracker_log.txt'", "else", ":", "screen_error_message", "=", "'log.txt not found. Put the RebirthItemTracker folder inside the isaac folder, next to log.txt'", "if", "(", "screen_error_message", "is not", "None", ")", ":", "drawing_tool", ".", "write_error_message", "(", "screen_error_message", ")", "else", ":", "drawing_tool", ".", "draw_state", "(", "state", ")", "drawing_tool", ".", "tick", "(", ")", "framecount", "+", "=", "1", "drawing_tool", ".", "save_window_position", "(", ")", "def", "main", "(", ")", ":", "' Main '", "try", ":", "rt", "=", "IsaacTracker", "(", ")", "rt", ".", "run", "(", ")", "except", "Exception", ":", "import", "traceback", "errmsg", "=", "traceback", ".", "format_exc", "(", ")", "print", "(", "errmsg", ")", "logging", ".", "getLogger", "(", "'tracker'", ")", ".", "error", "(", "errmsg", ")", "if", "(", "__name__", "==", "'__main__'", ")", ":", "main", "(", ")"], 840]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "from", "collections", "import", "OrderedDict", "from", "brainstorm.layers.base_layer", "import", "Layer", "from", "brainstorm.structure.buffer_structure", "import", "BufferStructure", ",", "StructureTemplate", "from", "brainstorm.structure.construction", "import", "ConstructionWrapper", "from", "brainstorm.utils", "import", "flatten_all_but_last", "def", "BatchNorm", "(", "name", "=", "None", ",", "decay", "=", "0.9", ",", "epsilon", "=", "1e-05", ")", ":", "'Create a BatchNormalization layer.\\n\\n    This layer implements batch normalization over the last (right-most)\\n    dimension. Thus, it can be use with both fully connected and convolutional\\n    layers (but only with data in NHWC format).\\n    '", "return", "ConstructionWrapper", ".", "create", "(", "BatchNormLayerImpl", ",", "name", "=", "name", ",", "decay", "=", "decay", ",", "epsilon", "=", "epsilon", ")", "class", "BatchNormLayerImpl", "(", "Layer", ")", ":", "expected_inputs", "=", "{", "'default'", ":", "StructureTemplate", "(", "'T'", ",", "'B'", ",", "'...'", ")", "}", "expected_kwargs", "=", "{", "'decay'", ",", "'epsilon'", "}", "def", "setup", "(", "self", ",", "kwargs", ",", "in_shapes", ")", ":", "self", ".", "epsilon", "=", "kwargs", ".", "get", "(", "'epsilon'", ",", "1e-05", ")", "self", ".", "decay", "=", "kwargs", ".", "get", "(", "'decay'", ",", "0.9", ")", "assert", "(", "0.0", "<=", "self", ".", "decay", "<=", "1.0", ")", ",", "'Decay must be between 0 and 1.'", "outputs", "=", "OrderedDict", "(", ")", "outputs", "[", "'default'", "]", "=", "in_shapes", "[", "'default'", "]", "parameters", "=", "OrderedDict", "(", ")", "buf", "=", "BufferStructure", "(", "self", ".", "in_shapes", "[", "'default'", "]", ".", "feature_shape", "[", "(", "-", "1", ")", "]", ")", "parameters", "[", "'gamma'", "]", "=", "buf", "parameters", "[", "'beta'", "]", "=", "buf", "parameters", "[", "'mu'", "]", "=", "buf", "parameters", "[", "'sigma'", "]", "=", "buf", "internals", "=", "OrderedDict", "(", ")", "internals", "[", "'sigma_b'", "]", "=", "buf", "internals", "[", "'centered'", "]", "=", "self", ".", "in_shapes", "[", "'default'", "]", "internals", "[", "'x_hat'", "]", "=", "self", ".", "in_shapes", "[", "'default'", "]", "return", "(", "outputs", ",", "parameters", ",", "internals", ")", "def", "forward_pass", "(", "self", ",", "buffers", ",", "training_pass", "=", "True", ")", ":", "_h", "=", "self", ".", "handler", "(", "sigma_b", ",", "centered", ",", "x_hat", ")", "=", "buffers", ".", "internals", "(", "gamma", ",", "beta", ",", "mu", ",", "sigma", ")", "=", "buffers", ".", "parameters", "inputs", "=", "flatten_all_but_last", "(", "buffers", ".", "inputs", ".", "default", ")", "centered", "=", "flatten_all_but_last", "(", "centered", ")", "x_hat", "=", "flatten_all_but_last", "(", "x_hat", ")", "out", "=", "flatten_all_but_last", "(", "buffers", ".", "outputs", ".", "default", ")", "m", "=", "inputs", ".", "shape", "[", "0", "]", "if", "training_pass", ":", "mu_b", "=", "sigma_b", "_h", ".", "sum_t", "(", "inputs", ",", "0", ",", "mu_b", ")", "_h", ".", "mult_st", "(", "(", "(", "-", "1.0", ")", "/", "m", ")", ",", "mu_b", ",", "mu_b", ")", "_h", ".", "mult_st", "(", "self", ".", "decay", ",", "mu", ",", "mu", ")", "_h", ".", "mult_add_st", "(", "(", "1.0", "-", "self", ".", "decay", ")", ",", "mu_b", ",", "mu", ")", "mu", "=", "mu_b", "_h", ".", "add_mv", "(", "inputs", ",", "mu", ".", "reshape", "(", "(", "1", ",", "mu", ".", "size", ")", ")", ",", "centered", ")", "if", "training_pass", ":", "sigma2", "=", "sigma_b", "centered2", "=", "x_hat", "_h", ".", "mult_tt", "(", "centered", ",", "centered", ",", "centered2", ")", "_h", ".", "sum_t", "(", "centered2", ",", "0", ",", "sigma2", ")", "_h", ".", "mult_st", "(", "(", "1.0", "/", "m", ")", ",", "sigma2", ",", "sigma2", ")", "_h", ".", "add_st", "(", "self", ".", "epsilon", ",", "sigma2", ",", "sigma2", ")", "_h", ".", "sqrt_t", "(", "sigma2", ",", "sigma_b", ")", "_h", ".", "mult_st", "(", "self", ".", "decay", ",", "sigma", ",", "sigma", ")", "_h", ".", "mult_add_st", "(", "(", "1.0", "-", "self", ".", "decay", ")", ",", "sigma_b", ",", "sigma", ")", "sigma", "=", "sigma_b", "_h", ".", "divide_mv", "(", "centered", ",", "sigma", ".", "reshape", "(", "(", "1", ",", "sigma", ".", "size", ")", ")", ",", "x_hat", ")", "_h", ".", "mult_mv", "(", "x_hat", ",", "gamma", ".", "reshape", "(", "(", "1", ",", "gamma", ".", "size", ")", ")", ",", "out", ")", "_h", ".", "add_mv", "(", "out", ",", "beta", ".", "reshape", "(", "(", "1", ",", "beta", ".", "size", ")", ")", ",", "out", ")", "def", "backward_pass", "(", "self", ",", "buffers", ")", ":", "_h", "=", "self", ".", "handler", "(", "sigma_b", ",", "centered", ",", "x_hat", ")", "=", "buffers", ".", "internals", "gamma", "=", "buffers", ".", "parameters", ".", "gamma", "dgamma", "=", "buffers", ".", "gradients", ".", "gamma", "dbeta", "=", "buffers", ".", "gradients", ".", "beta", "x_hat", "=", "flatten_all_but_last", "(", "x_hat", ")", "outdeltas", "=", "flatten_all_but_last", "(", "buffers", ".", "output_deltas", ".", "default", ")", "indeltas", "=", "flatten_all_but_last", "(", "buffers", ".", "input_deltas", ".", "default", ")", "m", "=", "outdeltas", ".", "shape", "[", "0", "]", "big_tmp", "=", "_h", ".", "allocate", "(", "x_hat", ".", "shape", ")", "small_tmp", "=", "_h", ".", "allocate", "(", "gamma", ".", "shape", ")", "tmp", "=", "big_tmp", "dgamma_tmp", "=", "small_tmp", "_h", ".", "mult_tt", "(", "outdeltas", ",", "x_hat", ",", "tmp", ")", "_h", ".", "sum_t", "(", "tmp", ",", "axis", "=", "0", ",", "out", "=", "dgamma_tmp", ")", "_h", ".", "add_tt", "(", "dgamma_tmp", ",", "dgamma", ",", "dgamma", ")", "_h", ".", "mult_st", "(", "(", "1", "/", "m", ")", ",", "dgamma_tmp", ",", "dgamma_tmp", ")", "term1", "=", "big_tmp", "_h", ".", "mult_mv", "(", "x_hat", ",", "dgamma_tmp", ".", "reshape", "(", "(", "1", ",", "gamma", ".", "size", ")", ")", ",", "term1", ")", "dbeta_tmp", "=", "small_tmp", "_h", ".", "sum_t", "(", "outdeltas", ",", "axis", "=", "0", ",", "out", "=", "dbeta_tmp", ")", "_h", ".", "add_tt", "(", "dbeta_tmp", ",", "dbeta", ",", "dbeta", ")", "_h", ".", "mult_st", "(", "(", "1", "/", "m", ")", ",", "dbeta_tmp", ",", "dbeta_tmp", ")", "term2", "=", "big_tmp", "term3", "=", "big_tmp", "_h", ".", "subtract_tt", "(", "outdeltas", ",", "term1", ",", "term2", ")", "_h", ".", "subtract_mv", "(", "term2", ",", "dbeta_tmp", ".", "reshape", "(", "(", "1", ",", "dbeta", ".", "size", ")", ")", ",", "term3", ")", "coeff", "=", "small_tmp", "_h", ".", "divide_tt", "(", "gamma", ",", "sigma_b", ",", "coeff", ")", "term4", "=", "big_tmp", "_h", ".", "mult_mv", "(", "term3", ",", "coeff", ".", "reshape", "(", "(", "1", ",", "coeff", ".", "size", ")", ")", ",", "term4", ")", "_h", ".", "add_tt", "(", "term4", ",", "indeltas", ",", "indeltas", ")"], 0]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "from", "collections", "import", "OrderedDict", "import", "numpy", "as", "np", "from", "brainstorm.describable", "import", "Describable", "class", "Scorer", "(", "Describable", ")", ":", "def", "__init__", "(", "self", ",", "out_name", "=", "''", ",", "targets_name", "=", "'targets'", ",", "mask_name", "=", "''", ",", "name", "=", "None", ")", ":", "self", ".", "out_name", "=", "out_name", "self", ".", "targets_name", "=", "targets_name", "self", ".", "mask_name", "=", "mask_name", "self", ".", "__name__", "=", "(", "name", "if", "(", "name", "is not", "None", ")", "else", "self", ".", "__class__", ".", "__name__", ")", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "pass", "@", "staticmethod", "def", "aggregate", "(", "errors", ")", ":", "errors", "=", "np", ".", "array", "(", "errors", ")", "assert", "(", "(", "errors", ".", "ndim", "==", "2", ")", "and", "(", "errors", ".", "shape", "[", "1", "]", "==", "2", ")", ")", "return", "(", "np", ".", "sum", "(", "errors", "[", ":", ",", "1", "]", ")", "/", "np", ".", "sum", "(", "errors", "[", ":", ",", "0", "]", ")", ")", "def", "gather_losses_and_scores", "(", "net", ",", "scorers", ",", "scores", ",", "out_name", "=", "''", ",", "targets_name", "=", "'targets'", ",", "mask_name", "=", "''", ")", ":", "ls", "=", "net", ".", "get_loss_values", "(", ")", "for", "(", "name", ",", "loss", ")", "in", "ls", ".", "items", "(", ")", ":", "scores", "[", "name", "]", ".", "append", "(", "(", "net", ".", "_buffer_manager", ".", "batch_size", ",", "loss", ")", ")", "for", "sc", "in", "scorers", ":", "name", "=", "sc", ".", "__name__", "predicted", "=", "net", ".", "get", "(", "(", "sc", ".", "out_name", "or", "out_name", "or", "net", ".", "output_name", ")", ")", "true_labels", "=", "(", "net", ".", "get_input", "(", "sc", ".", "targets_name", ")", "if", "sc", ".", "targets_name", "else", "net", ".", "get_input", "(", "targets_name", ")", ")", "mask", "=", "(", "net", ".", "get_input", "(", "sc", ".", "mask_name", ")", "if", "sc", ".", "mask_name", "else", "(", "net", ".", "get_input", "(", "mask_name", ")", "if", "mask_name", "else", "None", ")", ")", "predicted", "=", "_flatten_all_but_last", "(", "predicted", ")", "true_labels", "=", "_flatten_all_but_last", "(", "true_labels", ")", "mask", "=", "_flatten_all_but_last", "(", "mask", ")", "weight", "=", "(", "mask", ".", "sum", "(", ")", "if", "(", "mask", "is not", "None", ")", "else", "predicted", ".", "shape", "[", "0", "]", ")", "scores", "[", "name", "]", ".", "append", "(", "(", "weight", ",", "sc", "(", "true_labels", ",", "predicted", ",", "mask", ")", ")", ")", "def", "aggregate_losses_and_scores", "(", "scores", ",", "net", ",", "scorers", ")", ":", "results", "=", "OrderedDict", "(", ")", "for", "name", "in", "net", ".", "get_loss_values", "(", ")", ":", "results", "[", "name", "]", "=", "_weighted_average", "(", "scores", "[", "name", "]", ")", "for", "sc", "in", "scorers", ":", "results", "[", "sc", ".", "__name__", "]", "=", "sc", ".", "aggregate", "(", "scores", "[", "sc", ".", "__name__", "]", ")", "return", "results", "class", "Accuracy", "(", "Scorer", ")", ":", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "if", "(", "predicted", ".", "shape", "[", "1", "]", ">", "1", ")", ":", "predicted", "=", "predicted", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "(", "-", "1", ")", ",", "1", ")", "correct", "=", "(", "predicted", "==", "true_labels", ")", ".", "astype", "(", "np", ".", "float", ")", "if", "(", "mask", "is not", "None", ")", ":", "correct", "*", "=", "mask", "return", "np", ".", "sum", "(", "correct", ")", "class", "Hamming", "(", "Scorer", ")", ":", "def", "__init__", "(", "self", ",", "threshold", "=", "0.5", ",", "out_name", "=", "''", ",", "targets_name", "=", "'targets'", ",", "mask_name", "=", "''", ",", "name", "=", "None", ")", ":", "super", "(", "Hamming", ",", "self", ")", ".", "__init__", "(", "out_name", ",", "targets_name", ",", "mask_name", ",", "name", ")", "self", ".", "threshold", "=", "threshold", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "correct", "=", "np", ".", "logical_xor", "(", "(", "predicted", "<", "self", ".", "threshold", ")", ",", "true_labels", ")", ".", "astype", "(", "np", ".", "float", ")", "if", "(", "mask", "is not", "None", ")", ":", "correct", "*", "=", "mask", "return", "(", "np", ".", "sum", "(", "correct", ")", "/", "true_labels", ".", "shape", "[", "1", "]", ")", "class", "MeanSquaredError", "(", "Scorer", ")", ":", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "errors", "=", "(", "(", "true_labels", "-", "predicted", ")", "**", "2", ")", "if", "(", "mask", "is not", "None", ")", ":", "errors", "*", "=", "mask", "return", "(", "0.5", "*", "np", ".", "sum", "(", "errors", ")", ")", "def", "_flatten_all_but_last", "(", "a", ")", ":", "if", "(", "a", "is", "None", ")", ":", "return", "None", "return", "a", ".", "reshape", "(", "(", "-", "1", ")", ",", "a", ".", "shape", "[", "(", "-", "1", ")", "]", ")", "def", "_weighted_average", "(", "errors", ")", ":", "errors", "=", "np", ".", "array", "(", "errors", ")", "assert", "(", "(", "errors", ".", "ndim", "==", "2", ")", "and", "(", "errors", ".", "shape", "[", "1", "]", "==", "2", ")", ")", "return", "np", ".", "sum", "(", "(", "(", "errors", "[", ":", ",", "1", "]", "*", "errors", "[", ":", ",", "0", "]", ")", "/", "np", ".", "sum", "(", "errors", "[", ":", ",", "0", "]", ")", ")", ")"], 0]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "import", "pytest", "import", "six", "from", "brainstorm.training.schedules", "import", "Exponential", ",", "Linear", ",", "MultiStep", "def", "test_linear", "(", ")", ":", "sch", "=", "Linear", "(", "initial_value", "=", "1.0", ",", "final_value", "=", "0.5", ",", "num_changes", "=", "5", ")", "epochs", "=", "(", "(", "(", "(", "(", "[", "0", "]", "*", "2", ")", "+", "(", "[", "1", "]", "*", "2", ")", ")", "+", "(", "[", "2", "]", "*", "2", ")", ")", "+", "(", "[", "3", "]", "*", "2", ")", ")", "+", "(", "[", "4", "]", "*", "2", ")", ")", "updates", "=", "range", "(", "10", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'epoch'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "0.9", ",", "0.9", ",", "0.8", ",", "0.8", ",", "0.7", ",", "0.7", ",", "0.6", ",", "0.6", "]", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "[", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ",", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "3", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "1.0", ",", "0.9", ",", "0.9", ",", "0.9", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.7", "]", ")", "def", "test_exponential", "(", ")", ":", "sch", "=", "Exponential", "(", "initial_value", "=", "1.0", ",", "factor", "=", "0.99", ",", "minimum", "=", "0.97", ")", "epochs", "=", "(", "(", "(", "[", "0", "]", "*", "4", ")", "+", "(", "[", "1", "]", "*", "4", ")", ")", "+", "(", "[", "2", "]", "*", "4", ")", ")", "updates", "=", "range", "(", "12", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'epoch'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "(", "(", "(", "[", "1.0", "]", "*", "4", ")", "+", "(", "[", "0.99", "]", "*", "4", ")", ")", "+", "(", "[", "(", "0.99", "*", "0.99", ")", "]", "*", "4", ")", ")", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "(", "[", "(", "1.0", "*", "(", "0.99", "**", "x", ")", ")", "for", "x", "in", "range", "(", "4", ")", "]", "+", "(", "[", "0.97", "]", "*", "8", ")", ")", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "3", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "(", "(", "(", "(", "[", "1.0", "]", "*", "3", ")", "+", "(", "[", "0.99", "]", "*", "3", ")", ")", "+", "(", "[", "0.9801", "]", "*", "3", ")", ")", "+", "(", "[", "(", "0.99", "**", "3", ")", "]", "*", "3", ")", ")", ")", "def", "test_multistep", "(", ")", ":", "sch", "=", "MultiStep", "(", "initial_value", "=", "1.0", ",", "steps", "=", "[", "3", ",", "5", ",", "8", "]", ",", "values", "=", "[", "0.1", ",", "0.01", ",", "0.001", "]", ")", "epochs", "=", "(", "(", "(", "(", "(", "[", "0", "]", "*", "2", ")", "+", "(", "[", "1", "]", "*", "2", ")", ")", "+", "(", "[", "2", "]", "*", "2", ")", ")", "+", "(", "[", "3", "]", "*", "2", ")", ")", "+", "(", "[", "4", "]", "*", "2", ")", ")", "updates", "=", "range", "(", "10", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'epoch'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", "]", ")", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "1.0", ",", "0.1", ",", "0.1", ",", "0.01", ",", "0.01", ",", "0.01", ",", "0.001", ",", "0.001", "]", ")", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "_", "=", "sch", "(", "0", ",", "0", ",", "'update'", ",", "3", ",", "None", ",", "None", ",", "None", ")"], 0]
