[["from", "django.utils.translation", "import", "ugettext_lazy", "as", "_", "<new_line>", "from", "horizon", "import", "tabs", "<new_line>", "class", "NetworkProfileTab", "(", "tabs", ".", "Tab", ")", ":", "<new_line>", "<indent>", "name", "=", "_", "(", "'Network Profile'", ")", "<new_line>", "slug", "=", "'network_profile'", "<new_line>", "template_name", "=", "'router/nexus1000v/network_profile/index.html'", "<new_line>", "def", "get_context_data", "(", "self", ",", "request", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "class", "PolicyProfileTab", "(", "tabs", ".", "Tab", ")", ":", "<new_line>", "<indent>", "name", "=", "_", "(", "'Policy Profile'", ")", "<new_line>", "slug", "=", "'policy_profile'", "<new_line>", "template_name", "=", "'router/nexus1000v/policy_profile/index.html'", "<new_line>", "preload", "=", "False", "<dedent>", "class", "IndexTabs", "(", "tabs", ".", "TabGroup", ")", ":", "<new_line>", "<indent>", "slug", "=", "'indextabs'", "<new_line>", "tabs", "=", "(", "NetworkProfileTab", ",", "PolicyProfileTab", ")", "<dedent>"], 0]
[["'Greenthread local storage of variables using weak references'", "<new_line>", "import", "weakref", "<new_line>", "from", "eventlet", "import", "corolocal", "<new_line>", "class", "WeakLocal", "(", "corolocal", ".", "local", ")", ":", "<new_line>", "<indent>", "def", "__getattribute__", "(", "self", ",", "attr", ")", ":", "<new_line>", "<indent>", "rval", "=", "corolocal", ".", "local", ".", "__getattribute__", "(", "self", ",", "attr", ")", "<new_line>", "if", "rval", ":", "<new_line>", "<indent>", "rval", "=", "rval", "(", ")", "<dedent>", "return", "rval", "<dedent>", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "<new_line>", "<indent>", "value", "=", "weakref", ".", "ref", "(", "value", ")", "<new_line>", "return", "corolocal", ".", "local", ".", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", "<dedent>", "<dedent>", "store", "=", "WeakLocal", "(", ")", "<new_line>", "weak_store", "=", "WeakLocal", "(", ")", "<new_line>", "strong_store", "=", "corolocal", ".", "local"], 0]
[["import", "eventlet", "<new_line>", "eventlet", ".", "monkey_patch", "(", ")", "<new_line>", "import", "contextlib", "<new_line>", "import", "sys", "<new_line>", "from", "oslo.config", "import", "cfg", "<new_line>", "from", "openstack_dashboard.openstack.common", "import", "log", "as", "logging", "<new_line>", "from", "openstack_dashboard.openstack.common", "import", "rpc", "<new_line>", "from", "openstack_dashboard.openstack.common.rpc", "import", "impl_zmq", "<new_line>", "CONF", "=", "cfg", ".", "CONF", "<new_line>", "CONF", ".", "register_opts", "(", "rpc", ".", "rpc_opts", ")", "<new_line>", "CONF", ".", "register_opts", "(", "impl_zmq", ".", "zmq_opts", ")", "<new_line>", "def", "main", "(", ")", ":", "<new_line>", "<indent>", "CONF", "(", "sys", ".", "argv", "[", "1", ":", "]", ",", "project", "=", "'oslo'", ")", "<new_line>", "logging", ".", "setup", "(", "'oslo'", ")", "<new_line>", "with", "contextlib", ".", "closing", "(", "impl_zmq", ".", "ZmqProxy", "(", "CONF", ")", ")", "as", "reactor", ":", "<new_line>", "<indent>", "reactor", ".", "consume_in_thread", "(", ")", "<new_line>", "reactor", ".", "wait", "(", ")", "<dedent>", "<dedent>"], 0]
[["from", "openstack_dashboard", "import", "api", "<new_line>", "from", "openstack_dashboard.test", "import", "helpers", "as", "test", "<new_line>", "from", "neutronclient.v2_0", "import", "client", "<new_line>", "neutronclient", "=", "client", ".", "Client", "<new_line>", "class", "VPNaasApiTests", "(", "test", ".", "APITestCase", ")", ":", "<new_line>", "<indent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_vpnservice'", ",", ")", "}", ")", "def", "test_vpnservice_create", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "vpnservice1", "=", "self", ".", "api_vpnservices", ".", "first", "(", ")", "<new_line>", "form_data", "=", "{", "<new_line>", "'name'", ":", "vpnservice1", "[", "'name'", "]", ",", "<new_line>", "'description'", ":", "vpnservice1", "[", "'description'", "]", ",", "<new_line>", "'subnet_id'", ":", "vpnservice1", "[", "'subnet_id'", "]", ",", "<new_line>", "'router_id'", ":", "vpnservice1", "[", "'router_id'", "]", ",", "<new_line>", "'admin_state_up'", ":", "vpnservice1", "[", "'admin_state_up'", "]", "}", "<new_line>", "vpnservice", "=", "{", "'vpnservice'", ":", "self", ".", "api_vpnservices", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_vpnservice", "(", "<new_line>", "{", "'vpnservice'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "vpnservice", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "vpnservice_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "VPNService", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_vpnservices'", ",", ")", "}", ")", "def", "test_vpnservices_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "vpnservices", "=", "{", "'vpnservices'", ":", "self", ".", "vpnservices", ".", "list", "(", ")", "}", "<new_line>", "vpnservices_dict", "=", "{", "'vpnservices'", ":", "self", ".", "api_vpnservices", ".", "list", "(", ")", "}", "<new_line>", "neutronclient", ".", "list_vpnservices", "(", ")", ".", "AndReturn", "(", "vpnservices_dict", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "vpnservices_get", "(", "self", ".", "request", ")", "<new_line>", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "vpnservices", "[", "'vpnservices'", "]", ")", ":", "<new_line>", "<indent>", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "VPNService", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "<dedent>", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_vpnservice'", ",", ")", "}", ")", "def", "test_vpnservice_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "vpnservice1", "=", "self", ".", "api_vpnservices", ".", "first", "(", ")", "<new_line>", "vpnservice", "=", "{", "'vpnservice'", ":", "vpnservice1", "}", "<new_line>", "neutronclient", ".", "show_vpnservice", "(", "<new_line>", "vpnservice", "[", "'vpnservice'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "vpnservice", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "vpnservice_get", "(", "self", ".", "request", ",", "<new_line>", "vpnservice", "[", "'vpnservice'", "]", "[", "'id'", "]", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "VPNService", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_create", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "<new_line>", "form_data", "=", "{", "<new_line>", "'name'", ":", "ikepolicy1", "[", "'name'", "]", ",", "<new_line>", "'description'", ":", "ikepolicy1", "[", "'description'", "]", ",", "<new_line>", "'auth_algorithm'", ":", "ikepolicy1", "[", "'auth_algorithm'", "]", ",", "<new_line>", "'encryption_algorithm'", ":", "ikepolicy1", "[", "'encryption_algorithm'", "]", ",", "<new_line>", "'ike_version'", ":", "ikepolicy1", "[", "'ike_version'", "]", ",", "<new_line>", "'lifetime'", ":", "ikepolicy1", "[", "'lifetime'", "]", ",", "<new_line>", "'phase1_negotiation_mode'", ":", "ikepolicy1", "[", "'phase1_negotiation_mode'", "]", ",", "<new_line>", "'pfs'", ":", "ikepolicy1", "[", "'pfs'", "]", "}", "<new_line>", "ikepolicy", "=", "{", "'ikepolicy'", ":", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_ikepolicy", "(", "<new_line>", "{", "'ikepolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ikepolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ikepolicies'", ",", ")", "}", ")", "def", "test_ikepolicies_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ikepolicies", "=", "{", "'ikepolicies'", ":", "self", ".", "ikepolicies", ".", "list", "(", ")", "}", "<new_line>", "ikepolicies_dict", "=", "{", "'ikepolicies'", ":", "self", ".", "api_ikepolicies", ".", "list", "(", ")", "}", "<new_line>", "neutronclient", ".", "list_ikepolicies", "(", ")", ".", "AndReturn", "(", "ikepolicies_dict", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicies_get", "(", "self", ".", "request", ")", "<new_line>", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ikepolicies", "[", "'ikepolicies'", "]", ")", ":", "<new_line>", "<indent>", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "<dedent>", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "<new_line>", "ikepolicy", "=", "{", "'ikepolicy'", ":", "ikepolicy1", "}", "<new_line>", "neutronclient", ".", "show_ikepolicy", "(", "<new_line>", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ikepolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_get", "(", "self", ".", "request", ",", "<new_line>", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_create", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "<new_line>", "form_data", "=", "{", "<new_line>", "'name'", ":", "ipsecpolicy1", "[", "'name'", "]", ",", "<new_line>", "'description'", ":", "ipsecpolicy1", "[", "'description'", "]", ",", "<new_line>", "'auth_algorithm'", ":", "ipsecpolicy1", "[", "'auth_algorithm'", "]", ",", "<new_line>", "'encryption_algorithm'", ":", "ipsecpolicy1", "[", "'encryption_algorithm'", "]", ",", "<new_line>", "'encapsulation_mode'", ":", "ipsecpolicy1", "[", "'encapsulation_mode'", "]", ",", "<new_line>", "'lifetime'", ":", "ipsecpolicy1", "[", "'lifetime'", "]", ",", "<new_line>", "'pfs'", ":", "ipsecpolicy1", "[", "'pfs'", "]", ",", "<new_line>", "'transform_protocol'", ":", "ipsecpolicy1", "[", "'transform_protocol'", "]", "}", "<new_line>", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_ipsecpolicy", "(", "<new_line>", "{", "'ipsecpolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "<dedent>", "@", "test"], 0]
[["'lifetime'", "]", ",", "<new_line>", "'phase1_negotiation_mode'", ":", "ikepolicy1", "[", "'phase1_negotiation_mode'", "]", ",", "<new_line>", "'pfs'", ":", "ikepolicy1", "[", "'pfs'", "]", "}", "<new_line>", "ikepolicy", "=", "{", "'ikepolicy'", ":", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_ikepolicy", "(", "<new_line>", "{", "'ikepolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ikepolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ikepolicies'", ",", ")", "}", ")", "def", "test_ikepolicies_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ikepolicies", "=", "{", "'ikepolicies'", ":", "self", ".", "ikepolicies", ".", "list", "(", ")", "}", "<new_line>", "ikepolicies_dict", "=", "{", "'ikepolicies'", ":", "self", ".", "api_ikepolicies", ".", "list", "(", ")", "}", "<new_line>", "neutronclient", ".", "list_ikepolicies", "(", ")", ".", "AndReturn", "(", "ikepolicies_dict", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicies_get", "(", "self", ".", "request", ")", "<new_line>", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ikepolicies", "[", "'ikepolicies'", "]", ")", ":", "<new_line>", "<indent>", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "<dedent>", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "<new_line>", "ikepolicy", "=", "{", "'ikepolicy'", ":", "ikepolicy1", "}", "<new_line>", "neutronclient", ".", "show_ikepolicy", "(", "<new_line>", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ikepolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_get", "(", "self", ".", "request", ",", "<new_line>", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_create", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "<new_line>", "form_data", "=", "{", "<new_line>", "'name'", ":", "ipsecpolicy1", "[", "'name'", "]", ",", "<new_line>", "'description'", ":", "ipsecpolicy1", "[", "'description'", "]", ",", "<new_line>", "'auth_algorithm'", ":", "ipsecpolicy1", "[", "'auth_algorithm'", "]", ",", "<new_line>", "'encryption_algorithm'", ":", "ipsecpolicy1", "[", "'encryption_algorithm'", "]", ",", "<new_line>", "'encapsulation_mode'", ":", "ipsecpolicy1", "[", "'encapsulation_mode'", "]", ",", "<new_line>", "'lifetime'", ":", "ipsecpolicy1", "[", "'lifetime'", "]", ",", "<new_line>", "'pfs'", ":", "ipsecpolicy1", "[", "'pfs'", "]", ",", "<new_line>", "'transform_protocol'", ":", "ipsecpolicy1", "[", "'transform_protocol'", "]", "}", "<new_line>", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_ipsecpolicy", "(", "<new_line>", "{", "'ipsecpolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsecpolicies'", ",", ")", "}", ")", "def", "test_ipsecpolicies_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecpolicies", "=", "{", "'ipsecpolicies'", ":", "self", ".", "ipsecpolicies", ".", "list", "(", ")", "}", "<new_line>", "ipsecpolicies_dict", "=", "{", "'ipsecpolicies'", ":", "self", ".", "api_ipsecpolicies", ".", "list", "(", ")", "}", "<new_line>", "neutronclient", ".", "list_ipsecpolicies", "(", ")", ".", "AndReturn", "(", "ipsecpolicies_dict", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicies_get", "(", "self", ".", "request", ")", "<new_line>", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ipsecpolicies", "[", "'ipsecpolicies'", "]", ")", ":", "<new_line>", "<indent>", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "<dedent>", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "<new_line>", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "ipsecpolicy1", "}", "<new_line>", "neutronclient", ".", "show_ipsecpolicy", "(", "<new_line>", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_get", "(", "self", ".", "request", ",", "<new_line>", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsec_site_connection'", ",", ")", "}", ")", "def", "test_ipsecsiteconnection_create", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecsiteconnection1", "=", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "<new_line>", "form_data", "=", "{", "<new_line>", "'name'", ":", "ipsecsiteconnection1", "[", "'name'", "]", ",", "<new_line>", "'description'", ":", "ipsecsiteconnection1", "[", "'description'", "]", ",", "<new_line>", "'dpd'", ":", "ipsecsiteconnection1", "[", "'dpd'", "]", ",", "<new_line>", "'ikepolicy_id'", ":", "ipsecsiteconnection1", "[", "'ikepolicy_id'", "]", ",", "<new_line>", "'initiator'", ":", "ipsecsiteconnection1", "[", "'initiator'", "]", ",", "<new_line>", "'ipsecpolicy_id'", ":", "ipsecsiteconnection1", "[", "'ipsecpolicy_id'", "]", ",", "<new_line>", "'mtu'", ":", "ipsecsiteconnection1", "[", "'mtu'", "]", ",", "<new_line>", "'peer_address'", ":", "ipsecsiteconnection1", "[", "'peer_address'", "]", ",", "<new_line>", "'peer_cidrs'", ":", "ipsecsiteconnection1", "[", "'peer_cidrs'", "]", ",", "<new_line>", "'peer_id'", ":", "ipsecsiteconnection1", "[", "'peer_id'", "]", ",", "<new_line>", "'psk'", ":", "ipsecsiteconnection1", "[", "'psk'", "]", ",", "<new_line>", "'vpnservice_id'", ":", "ipsecsiteconnection1", "[", "'vpnservice_id'", "]", ",", "<new_line>", "'admin_state_up'", ":", "ipsecsiteconnection1", "[", "'admin_state_up'", "]", "}", "<new_line>", "ipsecsiteconnection", "=", "{", "'ipsec_site_connection'", ":", "<new_line>", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_ipsec_site_connection", "(", "<new_line>", "{", "'ipsec_site_connection'", ":", "<new_line>", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecsiteconnection", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnection_create", "(", "<new_line>", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsec_site_connections'", ",", ")", "}", ")", "def", "test_ipsecsiteconnections_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecsiteconnections", "=", "{", "<new_line>", "'ipsec_site_connections'", ":", "self", ".", "ipsecsiteconnections", ".", "list", "(", ")", "}", "<new_line>", "ipsecsiteconnections_dict", "=", "{", "<new_line>", "'ipsec_site_connections'", ":", "self", ".", "api_ipsecsiteconnections", ".", "list"], 500]
[["vpn", ".", "IKEPolicy", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "<dedent>", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ikepolicy'", ",", ")", "}", ")", "def", "test_ikepolicy_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ikepolicy1", "=", "self", ".", "api_ikepolicies", ".", "first", "(", ")", "<new_line>", "ikepolicy", "=", "{", "'ikepolicy'", ":", "ikepolicy1", "}", "<new_line>", "neutronclient", ".", "show_ikepolicy", "(", "<new_line>", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ikepolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ikepolicy_get", "(", "self", ".", "request", ",", "<new_line>", "ikepolicy", "[", "'ikepolicy'", "]", "[", "'id'", "]", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IKEPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_create", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "<new_line>", "form_data", "=", "{", "<new_line>", "'name'", ":", "ipsecpolicy1", "[", "'name'", "]", ",", "<new_line>", "'description'", ":", "ipsecpolicy1", "[", "'description'", "]", ",", "<new_line>", "'auth_algorithm'", ":", "ipsecpolicy1", "[", "'auth_algorithm'", "]", ",", "<new_line>", "'encryption_algorithm'", ":", "ipsecpolicy1", "[", "'encryption_algorithm'", "]", ",", "<new_line>", "'encapsulation_mode'", ":", "ipsecpolicy1", "[", "'encapsulation_mode'", "]", ",", "<new_line>", "'lifetime'", ":", "ipsecpolicy1", "[", "'lifetime'", "]", ",", "<new_line>", "'pfs'", ":", "ipsecpolicy1", "[", "'pfs'", "]", ",", "<new_line>", "'transform_protocol'", ":", "ipsecpolicy1", "[", "'transform_protocol'", "]", "}", "<new_line>", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_ipsecpolicy", "(", "<new_line>", "{", "'ipsecpolicy'", ":", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_create", "(", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsecpolicies'", ",", ")", "}", ")", "def", "test_ipsecpolicies_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecpolicies", "=", "{", "'ipsecpolicies'", ":", "self", ".", "ipsecpolicies", ".", "list", "(", ")", "}", "<new_line>", "ipsecpolicies_dict", "=", "{", "'ipsecpolicies'", ":", "self", ".", "api_ipsecpolicies", ".", "list", "(", ")", "}", "<new_line>", "neutronclient", ".", "list_ipsecpolicies", "(", ")", ".", "AndReturn", "(", "ipsecpolicies_dict", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicies_get", "(", "self", ".", "request", ")", "<new_line>", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "ipsecpolicies", "[", "'ipsecpolicies'", "]", ")", ":", "<new_line>", "<indent>", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "<dedent>", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ipsecpolicy'", ",", ")", "}", ")", "def", "test_ipsecpolicy_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecpolicy1", "=", "self", ".", "api_ipsecpolicies", ".", "first", "(", ")", "<new_line>", "ipsecpolicy", "=", "{", "'ipsecpolicy'", ":", "ipsecpolicy1", "}", "<new_line>", "neutronclient", ".", "show_ipsecpolicy", "(", "<new_line>", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "ipsecpolicy", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecpolicy_get", "(", "self", ".", "request", ",", "<new_line>", "ipsecpolicy", "[", "'ipsecpolicy'", "]", "[", "'id'", "]", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecPolicy", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'create_ipsec_site_connection'", ",", ")", "}", ")", "def", "test_ipsecsiteconnection_create", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecsiteconnection1", "=", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "<new_line>", "form_data", "=", "{", "<new_line>", "'name'", ":", "ipsecsiteconnection1", "[", "'name'", "]", ",", "<new_line>", "'description'", ":", "ipsecsiteconnection1", "[", "'description'", "]", ",", "<new_line>", "'dpd'", ":", "ipsecsiteconnection1", "[", "'dpd'", "]", ",", "<new_line>", "'ikepolicy_id'", ":", "ipsecsiteconnection1", "[", "'ikepolicy_id'", "]", ",", "<new_line>", "'initiator'", ":", "ipsecsiteconnection1", "[", "'initiator'", "]", ",", "<new_line>", "'ipsecpolicy_id'", ":", "ipsecsiteconnection1", "[", "'ipsecpolicy_id'", "]", ",", "<new_line>", "'mtu'", ":", "ipsecsiteconnection1", "[", "'mtu'", "]", ",", "<new_line>", "'peer_address'", ":", "ipsecsiteconnection1", "[", "'peer_address'", "]", ",", "<new_line>", "'peer_cidrs'", ":", "ipsecsiteconnection1", "[", "'peer_cidrs'", "]", ",", "<new_line>", "'peer_id'", ":", "ipsecsiteconnection1", "[", "'peer_id'", "]", ",", "<new_line>", "'psk'", ":", "ipsecsiteconnection1", "[", "'psk'", "]", ",", "<new_line>", "'vpnservice_id'", ":", "ipsecsiteconnection1", "[", "'vpnservice_id'", "]", ",", "<new_line>", "'admin_state_up'", ":", "ipsecsiteconnection1", "[", "'admin_state_up'", "]", "}", "<new_line>", "ipsecsiteconnection", "=", "{", "'ipsec_site_connection'", ":", "<new_line>", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "}", "<new_line>", "neutronclient", ".", "create_ipsec_site_connection", "(", "<new_line>", "{", "'ipsec_site_connection'", ":", "<new_line>", "form_data", "}", ")", ".", "AndReturn", "(", "ipsecsiteconnection", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnection_create", "(", "<new_line>", "self", ".", "request", ",", "**", "form_data", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'list_ipsec_site_connections'", ",", ")", "}", ")", "def", "test_ipsecsiteconnections_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecsiteconnections", "=", "{", "<new_line>", "'ipsec_site_connections'", ":", "self", ".", "ipsecsiteconnections", ".", "list", "(", ")", "}", "<new_line>", "ipsecsiteconnections_dict", "=", "{", "<new_line>", "'ipsec_site_connections'", ":", "self", ".", "api_ipsecsiteconnections", ".", "list", "(", ")", "}", "<new_line>", "neutronclient", ".", "list_ipsec_site_connections", "(", ")", ".", "AndReturn", "(", "<new_line>", "ipsecsiteconnections_dict", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnections_get", "(", "self", ".", "request", ")", "<new_line>", "for", "(", "v", ",", "d", ")", "in", "zip", "(", "ret_val", ",", "<new_line>", "ipsecsiteconnections", "[", "'ipsec_site_connections'", "]", ")", ":", "<new_line>", "<indent>", "self", ".", "assertIsInstance", "(", "v", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "name", ",", "d", ".", "name", ")", "<new_line>", "self", ".", "assertTrue", "(", "v", ".", "id", ")", "<dedent>", "<dedent>", "@", "test", ".", "create_stubs", "(", "{", "neutronclient", ":", "(", "'show_ipsec_site_connection'", ",", ")", "}", ")", "def", "test_ipsecsiteconnection_get", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "ipsecsiteconnection1", "=", "self", ".", "api_ipsecsiteconnections", ".", "first", "(", ")", "<new_line>", "ipsecsiteconnection", "=", "{", "'ipsec_site_connection'", ":", "ipsecsiteconnection1", "}", "<new_line>", "neutronclient", ".", "show_ipsec_site_connection", "(", "<new_line>", "ipsecsiteconnection", "[", "'ipsec_site_connection'", "]", "[", "'id'", "]", ")", ".", "AndReturn", "(", "<new_line>", "ipsecsiteconnection", ")", "<new_line>", "self", ".", "mox", ".", "ReplayAll", "(", ")", "<new_line>", "ret_val", "=", "api", ".", "vpn", ".", "ipsecsiteconnection_get", "(", "self", ".", "request", ",", "<new_line>", "ipsecsiteconnection", "[", "'ipsec_site_connection'", "]", "[", "'id'", "]", ")", "<new_line>", "self", ".", "assertIsInstance", "(", "ret_val", ",", "api", ".", "vpn", ".", "IPSecSiteConnection", ")", "<dedent>", "<dedent>"], 802]
[["from", "horizon", "import", "tables", "<new_line>", "from", "openstack_dashboard.usage", "import", "base", "<new_line>", "class", "UsageView", "(", "tables", ".", "DataTableView", ")", ":", "<new_line>", "<indent>", "usage_class", "=", "None", "<new_line>", "show_terminated", "=", "True", "<new_line>", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "super", "(", "UsageView", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "<new_line>", "if", "(", "not", "issubclass", "(", "self", ".", "usage_class", ",", "base", ".", "BaseUsage", ")", ")", ":", "<new_line>", "<indent>", "raise", "AttributeError", "(", "'You must specify a usage_class attribute which is a subclass of BaseUsage.'", ")", "<dedent>", "<dedent>", "def", "get_template_names", "(", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "self", ".", "request", ".", "GET", ".", "get", "(", "'format'", ",", "'html'", ")", "==", "'csv'", ")", ":", "<new_line>", "<indent>", "return", "'.'", ".", "join", "(", "(", "self", ".", "template_name", ".", "rsplit", "(", "'.'", ",", "1", ")", "[", "0", "]", ",", "'csv'", ")", ")", "<dedent>", "return", "self", ".", "template_name", "<dedent>", "def", "get_content_type", "(", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "self", ".", "request", ".", "GET", ".", "get", "(", "'format'", ",", "'html'", ")", "==", "'csv'", ")", ":", "<new_line>", "<indent>", "return", "'text/csv'", "<dedent>", "return", "'text/html'", "<dedent>", "def", "get_data", "(", "self", ")", ":", "<new_line>", "<indent>", "project_id", "=", "self", ".", "kwargs", ".", "get", "(", "'project_id'", ",", "self", ".", "request", ".", "user", ".", "tenant_id", ")", "<new_line>", "self", ".", "usage", "=", "self", ".", "usage_class", "(", "self", ".", "request", ",", "project_id", ")", "<new_line>", "self", ".", "usage", ".", "summarize", "(", "*", "self", ".", "usage", ".", "get_date_range", "(", ")", ")", "<new_line>", "self", ".", "usage", ".", "get_limits", "(", ")", "<new_line>", "self", ".", "kwargs", "[", "'usage'", "]", "=", "self", ".", "usage", "<new_line>", "return", "self", ".", "usage", ".", "usage_list", "<dedent>", "def", "get_context_data", "(", "self", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "context", "=", "super", "(", "UsageView", ",", "self", ")", ".", "get_context_data", "(", "**", "kwargs", ")", "<new_line>", "context", "[", "'table'", "]", ".", "kwargs", "[", "'usage'", "]", "=", "self", ".", "usage", "<new_line>", "context", "[", "'form'", "]", "=", "self", ".", "usage", ".", "form", "<new_line>", "context", "[", "'usage'", "]", "=", "self", ".", "usage", "<new_line>", "return", "context", "<dedent>", "def", "render_to_response", "(", "self", ",", "context", ",", "**", "response_kwargs", ")", ":", "<new_line>", "<indent>", "if", "(", "self", ".", "request", ".", "GET", ".", "get", "(", "'format'", ",", "'html'", ")", "==", "'csv'", ")", ":", "<new_line>", "<indent>", "render_class", "=", "self", ".", "csv_response_class", "<new_line>", "response_kwargs", ".", "setdefault", "(", "'filename'", ",", "'usage.csv'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "render_class", "=", "self", ".", "response_class", "<dedent>", "resp", "=", "render_class", "(", "request", "=", "self", ".", "request", ",", "template", "=", "<new_line>", "self", ".", "get_template_names", "(", ")", ",", "context", "=", "<new_line>", "context", ",", "content_type", "=", "<new_line>", "self", ".", "get_content_type", "(", ")", ",", "**", "<new_line>", "response_kwargs", ")", "<new_line>", "return", "resp", "<dedent>", "<dedent>"], 0]
[["from", "enum", "import", "IntEnum", "<new_line>", "from", ".", "component", "import", "Component", "<new_line>", "from", ".", "object", "import", "field", "<new_line>", "class", "ReflectionProbeUsage", "(", "IntEnum", ")", ":", "<new_line>", "<indent>", "Off", "=", "0", "<new_line>", "BlendProbes", "=", "1", "<new_line>", "BlendProbesAndSkybox", "=", "2", "<new_line>", "Simple", "=", "3", "<dedent>", "class", "ShadowCastingMode", "(", "IntEnum", ")", ":", "<new_line>", "<indent>", "Off", "=", "0", "<new_line>", "On", "=", "1", "<new_line>", "TwoSided", "=", "2", "<new_line>", "ShadowsOnly", "=", "3", "<dedent>", "class", "Renderer", "(", "Component", ")", ":", "<new_line>", "<indent>", "enabled", "=", "field", "(", "'m_Enabled'", ",", "bool", ")", "<new_line>", "lightmap_index", "=", "field", "(", "'m_LightmapIndex'", ")", "<new_line>", "materials", "=", "field", "(", "'m_Materials'", ")", "<new_line>", "probe_anchor", "=", "field", "(", "'m_ProbeAnchor'", ")", "<new_line>", "receive_shadows", "=", "field", "(", "'m_ReceiveShadows'", ",", "bool", ")", "<new_line>", "reflection_probe_usage", "=", "field", "(", "'m_ReflectionProbeUsage'", ",", "ReflectionProbeUsage", ")", "<new_line>", "shadow_casting_mode", "=", "field", "(", "'m_CastShadows'", ",", "ShadowCastingMode", ")", "<new_line>", "sorting_layer_id", "=", "field", "(", "'m_SortingLayerID'", ")", "<new_line>", "sorting_order", "=", "field", "(", "'m_SortingOrder'", ")", "<new_line>", "use_light_probes", "=", "field", "(", "'m_UseLightProbes'", ",", "bool", ")", "<new_line>", "lightmap_index_dynamic", "=", "field", "(", "'m_LightmapIndexDynamic'", ")", "<new_line>", "lightmap_tiling_offset", "=", "field", "(", "'m_LightmapTilingOffset'", ")", "<new_line>", "lightmap_tiling_offset_dynamic", "=", "field", "(", "'m_LightmapTilingOffsetDynamic'", ")", "<new_line>", "static_batch_root", "=", "field", "(", "'m_StaticBatchRoot'", ")", "<new_line>", "subset_indices", "=", "field", "(", "'m_SubsetIndices'", ")", "<new_line>", "@", "property", "def", "material", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "materials", "[", "0", "]", "<dedent>", "<dedent>", "class", "ParticleSystemRenderMode", "(", "IntEnum", ")", ":", "<new_line>", "<indent>", "Billboard", "=", "0", "<new_line>", "Stretch", "=", "1", "<new_line>", "HorizontalBillboard", "=", "2", "<new_line>", "VerticalBillboard", "=", "3", "<new_line>", "Mesh", "=", "4", "<dedent>", "class", "ParticleSystemSortMode", "(", "IntEnum", ")", ":", "<new_line>", "<indent>", "None_", "=", "0", "<new_line>", "Distance", "=", "1", "<new_line>", "OldestInFront", "=", "2", "<new_line>", "YoungestInFront", "=", "3", "<dedent>", "class", "MeshRenderer", "(", "Component", ")", ":", "<new_line>", "<indent>", "pass", "<dedent>", "class", "ParticleRenderer", "(", "Renderer", ")", ":", "<new_line>", "<indent>", "camera_velocity_scale", "=", "field", "(", "'m_CameraVelocityScale'", ")", "<new_line>", "length_scale", "=", "field", "(", "'m_LengthScale'", ")", "<new_line>", "max_particle_size", "=", "field", "(", "'m_MaxParticleSize'", ")", "<new_line>", "velocity_scale", "=", "field", "(", "'m_VelocityScale'", ")", "<new_line>", "stretch_particles", "=", "field", "(", "'m_StretchParticles'", ")", "<new_line>", "uv_animation", "=", "field", "(", "'UV Animation'", ")", "<dedent>", "class", "ParticleSystemRenderer", "(", "Renderer", ")", ":", "<new_line>", "<indent>", "camera_velocity_scale", "=", "field", "(", "'m_CameraVelocityScale'", ")", "<new_line>", "length_scale", "=", "field", "(", "'m_LengthScale'", ")", "<new_line>", "max_particle_size", "=", "field", "(", "'m_MaxParticleSize'", ")", "<new_line>", "mesh", "=", "field", "(", "'m_Mesh'", ")", "<new_line>", "mesh1", "=", "field", "(", "'m_Mesh1'", ")", "<new_line>", "mesh2", "=", "field", "(", "'m_Mesh2'", ")", "<new_line>", "mesh3", "=", "field", "(", "'m_Mesh3'", ")", "<new_line>", "normal_direction", "=", "field", "(", "'m_NormalDirection'", ")", "<new_line>", "render_mode", "=", "field", "(", "'m_RenderMode'", ",", "ParticleSystemRenderMode", ")", "<new_line>", "sort_mode", "=", "field", "(", "'m_SortMode'", ",", "ParticleSystemSortMode", ")", "<new_line>", "sorting_fudge", "=", "field", "(", "'m_SortingFudge'", ")", "<new_line>", "velocity_scale", "=", "field", "(", "'m_VelocityScale'", ")", "<dedent>"], 0]
[["from", "ConfigParser", "import", "*", "<new_line>", "from", "StringIO", "import", "*", "<new_line>", "from", "Log", "import", "Log", "<new_line>", "import", "datetime", "<new_line>", "class", "Config", "(", ")", ":", "<new_line>", "<indent>", "@", "staticmethod", "def", "LoadConfig", "(", ")", ":", "<new_line>", "<indent>", "Config", ".", "parser", "=", "ConfigParser", "(", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "sconff", "=", "open", "(", "CONFIG_FILE", ",", "'r'", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "'cannot open config file'", ")", "<new_line>", "return", "<dedent>", "sconf", "=", "StringIO", "(", ")", "<new_line>", "sconf", ".", "write", "(", "'[sysconf]\\n'", ")", "<new_line>", "sconf", ".", "write", "(", "sconff", ".", "read", "(", ")", ")", "<new_line>", "sconf", ".", "seek", "(", "0", ")", "<new_line>", "Config", ".", "parser", ".", "readfp", "(", "sconf", ")", "<new_line>", "sconff", ".", "close", "(", ")", "<new_line>", "sconf", ".", "close", "(", ")", "<new_line>", "return", "<dedent>", "@", "staticmethod", "def", "GetBoardsFile", "(", ")", ":", "<new_line>", "<indent>", "return", "BOARDS_FILE", "<dedent>", "@", "staticmethod", "def", "GetInt", "(", "<new_line>", "name", ",", "defval", ")", ":", "<new_line>", "<indent>", "if", "Config", ".", "parser", ".", "has_option", "(", "'sysconf'", ",", "name", ")", ":", "<new_line>", "<indent>", "return", "Config", ".", "parser", ".", "getint", "(", "'sysconf'", ",", "name", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "defval", "<dedent>", "<dedent>", "@", "staticmethod", "def", "GetString", "(", "<new_line>", "name", ",", "defval", ")", ":", "<new_line>", "<indent>", "if", "Config", ".", "parser", ".", "has_option", "(", "'sysconf'", ",", "name", ")", ":", "<new_line>", "<indent>", "val", "=", "Config", ".", "parser", ".", "get", "(", "'sysconf'", ",", "name", ")", "<new_line>", "if", "(", "(", "val", "[", "0", "]", "==", "'\"'", ")", "and", "val", ".", "endswith", "(", "'\"'", ")", ")", ":", "<new_line>", "<indent>", "val", "=", "val", "[", "1", ":", "(", "-", "1", ")", "]", "<dedent>", "return", "val", ".", "decode", "(", "'gbk'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "defval", "<dedent>", "<dedent>", "<dedent>", "BBS_ROOT", "=", "'/home/bbs/'", "<new_line>", "BBS_XMPP_CERT_FILE", "=", "(", "BBS_ROOT", "+", "'xmpp.crt'", ")", "<new_line>", "BBS_XMPP_KEY_FILE", "=", "(", "BBS_ROOT", "+", "'xmpp.key'", ")", "<new_line>", "BOARDS_FILE", "=", "(", "BBS_ROOT", "+", "'.BOARDS'", ")", "<new_line>", "STRLEN", "=", "80", "<new_line>", "ARTICLE_TITLE_LEN", "=", "60", "<new_line>", "BM_LEN", "=", "60", "<new_line>", "MAXBOARD", "=", "400", "<new_line>", "CONFIG_FILE", "=", "(", "BBS_ROOT", "+", "'etc/sysconf.ini'", ")", "<new_line>", "FILENAME_LEN", "=", "20", "<new_line>", "OWNER_LEN", "=", "30", "<new_line>", "SESSIONID_LEN", "=", "32", "<new_line>", "REFRESH_TOKEN_LEN", "=", "128", "<new_line>", "NAMELEN", "=", "40", "<new_line>", "IDLEN", "=", "12", "<new_line>", "MD5PASSLEN", "=", "16", "<new_line>", "OLDPASSLEN", "=", "14", "<new_line>", "MOBILE_NUMBER_LEN", "=", "17", "<new_line>", "MAXCLUB", "=", "128", "<new_line>", "MAXUSERS", "=", "20000", "<new_line>", "MAX_MSG_SIZE", "=", "1024", "<new_line>", "MAXFRIENDS", "=", "400", "<new_line>", "MAXMESSAGE", "=", "5", "<new_line>", "MAXSIGLINES", "=", "6", "<new_line>", "IPLEN", "=", "16", "<new_line>", "DEFAULTBOARD", "=", "'sysop'", "<new_line>", "BLESS_BOARD", "=", "'happy_birthday'", "<new_line>", "QUOTED_LINES", "=", "10", "<new_line>", "MAXACTIVE", "=", "8000", "<new_line>", "USHM_SIZE", "=", "(", "MAXACTIVE", "+", "10", ")", "<new_line>", "UTMP_HASHSIZE", "=", "(", "USHM_SIZE", "*", "4", ")", "<new_line>", "UCACHE_SEMLOCK", "=", "0", "<new_line>", "LEN_FRIEND_EXP", "=", "15", "<new_line>", "REFRESH_TIME", "=", "30", "<new_line>", "USER_TITLE_LEN", "=", "18", "<new_line>", "SESSION_TIMEOUT", "=", "datetime", ".", "timedelta", "(", "30", ")", "<new_line>", "SESSION_TIMEOUT_SECONDS", "=", "(", "86400", "*", "30", ")", "<new_line>", "XMPP_IDLE_TIME", "=", "300", "<new_line>", "XMPP_LONG_IDLE_TIME", "=", "1800", "<new_line>", "XMPP_UPDATE_TIME_INTERVAL", "=", "10", "<new_line>", "XMPP_PING_TIME_INTERVAL", "=", "60", "<new_line>", "PUBLIC_SHMKEY", "=", "3700", "<new_line>", "MAX_ATTACHSIZE", "=", "(", "(", "20", "*", "1024", ")", "*", "1024", ")", "<new_line>", "BMDEL_DECREASE", "=", "True", "<new_line>", "SYSMAIL_BOARD", "=", "'sysmail'", "<new_line>", "ADD_EDITMARK", "=", "True", "<new_line>", "SEARCH_COUNT_LIMIT", "=", "20", "<new_line>", "MAIL_SIZE_LIMIT", "=", "(", "-", "1", ")", "<new_line>", "SEC_DELETED_OLDHOME", "=", "(", "(", "3600", "*", "24", ")", "*", "3", ")", "<new_line>", "SELF_INTRO_MAX_LEN", "=", "800"], 0]
[["import", "re", "<new_line>", "import", "os", "<new_line>", "import", "stat", "<new_line>", "import", "json", "<new_line>", "import", "struct", "<new_line>", "import", "time", "<new_line>", "import", "Config", "<new_line>", "import", "Board", "<new_line>", "import", "Post", "<new_line>", "import", "BoardManager", "<new_line>", "from", "Util", "import", "Util", "<new_line>", "from", "Log", "import", "Log", "<new_line>", "from", "errors", "import", "*", "<new_line>", "DEFAULT_DIGEST_LIST_COUNT", "=", "20", "<new_line>", "class", "DigestItem", "(", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "basepath", ")", ":", "<new_line>", "<indent>", "self", ".", "basepath", "=", "basepath", "<new_line>", "self", ".", "title", "=", "''", "<new_line>", "self", ".", "host", "=", "''", "<new_line>", "self", ".", "port", "=", "0", "<new_line>", "self", ".", "attachpos", "=", "0", "<new_line>", "self", ".", "fname", "=", "''", "<new_line>", "self", ".", "mtitle", "=", "''", "<new_line>", "self", ".", "items", "=", "[", "]", "<new_line>", "self", ".", "update_time", "=", "0", "<new_line>", "self", ".", "id", "=", "0", "<new_line>", "self", ".", "sysop_only", "=", "0", "<new_line>", "self", ".", "bms_only", "=", "0", "<new_line>", "self", ".", "zixia_only", "=", "0", "<dedent>", "def", "IsDir", "(", "self", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "st", "=", "os", ".", "stat", "(", "self", ".", "realpath", "(", ")", ")", "<new_line>", "return", "stat", ".", "S_ISDIR", "(", "st", ".", "st_mode", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "<dedent>", "def", "IsFile", "(", "self", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "st", "=", "os", ".", "stat", "(", "self", ".", "realpath", "(", ")", ")", "<new_line>", "return", "stat", ".", "S_ISREG", "(", "st", ".", "st_mode", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "<dedent>", "def", "GetModTime", "(", "self", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "st", "=", "os", ".", "stat", "(", "self", ".", "realpath", "(", ")", ")", "<new_line>", "mtime", "=", "st", ".", "st_mtime", "<dedent>", "except", ":", "<new_line>", "<indent>", "mtime", "=", "time", ".", "time", "(", ")", "<dedent>", "return", "mtime", "<dedent>", "def", "names_path", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "'%s/.Names'", "%", "self", ".", "realpath", "(", ")", ")", "<dedent>", "def", "realpath", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "'%s/%s'", "%", "(", "Config", ".", "BBS_ROOT", ",", "self", ".", "path", "(", ")", ")", ")", "<dedent>", "def", "path", "(", "self", ")", ":", "<new_line>", "<indent>", "if", "self", ".", "fname", ":", "<new_line>", "<indent>", "return", "(", "'%s/%s'", "%", "(", "self", ".", "basepath", ",", "self", ".", "fname", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "self", ".", "basepath", "<dedent>", "<dedent>", "def", "CheckUpdate", "(", "self", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "stat", "=", "os", ".", "stat", "(", "self", ".", "names_path", "(", ")", ")", "<new_line>", "if", "(", "stat", ".", "st_mtime", ">", "self", ".", "update_time", ")", ":", "<new_line>", "<indent>", "self", ".", "LoadNames", "(", ")", "<dedent>", "<dedent>", "except", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "return", "True", "<dedent>", "def", "LoadNames", "(", "self", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "f", "=", "open", "(", "self", ".", "names_path", "(", ")", ",", "'r'", ")", "<dedent>", "except", "IOError", ":", "<new_line>", "<indent>", "return", "0", "<dedent>", "stat", "=", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", "<new_line>", "self", ".", "update_time", "=", "stat", ".", "st_mtime", "<new_line>", "item", "=", "DigestItem", "(", "self", ".", "path", "(", ")", ")", "<new_line>", "hostname", "=", "''", "<new_line>", "_id", "=", "0", "<new_line>", "bms_only", "=", "0", "<new_line>", "sysop_only", "=", "0", "<new_line>", "zixia_only", "=", "0", "<new_line>", "while", "True", ":", "<new_line>", "<indent>", "line", "=", "f", ".", "readline", "(", ")", "<new_line>", "if", "(", "line", "==", "''", ")", ":", "<new_line>", "<indent>", "break", "<dedent>", "npos", "=", "line", ".", "find", "(", "'\\n'", ")", "<new_line>", "if", "(", "npos", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "line", "=", "line", "[", ":", "npos", "]", "<dedent>", "if", "(", "line", "[", ":", "1", "]", "==", "'#'", ")", ":", "<new_line>", "<indent>", "if", "(", "line", "[", ":", "8", "]", "==", "'# Title='", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "self", ".", "mtitle", ")", ":", "<new_line>", "<indent>", "self", ".", "mtitle", "=", "line", "[", "8", ":", "]", "<dedent>", "<dedent>", "<dedent>", "result", "=", "re", ".", "match", "(", "'([^=]*)=(.*)'", ",", "line", ")", "<new_line>", "if", "result", ":", "<new_line>", "<indent>", "key", "=", "result", ".", "group", "(", "1", ")", "<new_line>", "value", "=", "result", ".", "group", "(", "2", ")", "<new_line>", "if", "(", "key", "==", "'Name'", ")", ":", "<new_line>", "<indent>", "item", ".", "title", "=", "value", "<new_line>", "item", ".", "attachpos", "=", "0", "<dedent>", "elif", "(", "key", "==", "'Path'", ")", ":", "<new_line>", "<indent>", "if", "(", "value", "[", ":", "2", "]", "==", "'~/'", ")", ":", "<new_line>", "<indent>", "item", ".", "fname", "=", "value", "[", "2", ":", "]", "<dedent>", "else", ":", "<new_line>", "<indent>", "item", ".", "fname", "=", "value", "<dedent>", "if", "(", "item", ".", "fname", ".", "find", "(", "'..'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "if", "(", "item", ".", "title", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "bms_only", "+", "=", "1", "<dedent>", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "sysop_only", "+", "=", "1", "<dedent>", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: ZIXIAs)'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "zixia_only", "+", "=", "1", "<dedent>", "if", "(", "item", ".", "fname", ".", "find", "(", "'!@#$%'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "parts", "=", "re", ".", "split", "(", "'[!@#$%]'", ",", "item", ".", "fname", ")", "<new_line>", "newparts", "=", "[", "]", "<new_line>", "for", "part", "in", "parts", ":", "<new_line>", "<indent>", "if", "part", ":", "<new_line>", "<indent>", "newparts", "+", "=", "[", "part", "]", "<dedent>", "<dedent>", "hostname", "=", "newparts", "[", "0", "]", "<new_line>", "item", ".", "fname", "=", "newparts", "[", "1", "]", "<new_line>", "try", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "int", "(", "newparts", "[", "2", "]", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "0", "<dedent>", "<dedent>", "item", ".", "id", "=", "_id", "<new_line>", "_id", "+", "=", "1", "<new_line>", "item", ".", "bms_only", "=", "bms_only", "<new_line>", "item", ".", "sysop_only", "=", "sysop_only", "<new_line>", "item", ".", "zixia_only", "=", "zixia_only", "<new_line>", "item", ".", "host", "=", "hostname", "<new_line>", "self", ".", "items", "+", "=", "[", "item", "]", "<new_line>", "item", "=", "DigestItem", "(", "self", ".", "path", "(", ")", ")", "<new_line>", "hostname", "=", "''", "<dedent>", "elif", "(", "key", "==", "'Host'", ")", ":", "<new_line>", "<indent>", "hostname", "=", "value", "<dedent>", "elif", "(", "key", "==", "'Port'", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "int", "(", "value", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "0", "<dedent>", "<dedent>", "elif", "(", "key"], 0]
[["<new_line>", "while", "True", ":", "<new_line>", "<indent>", "line", "=", "f", ".", "readline", "(", ")", "<new_line>", "if", "(", "line", "==", "''", ")", ":", "<new_line>", "<indent>", "break", "<dedent>", "npos", "=", "line", ".", "find", "(", "'\\n'", ")", "<new_line>", "if", "(", "npos", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "line", "=", "line", "[", ":", "npos", "]", "<dedent>", "if", "(", "line", "[", ":", "1", "]", "==", "'#'", ")", ":", "<new_line>", "<indent>", "if", "(", "line", "[", ":", "8", "]", "==", "'# Title='", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "self", ".", "mtitle", ")", ":", "<new_line>", "<indent>", "self", ".", "mtitle", "=", "line", "[", "8", ":", "]", "<dedent>", "<dedent>", "<dedent>", "result", "=", "re", ".", "match", "(", "'([^=]*)=(.*)'", ",", "line", ")", "<new_line>", "if", "result", ":", "<new_line>", "<indent>", "key", "=", "result", ".", "group", "(", "1", ")", "<new_line>", "value", "=", "result", ".", "group", "(", "2", ")", "<new_line>", "if", "(", "key", "==", "'Name'", ")", ":", "<new_line>", "<indent>", "item", ".", "title", "=", "value", "<new_line>", "item", ".", "attachpos", "=", "0", "<dedent>", "elif", "(", "key", "==", "'Path'", ")", ":", "<new_line>", "<indent>", "if", "(", "value", "[", ":", "2", "]", "==", "'~/'", ")", ":", "<new_line>", "<indent>", "item", ".", "fname", "=", "value", "[", "2", ":", "]", "<dedent>", "else", ":", "<new_line>", "<indent>", "item", ".", "fname", "=", "value", "<dedent>", "if", "(", "item", ".", "fname", ".", "find", "(", "'..'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "if", "(", "item", ".", "title", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "bms_only", "+", "=", "1", "<dedent>", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "sysop_only", "+", "=", "1", "<dedent>", "elif", "(", "item", ".", "title", ".", "find", "(", "'(BM: ZIXIAs)'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "zixia_only", "+", "=", "1", "<dedent>", "if", "(", "item", ".", "fname", ".", "find", "(", "'!@#$%'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "parts", "=", "re", ".", "split", "(", "'[!@#$%]'", ",", "item", ".", "fname", ")", "<new_line>", "newparts", "=", "[", "]", "<new_line>", "for", "part", "in", "parts", ":", "<new_line>", "<indent>", "if", "part", ":", "<new_line>", "<indent>", "newparts", "+", "=", "[", "part", "]", "<dedent>", "<dedent>", "hostname", "=", "newparts", "[", "0", "]", "<new_line>", "item", ".", "fname", "=", "newparts", "[", "1", "]", "<new_line>", "try", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "int", "(", "newparts", "[", "2", "]", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "0", "<dedent>", "<dedent>", "item", ".", "id", "=", "_id", "<new_line>", "_id", "+", "=", "1", "<new_line>", "item", ".", "bms_only", "=", "bms_only", "<new_line>", "item", ".", "sysop_only", "=", "sysop_only", "<new_line>", "item", ".", "zixia_only", "=", "zixia_only", "<new_line>", "item", ".", "host", "=", "hostname", "<new_line>", "self", ".", "items", "+", "=", "[", "item", "]", "<new_line>", "item", "=", "DigestItem", "(", "self", ".", "path", "(", ")", ")", "<new_line>", "hostname", "=", "''", "<dedent>", "elif", "(", "key", "==", "'Host'", ")", ":", "<new_line>", "<indent>", "hostname", "=", "value", "<dedent>", "elif", "(", "key", "==", "'Port'", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "int", "(", "value", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "item", ".", "port", "=", "0", "<dedent>", "<dedent>", "elif", "(", "key", "==", "'Attach'", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "item", ".", "attachpos", "=", "int", "(", "value", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "item", ".", "attachpos", "=", "0", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "f", ".", "close", "(", ")", "<new_line>", "return", "1", "<dedent>", "def", "GetItem", "(", "self", ",", "user", ",", "route", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "<new_line>", "<indent>", "self", ".", "CheckUpdate", "(", ")", "<new_line>", "if", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM:'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "Board", ".", "Board", ".", "IsBM", "(", "user", ",", "self", ".", "mtitle", "[", "4", ":", "]", ")", "or", "user", ".", "IsSysop", "(", ")", ")", ":", "<new_line>", "<indent>", "has_perm", "=", "True", "<dedent>", "elif", "(", "need_perm", "and", "(", "not", "has_perm", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "if", "(", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", "or", "<new_line>", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SECRET)'", ")", "!=", "(", "-", "1", ")", ")", "or", "<new_line>", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ")", ":", "<new_line>", "<indent>", "need_perm", "=", "True", "<dedent>", "if", "(", "len", "(", "route", ")", "==", "0", ")", ":", "<new_line>", "<indent>", "return", "self", "<dedent>", "target", "=", "(", "route", "[", "0", "]", "-", "1", ")", "<new_line>", "_id", "=", "target", "<new_line>", "if", "(", "_id", ">=", "len", "(", "self", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "while", "(", "self", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "<new_line>", "<indent>", "_id", "+", "=", "1", "<new_line>", "if", "(", "_id", ">=", "len", "(", "self", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "item", "=", "self", ".", "items", "[", "_id", "]", "<new_line>", "item", ".", "mtitle", "=", "item", ".", "title", "<new_line>", "if", "(", "len", "(", "route", ")", "==", "1", ")", ":", "<new_line>", "<indent>", "return", "item", "<dedent>", "elif", "item", ".", "IsDir", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "item", ".", "CheckUpdate", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "return", "item", ".", "GetItem", "(", "user", ",", "route", "[", "1", ":", "]", ",", "has_perm", ",", "need_perm", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "def", "GetRange", "(", "self", ",", "user", ",", "route", ",", "start", ",", "end", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "<new_line>", "<indent>", "self", ".", "CheckUpdate", "(", ")", "<new_line>", "firstitem", "=", "self", ".", "GetItem", "(", "user", ",", "(", "route", "+", "[", "start", "]", ")", ",", "has_perm", ",", "need_perm", ")", "<new_line>", "if", "(", "not", "firstitem", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "parent", "=", "self", ".", "GetItem", "(", "user", ",", "route", ",", "has_perm", ",", "need_perm", ")", "<new_line>", "if", "(", "not", "parent", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "if", "(", "not", "parent", ".", "IsDir", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "result", "=", "[", "]", "<new_line>", "_id", "=", "(", "start", "-", "1", ")", "<new_line>", "for", "i", "in", "range", "(", "start", ",", "(", "end", "+", "1", ")", ")", ":", "<new_line>", "<indent>", "target"], 500]
[["==", "'Attach'", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "item", ".", "attachpos", "=", "int", "(", "value", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "item", ".", "attachpos", "=", "0", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "f", ".", "close", "(", ")", "<new_line>", "return", "1", "<dedent>", "def", "GetItem", "(", "self", ",", "user", ",", "route", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "<new_line>", "<indent>", "self", ".", "CheckUpdate", "(", ")", "<new_line>", "if", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM:'", ")", "!=", "(", "-", "1", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "Board", ".", "Board", ".", "IsBM", "(", "user", ",", "self", ".", "mtitle", "[", "4", ":", "]", ")", "or", "user", ".", "IsSysop", "(", ")", ")", ":", "<new_line>", "<indent>", "has_perm", "=", "True", "<dedent>", "elif", "(", "need_perm", "and", "(", "not", "has_perm", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "if", "(", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: BMS)'", ")", "!=", "(", "-", "1", ")", ")", "or", "<new_line>", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SECRET)'", ")", "!=", "(", "-", "1", ")", ")", "or", "<new_line>", "(", "self", ".", "mtitle", ".", "find", "(", "'(BM: SYSOPS)'", ")", "!=", "(", "-", "1", ")", ")", ")", ":", "<new_line>", "<indent>", "need_perm", "=", "True", "<dedent>", "if", "(", "len", "(", "route", ")", "==", "0", ")", ":", "<new_line>", "<indent>", "return", "self", "<dedent>", "target", "=", "(", "route", "[", "0", "]", "-", "1", ")", "<new_line>", "_id", "=", "target", "<new_line>", "if", "(", "_id", ">=", "len", "(", "self", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "while", "(", "self", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "<new_line>", "<indent>", "_id", "+", "=", "1", "<new_line>", "if", "(", "_id", ">=", "len", "(", "self", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "item", "=", "self", ".", "items", "[", "_id", "]", "<new_line>", "item", ".", "mtitle", "=", "item", ".", "title", "<new_line>", "if", "(", "len", "(", "route", ")", "==", "1", ")", ":", "<new_line>", "<indent>", "return", "item", "<dedent>", "elif", "item", ".", "IsDir", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "item", ".", "CheckUpdate", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "return", "item", ".", "GetItem", "(", "user", ",", "route", "[", "1", ":", "]", ",", "has_perm", ",", "need_perm", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "def", "GetRange", "(", "self", ",", "user", ",", "route", ",", "start", ",", "end", ",", "has_perm", "=", "False", ",", "need_perm", "=", "False", ")", ":", "<new_line>", "<indent>", "self", ".", "CheckUpdate", "(", ")", "<new_line>", "firstitem", "=", "self", ".", "GetItem", "(", "user", ",", "(", "route", "+", "[", "start", "]", ")", ",", "has_perm", ",", "need_perm", ")", "<new_line>", "if", "(", "not", "firstitem", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "parent", "=", "self", ".", "GetItem", "(", "user", ",", "route", ",", "has_perm", ",", "need_perm", ")", "<new_line>", "if", "(", "not", "parent", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "if", "(", "not", "parent", ".", "IsDir", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "result", "=", "[", "]", "<new_line>", "_id", "=", "(", "start", "-", "1", ")", "<new_line>", "for", "i", "in", "range", "(", "start", ",", "(", "end", "+", "1", ")", ")", ":", "<new_line>", "<indent>", "target", "=", "(", "i", "-", "1", ")", "<new_line>", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "while", "(", "parent", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "<new_line>", "<indent>", "_id", "+", "=", "1", "<new_line>", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "<dedent>", "item", "=", "parent", ".", "items", "[", "_id", "]", "<new_line>", "item", ".", "mtitle", "=", "item", ".", "title", "<new_line>", "result", "+", "=", "[", "item", "]", "<dedent>", "return", "result", "<dedent>", "def", "EffectiveId", "(", "self", ",", "user", ")", ":", "<new_line>", "<indent>", "_id", "=", "self", ".", "id", "<new_line>", "if", "user", ".", "IsSysop", "(", ")", ":", "<new_line>", "<indent>", "return", "_id", "<dedent>", "if", "(", "not", "user", ".", "IsSysop", "(", ")", ")", ":", "<new_line>", "<indent>", "_id", "-", "=", "self", ".", "sysop_only", "<dedent>", "if", "(", "not", "user", ".", "IsBM", "(", ")", ")", ":", "<new_line>", "<indent>", "_id", "-", "=", "self", ".", "bms_only", "<dedent>", "if", "(", "not", "user", ".", "IsSECANC", "(", ")", ")", ":", "<new_line>", "<indent>", "_id", "-", "=", "self", ".", "zixia_only", "<dedent>", "return", "_id", "<dedent>", "def", "GetInfo", "(", "self", ")", ":", "<new_line>", "<indent>", "info", "=", "{", "}", "<new_line>", "info", "[", "'mtitle'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "mtitle", ")", "<new_line>", "info", "[", "'title'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "title", ")", "<new_line>", "info", "[", "'attach'", "]", "=", "self", ".", "attachpos", "<new_line>", "if", "(", "self", ".", "host", "!=", "''", ")", ":", "<new_line>", "<indent>", "info", "[", "'host'", "]", "=", "self", ".", "host", "<new_line>", "info", "[", "'port'", "]", "=", "self", ".", "port", "<new_line>", "info", "[", "'type'", "]", "=", "'link'", "<dedent>", "elif", "self", ".", "IsDir", "(", ")", ":", "<new_line>", "<indent>", "info", "[", "'type'", "]", "=", "'dir'", "<dedent>", "elif", "self", ".", "IsFile", "(", ")", ":", "<new_line>", "<indent>", "info", "[", "'type'", "]", "=", "'file'", "<dedent>", "else", ":", "<new_line>", "<indent>", "info", "[", "'type'", "]", "=", "'other'", "<dedent>", "info", "[", "'mtime'", "]", "=", "int", "(", "self", ".", "GetModTime", "(", ")", ")", "<new_line>", "return", "info", "<dedent>", "def", "GetInfoForUser", "(", "self", ",", "user", ")", ":", "<new_line>", "<indent>", "info", "=", "self", ".", "GetInfo", "(", ")", "<new_line>", "info", "[", "'id'", "]", "=", "(", "self", ".", "EffectiveId", "(", "user", ")", "+", "1", ")", "<new_line>", "return", "info", "<dedent>", "def", "GetAttachLink", "(", "self", ",", "session", ")", ":", "<new_line>", "<indent>", "_hash", "=", "Util", ".", "HashGen", "(", "self", ".", "path", "(", ")", ",", "'python nb'", ")", "<new_line>", "filename", "=", "''", "<new_line>", "for", "i", "in", "range", "(", "2", ")", ":", "<new_line>", "<indent>", "filename", "+", "=", "(", "'%0x'", "%", "struct", ".", "unpack", "(", "'=I'", ",", "_hash", "[", "(", "i", "*", "4", ")", ":", "(", "(", "i", "+", "1", ")", "*", "4", ")", "]", ")", ")", "<dedent>", "link", "=", "(", "'http://%s/bbscon.php?b=xattach&f=%s'", "%", "(", "session", ".", "GetMirror", "(", "Config", ".", "Config", ".", "GetInt", "(", "'ATTACHMENT_PORT'", ",", "80", ")", ")", ",", "filename", ")", ")", "<new_line>", "linkfile", "=", "(", "'%s/boards/xattach/%s'", "%", "(", "Config", ".", "BBS_ROOT", ",", "filename", ")", ")", "<new_line>", "target", "=", "(", "'../../%s'", "%", "self", ".", "path", "(", ")", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "os", ".", "symlink", "(", "target", ",", "linkfile"], 500]
[["=", "(", "i", "-", "1", ")", "<new_line>", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "while", "(", "parent", ".", "items", "[", "_id", "]", ".", "EffectiveId", "(", "user", ")", "<", "target", ")", ":", "<new_line>", "<indent>", "_id", "+", "=", "1", "<new_line>", "if", "(", "_id", ">=", "len", "(", "parent", ".", "items", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "<dedent>", "item", "=", "parent", ".", "items", "[", "_id", "]", "<new_line>", "item", ".", "mtitle", "=", "item", ".", "title", "<new_line>", "result", "+", "=", "[", "item", "]", "<dedent>", "return", "result", "<dedent>", "def", "EffectiveId", "(", "self", ",", "user", ")", ":", "<new_line>", "<indent>", "_id", "=", "self", ".", "id", "<new_line>", "if", "user", ".", "IsSysop", "(", ")", ":", "<new_line>", "<indent>", "return", "_id", "<dedent>", "if", "(", "not", "user", ".", "IsSysop", "(", ")", ")", ":", "<new_line>", "<indent>", "_id", "-", "=", "self", ".", "sysop_only", "<dedent>", "if", "(", "not", "user", ".", "IsBM", "(", ")", ")", ":", "<new_line>", "<indent>", "_id", "-", "=", "self", ".", "bms_only", "<dedent>", "if", "(", "not", "user", ".", "IsSECANC", "(", ")", ")", ":", "<new_line>", "<indent>", "_id", "-", "=", "self", ".", "zixia_only", "<dedent>", "return", "_id", "<dedent>", "def", "GetInfo", "(", "self", ")", ":", "<new_line>", "<indent>", "info", "=", "{", "}", "<new_line>", "info", "[", "'mtitle'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "mtitle", ")", "<new_line>", "info", "[", "'title'", "]", "=", "Util", ".", "gbkDec", "(", "self", ".", "title", ")", "<new_line>", "info", "[", "'attach'", "]", "=", "self", ".", "attachpos", "<new_line>", "if", "(", "self", ".", "host", "!=", "''", ")", ":", "<new_line>", "<indent>", "info", "[", "'host'", "]", "=", "self", ".", "host", "<new_line>", "info", "[", "'port'", "]", "=", "self", ".", "port", "<new_line>", "info", "[", "'type'", "]", "=", "'link'", "<dedent>", "elif", "self", ".", "IsDir", "(", ")", ":", "<new_line>", "<indent>", "info", "[", "'type'", "]", "=", "'dir'", "<dedent>", "elif", "self", ".", "IsFile", "(", ")", ":", "<new_line>", "<indent>", "info", "[", "'type'", "]", "=", "'file'", "<dedent>", "else", ":", "<new_line>", "<indent>", "info", "[", "'type'", "]", "=", "'other'", "<dedent>", "info", "[", "'mtime'", "]", "=", "int", "(", "self", ".", "GetModTime", "(", ")", ")", "<new_line>", "return", "info", "<dedent>", "def", "GetInfoForUser", "(", "self", ",", "user", ")", ":", "<new_line>", "<indent>", "info", "=", "self", ".", "GetInfo", "(", ")", "<new_line>", "info", "[", "'id'", "]", "=", "(", "self", ".", "EffectiveId", "(", "user", ")", "+", "1", ")", "<new_line>", "return", "info", "<dedent>", "def", "GetAttachLink", "(", "self", ",", "session", ")", ":", "<new_line>", "<indent>", "_hash", "=", "Util", ".", "HashGen", "(", "self", ".", "path", "(", ")", ",", "'python nb'", ")", "<new_line>", "filename", "=", "''", "<new_line>", "for", "i", "in", "range", "(", "2", ")", ":", "<new_line>", "<indent>", "filename", "+", "=", "(", "'%0x'", "%", "struct", ".", "unpack", "(", "'=I'", ",", "_hash", "[", "(", "i", "*", "4", ")", ":", "(", "(", "i", "+", "1", ")", "*", "4", ")", "]", ")", ")", "<dedent>", "link", "=", "(", "'http://%s/bbscon.php?b=xattach&f=%s'", "%", "(", "session", ".", "GetMirror", "(", "Config", ".", "Config", ".", "GetInt", "(", "'ATTACHMENT_PORT'", ",", "80", ")", ")", ",", "filename", ")", ")", "<new_line>", "linkfile", "=", "(", "'%s/boards/xattach/%s'", "%", "(", "Config", ".", "BBS_ROOT", ",", "filename", ")", ")", "<new_line>", "target", "=", "(", "'../../%s'", "%", "self", ".", "path", "(", ")", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "os", ".", "symlink", "(", "target", ",", "linkfile", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "pass", "<dedent>", "return", "link", "<dedent>", "<dedent>", "class", "Digest", "(", ")", ":", "<new_line>", "<indent>", "root", "=", "DigestItem", "(", "'0Announce'", ")", "<new_line>", "def", "__init__", "(", "self", ",", "board", ",", "path", ")", ":", "<new_line>", "<indent>", "self", ".", "board", "=", "board", "<new_line>", "self", ".", "path", "=", "path", "<new_line>", "self", ".", "root", "=", "DigestItem", "(", "self", ".", "path", ")", "<dedent>", "@", "staticmethod", "def", "GET", "(", "<new_line>", "svc", ",", "session", ",", "params", ",", "action", ")", ":", "<new_line>", "<indent>", "if", "(", "session", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "Unauthorized", "(", "'login first'", ")", "<dedent>", "if", "(", "not", "session", ".", "CheckScope", "(", "'bbs'", ")", ")", ":", "<new_line>", "<indent>", "raise", "NoPerm", "(", "'out of scope'", ")", "<dedent>", "user", "=", "session", ".", "GetUser", "(", ")", "<new_line>", "boardname", "=", "svc", ".", "get_str", "(", "params", ",", "'board'", ",", "''", ")", "<new_line>", "if", "boardname", ":", "<new_line>", "<indent>", "board", "=", "BoardManager", ".", "BoardManager", ".", "GetBoard", "(", "boardname", ")", "<new_line>", "if", "(", "board", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "NotFound", "(", "(", "'board %s not found'", "%", "boardname", ")", ")", "<dedent>", "if", "(", "not", "board", ".", "CheckReadPerm", "(", "user", ")", ")", ":", "<new_line>", "<indent>", "raise", "NoPerm", "(", "'permission denied'", ")", "<dedent>", "basenode", "=", "board", ".", "digest", ".", "root", "<new_line>", "has_perm", "=", "(", "user", ".", "IsDigestMgr", "(", ")", "or", "user", ".", "IsSysop", "(", ")", "or", "user", ".", "IsSuperBM", "(", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "basenode", "=", "Digest", ".", "root", "<new_line>", "has_perm", "=", "user", ".", "IsDigestMgr", "(", ")", "<dedent>", "if", "(", "action", "==", "'list'", ")", ":", "<new_line>", "<indent>", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "<new_line>", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "1", ")", "<new_line>", "end", "=", "svc", ".", "get_int", "(", "params", ",", "'end'", ",", "(", "(", "start", "+", "DEFAULT_DIGEST_LIST_COUNT", ")", "-", "1", ")", ")", "<new_line>", "Digest", ".", "List", "(", "svc", ",", "basenode", ",", "route", ",", "start", ",", "end", ",", "session", ",", "has_perm", ")", "<new_line>", "return", "<dedent>", "elif", "(", "action", "==", "'view'", ")", ":", "<new_line>", "<indent>", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "<new_line>", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "0", ")", "<new_line>", "count", "=", "svc", ".", "get_int", "(", "params", ",", "'count'", ",", "0", ")", "<new_line>", "Digest", ".", "View", "(", "svc", ",", "basenode", ",", "route", ",", "session", ",", "has_perm", ",", "start", ",", "count", ")", "<new_line>", "return", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'unknown action %s'", "%", "action", ")", ")", "<dedent>", "<dedent>", "@", "staticmethod", "def", "ParseRoute", "(", "<new_line>", "route", ")", ":", "<new_line>", "<indent>", "ret", "=", "[", "]", "<new_line>", "items", "=", "re", ".", "split", "(", "'-'", ",", "route", ")", "<new_line>", "items", "=", "items", "[", "1", ":", "]", "<new_line>", "for", "item", "in", "items", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "ret", "+", "=", "[", "int", "(", "item", ")", "]", "<dedent>", "except", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'fail to parse route element: %s'", "%", "item", ")", ")", "<dedent>", "<dedent>", "return", "ret", "<dedent>", "@", "staticmethod", "def", "List", "(", "<new_line>", "svc", ",", "basenode", ",", "route", ",", "start", ",", "end", ",", "session", ",", "has_perm", ")", ":", "<new_line>", "<indent>", "route_array", "=", "Digest", ".", "ParseRoute", "(", "route", ")", "<new_line>", "parent", "="], 500]
[["self", ",", "session", ")", ":", "<new_line>", "<indent>", "_hash", "=", "Util", ".", "HashGen", "(", "self", ".", "path", "(", ")", ",", "'python nb'", ")", "<new_line>", "filename", "=", "''", "<new_line>", "for", "i", "in", "range", "(", "2", ")", ":", "<new_line>", "<indent>", "filename", "+", "=", "(", "'%0x'", "%", "struct", ".", "unpack", "(", "'=I'", ",", "_hash", "[", "(", "i", "*", "4", ")", ":", "(", "(", "i", "+", "1", ")", "*", "4", ")", "]", ")", ")", "<dedent>", "link", "=", "(", "'http://%s/bbscon.php?b=xattach&f=%s'", "%", "(", "session", ".", "GetMirror", "(", "Config", ".", "Config", ".", "GetInt", "(", "'ATTACHMENT_PORT'", ",", "80", ")", ")", ",", "filename", ")", ")", "<new_line>", "linkfile", "=", "(", "'%s/boards/xattach/%s'", "%", "(", "Config", ".", "BBS_ROOT", ",", "filename", ")", ")", "<new_line>", "target", "=", "(", "'../../%s'", "%", "self", ".", "path", "(", ")", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "os", ".", "symlink", "(", "target", ",", "linkfile", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "pass", "<dedent>", "return", "link", "<dedent>", "<dedent>", "class", "Digest", "(", ")", ":", "<new_line>", "<indent>", "root", "=", "DigestItem", "(", "'0Announce'", ")", "<new_line>", "def", "__init__", "(", "self", ",", "board", ",", "path", ")", ":", "<new_line>", "<indent>", "self", ".", "board", "=", "board", "<new_line>", "self", ".", "path", "=", "path", "<new_line>", "self", ".", "root", "=", "DigestItem", "(", "self", ".", "path", ")", "<dedent>", "@", "staticmethod", "def", "GET", "(", "<new_line>", "svc", ",", "session", ",", "params", ",", "action", ")", ":", "<new_line>", "<indent>", "if", "(", "session", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "Unauthorized", "(", "'login first'", ")", "<dedent>", "if", "(", "not", "session", ".", "CheckScope", "(", "'bbs'", ")", ")", ":", "<new_line>", "<indent>", "raise", "NoPerm", "(", "'out of scope'", ")", "<dedent>", "user", "=", "session", ".", "GetUser", "(", ")", "<new_line>", "boardname", "=", "svc", ".", "get_str", "(", "params", ",", "'board'", ",", "''", ")", "<new_line>", "if", "boardname", ":", "<new_line>", "<indent>", "board", "=", "BoardManager", ".", "BoardManager", ".", "GetBoard", "(", "boardname", ")", "<new_line>", "if", "(", "board", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "NotFound", "(", "(", "'board %s not found'", "%", "boardname", ")", ")", "<dedent>", "if", "(", "not", "board", ".", "CheckReadPerm", "(", "user", ")", ")", ":", "<new_line>", "<indent>", "raise", "NoPerm", "(", "'permission denied'", ")", "<dedent>", "basenode", "=", "board", ".", "digest", ".", "root", "<new_line>", "has_perm", "=", "(", "user", ".", "IsDigestMgr", "(", ")", "or", "user", ".", "IsSysop", "(", ")", "or", "user", ".", "IsSuperBM", "(", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "basenode", "=", "Digest", ".", "root", "<new_line>", "has_perm", "=", "user", ".", "IsDigestMgr", "(", ")", "<dedent>", "if", "(", "action", "==", "'list'", ")", ":", "<new_line>", "<indent>", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "<new_line>", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "1", ")", "<new_line>", "end", "=", "svc", ".", "get_int", "(", "params", ",", "'end'", ",", "(", "(", "start", "+", "DEFAULT_DIGEST_LIST_COUNT", ")", "-", "1", ")", ")", "<new_line>", "Digest", ".", "List", "(", "svc", ",", "basenode", ",", "route", ",", "start", ",", "end", ",", "session", ",", "has_perm", ")", "<new_line>", "return", "<dedent>", "elif", "(", "action", "==", "'view'", ")", ":", "<new_line>", "<indent>", "route", "=", "svc", ".", "get_str", "(", "params", ",", "'route'", ")", "<new_line>", "start", "=", "svc", ".", "get_int", "(", "params", ",", "'start'", ",", "0", ")", "<new_line>", "count", "=", "svc", ".", "get_int", "(", "params", ",", "'count'", ",", "0", ")", "<new_line>", "Digest", ".", "View", "(", "svc", ",", "basenode", ",", "route", ",", "session", ",", "has_perm", ",", "start", ",", "count", ")", "<new_line>", "return", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'unknown action %s'", "%", "action", ")", ")", "<dedent>", "<dedent>", "@", "staticmethod", "def", "ParseRoute", "(", "<new_line>", "route", ")", ":", "<new_line>", "<indent>", "ret", "=", "[", "]", "<new_line>", "items", "=", "re", ".", "split", "(", "'-'", ",", "route", ")", "<new_line>", "items", "=", "items", "[", "1", ":", "]", "<new_line>", "for", "item", "in", "items", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "ret", "+", "=", "[", "int", "(", "item", ")", "]", "<dedent>", "except", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'fail to parse route element: %s'", "%", "item", ")", ")", "<dedent>", "<dedent>", "return", "ret", "<dedent>", "@", "staticmethod", "def", "List", "(", "<new_line>", "svc", ",", "basenode", ",", "route", ",", "start", ",", "end", ",", "session", ",", "has_perm", ")", ":", "<new_line>", "<indent>", "route_array", "=", "Digest", ".", "ParseRoute", "(", "route", ")", "<new_line>", "parent", "=", "basenode", ".", "GetItem", "(", "session", ".", "GetUser", "(", ")", ",", "route_array", ",", "has_perm", ")", "<new_line>", "if", "(", "not", "parent", ")", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'route %s does not exist!'", "%", "route", ")", ")", "<dedent>", "if", "(", "not", "parent", ".", "IsDir", "(", ")", ")", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'route %s does not point to a dir!'", "%", "route", ")", ")", "<dedent>", "items", "=", "basenode", ".", "GetRange", "(", "session", ".", "GetUser", "(", ")", ",", "route_array", ",", "start", ",", "end", ",", "has_perm", ")", "<new_line>", "result", "=", "{", "}", "<new_line>", "result", "[", "'parent'", "]", "=", "parent", ".", "GetInfoForUser", "(", "session", ".", "GetUser", "(", ")", ")", "<new_line>", "result", "[", "'count'", "]", "=", "len", "(", "items", ")", "<new_line>", "result_list", "=", "[", "]", "<new_line>", "for", "item", "in", "items", ":", "<new_line>", "<indent>", "result_list", "+", "=", "[", "item", ".", "GetInfoForUser", "(", "session", ".", "GetUser", "(", ")", ")", "]", "<dedent>", "result", "[", "'items'", "]", "=", "result_list", "<new_line>", "svc", ".", "writedata", "(", "json", ".", "dumps", "(", "result", ")", ")", "<dedent>", "@", "staticmethod", "def", "View", "(", "<new_line>", "svc", ",", "basenode", ",", "route", ",", "session", ",", "has_perm", ",", "start", ",", "count", ")", ":", "<new_line>", "<indent>", "route_array", "=", "Digest", ".", "ParseRoute", "(", "route", ")", "<new_line>", "item", "=", "basenode", ".", "GetItem", "(", "session", ".", "GetUser", "(", ")", ",", "route_array", ",", "has_perm", ")", "<new_line>", "if", "(", "not", "item", ")", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'route %s does not exist!'", "%", "route", ")", ")", "<dedent>", "if", "(", "not", "item", ".", "IsFile", "(", ")", ")", ":", "<new_line>", "<indent>", "raise", "WrongArgs", "(", "(", "'route %s does not point to a file'", "%", "route", ")", ")", "<dedent>", "result", "=", "{", "}", "<new_line>", "result", "[", "'item'", "]", "=", "item", ".", "GetInfoForUser", "(", "session", ".", "GetUser", "(", ")", ")", "<new_line>", "postinfo", "=", "Post", ".", "Post", "(", "item", ".", "realpath", "(", ")", ",", "None", ")", "<new_line>", "(", "result", "[", "'content'", "]", ",", "result", "[", "'has_end'", "]", ")", "=", "postinfo", ".", "GetContent", "(", "start", ",", "count", ")", "<new_line>", "attachlist", "=", "postinfo", ".", "GetAttachListByType", "(", ")", "<new_line>", "result", "[", "'picattach'", "]", "=", "attachlist", "[", "0", "]", "<new_line>", "result", "[", "'otherattach'", "]", "=", "attachlist", "[", "1", "]", "<new_line>", "if", "(", "attachlist", "[", "0", "]", "or", "attachlist", "[", "1", "]", ")", ":", "<new_line>", "<indent>", "result", "[", "'attachlink'", "]", "=", "item", ".", "GetAttachLink", "(", "session", ")", "<dedent>", "svc", ".", "writedata", "(", "json", ".", "dumps", "(", "result", ")", ")", "<dedent>", "<dedent>"], 632]
[["import", "time", "<new_line>", "import", "UserManager", "<new_line>", "import", "UserInfo", "<new_line>", "from", "Session", "import", "Session", "<new_line>", "from", "Log", "import", "Log", "<new_line>", "import", "UCache", "<new_line>", "import", "Config", "<new_line>", "import", "MsgBox", "<new_line>", "import", "xmpp", "<new_line>", "import", "modes", "<new_line>", "import", "Util", "<new_line>", "import", "traceback", "<new_line>", "import", "os", "<new_line>", "from", "xmpp.features", "import", "NoRoute", "<new_line>", "__disco_info_ns__", "=", "'http://jabber.org/protocol/disco#info'", "<new_line>", "__disco_items_ns__", "=", "'http://jabber.org/protocol/disco#items'", "<new_line>", "__vcard_ns__", "=", "'vcard-temp'", "<new_line>", "STEAL_AFTER_SEEN", "=", "3", "<new_line>", "def", "elem_to_str", "(", "elem", ")", ":", "<new_line>", "<indent>", "return", "(", "'<%r %r>%r</>'", "%", "(", "elem", ".", "tag", ",", "elem", ".", "attrib", ",", "elem", ".", "text", ")", ")", "<dedent>", "class", "XMPPServer", "(", "xmpp", ".", "Plugin", ")", ":", "<new_line>", "<indent>", "'XMPP server for the BBS'", "<new_line>", "def", "__init__", "(", "self", ",", "rosters", ",", "host", ")", ":", "<new_line>", "<indent>", "self", ".", "probed", "=", "False", "<new_line>", "self", ".", "_closed", "=", "False", "<new_line>", "self", ".", "rosters", "=", "rosters", "<new_line>", "self", ".", "_session", "=", "None", "<new_line>", "self", ".", "rosters", ".", "set_resources", "(", "self", ".", "get_resources", "(", ")", ")", "<new_line>", "self", ".", "_fixedjid", "=", "UCache", ".", "UCache", ".", "formalize_jid", "(", "unicode", "(", "self", ".", "authJID", ")", ")", "<new_line>", "self", ".", "_userid", "=", "self", ".", "_fixedjid", ".", "partition", "(", "'@'", ")", "[", "0", "]", ".", "encode", "(", "'gbk'", ")", "<new_line>", "if", "(", "not", "self", ".", "rosters", ".", "allow_login", "(", "self", ".", "authJID", ".", "bare", ")", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'user %s login denied'", "%", "self", ".", "_userid", ")", ")", "<new_line>", "self", ".", "stream_error", "(", "'policy-violation'", ",", "'Login denied. Too many logins?'", ")", "<new_line>", "return", "<dedent>", "Log", ".", "info", "(", "(", "'%s: session start'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "<new_line>", "if", "(", "(", "self", ".", "authJID", ".", "resource", "[", ":", "(", "-", "8", ")", "]", "!=", "'Resource'", ")", "and", "(", "len", "(", "self", ".", "authJID", ".", "resource", ")", ">", "8", ")", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "routes", "=", "self", ".", "routes", "(", "self", ".", "authJID", ".", "bare", ")", "<new_line>", "for", "route", "in", "routes", ":", "<new_line>", "<indent>", "jid", "=", "route", "[", "0", "]", "<new_line>", "if", "(", "jid", ".", "resource", "[", ":", "(", "-", "8", ")", "]", "==", "self", ".", "authJID", ".", "resource", "[", ":", "(", "-", "8", ")", "]", ")", ":", "<new_line>", "<indent>", "if", "(", "jid", ".", "resource", "!=", "self", ".", "authJID", ".", "resource", ")", ":", "<new_line>", "<indent>", "Log", ".", "info", "(", "(", "'old jid: %s %r'", "%", "(", "jid", ".", "full", ",", "route", "[", "1", "]", ")", ")", ")", "<new_line>", "route", "[", "1", "]", ".", "stream_error", "(", "'conflict'", ",", "'A new client with the same resource connected'", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "Log", ".", "info", "(", "(", "'another me: %s %r'", "%", "(", "jid", ".", "full", ",", "route", "[", "1", "]", ")", ")", ")", "<dedent>", "<dedent>", "<dedent>", "except", "NoRoute", ":", "<new_line>", "<indent>", "pass", "<dedent>", "Log", ".", "debug", "(", "(", "'%s: checked for old sessions'", "%", "self", ".", "authJID", ".", "full", ")", ")", "<dedent>", "self", ".", "_user", "=", "UserManager", ".", "UserManager", ".", "LoadUser", "(", "self", ".", "_userid", ")", "<new_line>", "if", "(", "self", ".", "_user", "==", "None", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'How can that be!'", ")", "<dedent>", "self", ".", "_peer_addr", "=", "self", ".", "getpeername", "(", ")", "<new_line>", "self", ".", "_session", "=", "Session", "(", "self", ".", "_user", ",", "self", ".", "_peer_addr", "[", "0", "]", ")", "<new_line>", "self", ".", "_session", ".", "RecordLogin", "(", ")", "<new_line>", "self", ".", "_userinfo", "=", "self", ".", "_session", ".", "Register", "(", ")", "<new_line>", "self", ".", "_loginid", "=", "self", ".", "_session", ".", "utmpent", "<new_line>", "self", ".", "_hostname", "=", "host", "<new_line>", "self", ".", "bind", "(", "xmpp", ".", "ReceivedCloseStream", ",", "self", ".", "recv_close", ")", "<new_line>", "self", ".", "bind", "(", "xmpp", ".", "StreamClosed", ",", "self", ".", "stream_closed", ")", "<new_line>", "self", ".", "bind", "(", "xmpp", ".", "SentCloseStream", ",", "self", ".", "sent_close", ")", "<new_line>", "self", ".", "rosters", ".", "register_conn", "(", "self", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "if", "(", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "is", "None", ")", ":", "<new_line>", "<indent>", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "(", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "-", "msgbox", ".", "GetUnreadCount", "(", ")", ")", ")", "<dedent>", "self", ".", "check_msg", "(", ")", "<dedent>", "def", "get_loginid", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "_loginid", "<dedent>", "def", "recv_close", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'%s: close because he wants to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "<new_line>", "return", "self", ".", "close", "(", ")", "<dedent>", "def", "stream_closed", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'%s: close because stream closed'", "%", "self", ".", "authJID", ".", "full", ")", ")", "<new_line>", "return", "self", ".", "close", "(", ")", "<dedent>", "def", "sent_close", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'%s: close because we want to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "<new_line>", "return", "self", ".", "close", "(", ")", "<dedent>", "def", "close", "(", "self", ")", ":", "<new_line>", "<indent>", "if", "self", ".", "_closed", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "'already closed. ignore'", ")", "<new_line>", "return", "<dedent>", "self", ".", "_closed", "=", "True", "<new_line>", "Log", ".", "info", "(", "(", "'%s: session end'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "<new_line>", "if", "self", ".", "_session", ":", "<new_line>", "<indent>", "self", ".", "_session", ".", "Unregister", "(", ")", "<dedent>", "self", ".", "unbind_res", "(", ")", "<new_line>", "self", ".", "rosters", ".", "unregister_conn", "(", "self", ")", "<dedent>", "@", "xmpp", ".", "iq", "(", "'{urn:xmpp:ping}ping'", ")", "def", "ping", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "'Handle ping requests'", "<new_line>", "self", ".", "refresh", "(", ")", "<new_line>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "<dedent>", "@", "xmpp", ".", "stanza", "(", "'message'", ")", "def", "message", "(", "<new_line>", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "'Proxy message from one user to another'", "<new_line>", "to_jid", "=", "elem", ".", "get", "(", "'to'", ")", "<new_line>", "from_jid", "=", "elem", ".", "get", "(", "'from'", ")", "<new_line>", "if", "(", "from_jid", "==", "None", ")", ":", "<new_line>", "<indent>", "return", "<dedent>", "text_body", "=", "None", "<new_line>", "for", "child", "in", "elem", ":", "<new_line>", "<indent>", "if", "child", ".", "tag", ".", "endswith", "(", "'}body'", ")", ":", "<new_line>", "<indent>", "text_body", "=", "child", ".", "text", "<dedent>", "<dedent>", "if", "(", "text_body", "==", "None", ")", ":", "<new_line>", "<indent>", "return", "<dedent>", "ret", "=", "self", ".", "rosters", ".", "send_msg", "(", "from_jid", ",", "to_jid", ",", "text_body", ")", "<new_line>", "if", "(", "ret", "<=", "0", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'sendmsg() failed to %s from %s error %d'", "%", "(", "to_jid", ",", "from_jid", ",", "ret", ")", ")"], 0]
[["<new_line>", "self", ".", "_session", ".", "RecordLogin", "(", ")", "<new_line>", "self", ".", "_userinfo", "=", "self", ".", "_session", ".", "Register", "(", ")", "<new_line>", "self", ".", "_loginid", "=", "self", ".", "_session", ".", "utmpent", "<new_line>", "self", ".", "_hostname", "=", "host", "<new_line>", "self", ".", "bind", "(", "xmpp", ".", "ReceivedCloseStream", ",", "self", ".", "recv_close", ")", "<new_line>", "self", ".", "bind", "(", "xmpp", ".", "StreamClosed", ",", "self", ".", "stream_closed", ")", "<new_line>", "self", ".", "bind", "(", "xmpp", ".", "SentCloseStream", ",", "self", ".", "sent_close", ")", "<new_line>", "self", ".", "rosters", ".", "register_conn", "(", "self", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "if", "(", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "is", "None", ")", ":", "<new_line>", "<indent>", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "(", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "-", "msgbox", ".", "GetUnreadCount", "(", ")", ")", ")", "<dedent>", "self", ".", "check_msg", "(", ")", "<dedent>", "def", "get_loginid", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "_loginid", "<dedent>", "def", "recv_close", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'%s: close because he wants to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "<new_line>", "return", "self", ".", "close", "(", ")", "<dedent>", "def", "stream_closed", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'%s: close because stream closed'", "%", "self", ".", "authJID", ".", "full", ")", ")", "<new_line>", "return", "self", ".", "close", "(", ")", "<dedent>", "def", "sent_close", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'%s: close because we want to'", "%", "self", ".", "authJID", ".", "full", ")", ")", "<new_line>", "return", "self", ".", "close", "(", ")", "<dedent>", "def", "close", "(", "self", ")", ":", "<new_line>", "<indent>", "if", "self", ".", "_closed", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "'already closed. ignore'", ")", "<new_line>", "return", "<dedent>", "self", ".", "_closed", "=", "True", "<new_line>", "Log", ".", "info", "(", "(", "'%s: session end'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "<new_line>", "if", "self", ".", "_session", ":", "<new_line>", "<indent>", "self", ".", "_session", ".", "Unregister", "(", ")", "<dedent>", "self", ".", "unbind_res", "(", ")", "<new_line>", "self", ".", "rosters", ".", "unregister_conn", "(", "self", ")", "<dedent>", "@", "xmpp", ".", "iq", "(", "'{urn:xmpp:ping}ping'", ")", "def", "ping", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "'Handle ping requests'", "<new_line>", "self", ".", "refresh", "(", ")", "<new_line>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "<dedent>", "@", "xmpp", ".", "stanza", "(", "'message'", ")", "def", "message", "(", "<new_line>", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "'Proxy message from one user to another'", "<new_line>", "to_jid", "=", "elem", ".", "get", "(", "'to'", ")", "<new_line>", "from_jid", "=", "elem", ".", "get", "(", "'from'", ")", "<new_line>", "if", "(", "from_jid", "==", "None", ")", ":", "<new_line>", "<indent>", "return", "<dedent>", "text_body", "=", "None", "<new_line>", "for", "child", "in", "elem", ":", "<new_line>", "<indent>", "if", "child", ".", "tag", ".", "endswith", "(", "'}body'", ")", ":", "<new_line>", "<indent>", "text_body", "=", "child", ".", "text", "<dedent>", "<dedent>", "if", "(", "text_body", "==", "None", ")", ":", "<new_line>", "<indent>", "return", "<dedent>", "ret", "=", "self", ".", "rosters", ".", "send_msg", "(", "from_jid", ",", "to_jid", ",", "text_body", ")", "<new_line>", "if", "(", "ret", "<=", "0", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'sendmsg() failed to %s from %s error %d'", "%", "(", "to_jid", ",", "from_jid", ",", "ret", ")", ")", ")", "<new_line>", "errors", "=", "{", "<new_line>", "(", "-", "1", ")", ":", "'That user has locked screen, please send later.'", ",", "<new_line>", "(", "-", "11", ")", ":", "'That user denied your message.'", ",", "<new_line>", "(", "-", "12", ")", ":", "'That user has too many unread messages. Please send later.'", ",", "<new_line>", "(", "-", "13", ")", ":", "'User has gone after message sent.'", ",", "<new_line>", "(", "-", "14", ")", ":", "'User has gone before message sent.'", ",", "<new_line>", "(", "-", "2", ")", ":", "'User has gone before message sent.'", ",", "<new_line>", "(", "-", "21", ")", ":", "'Error when sending message!'", "}", "<new_line>", "if", "(", "ret", "in", "errors", ")", ":", "<new_line>", "<indent>", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "to_jid", ",", "<new_line>", "'to'", ":", "from_jid", ",", "<new_line>", "'type'", ":", "'error'", "}", ",", "<new_line>", "self", ".", "E", ".", "body", "(", "errors", "[", "ret", "]", ")", ")", "<new_line>", "self", ".", "recv", "(", "from_jid", ",", "elem", ")", "<dedent>", "<dedent>", "<dedent>", "def", "make_jid", "(", "self", ",", "userid", ")", ":", "<new_line>", "<indent>", "return", "(", "'%s@%s'", "%", "(", "userid", ",", "self", ".", "_hostname", ")", ")", "<dedent>", "def", "refresh", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "_userinfo", ".", "freshtime", "=", "int", "(", "time", ".", "time", "(", ")", ")", "<new_line>", "self", ".", "_userinfo", ".", "save", "(", ")", "<dedent>", "def", "ping_result", "(", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "self", ".", "refresh", "(", ")", "<dedent>", "def", "ping_client", "(", "self", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "pingelem", "=", "self", ".", "E", ".", "ping", "(", "xmlns", "=", "'urn:xmpp:ping'", ")", "<new_line>", "return", "self", ".", "iq", "(", "'get'", ",", "self", ".", "ping_result", ",", "pingelem", ")", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'ping client %r failed: %r'", "%", "(", "self", ".", "authJID", ",", "e", ")", ")", ")", "<new_line>", "Log", ".", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "<new_line>", "return", "False", "<dedent>", "<dedent>", "def", "get_uid", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "_user", ".", "GetUID", "(", ")", "<dedent>", "def", "recv_msg", "(", "self", ",", "from_", ",", "msgtext", ")", ":", "<new_line>", "<indent>", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "from_", ",", "'to'", ":", "unicode", "(", "self", ".", "authJID", ")", "}", ",", "<new_line>", "self", ".", "E", ".", "body", "(", "msgtext", ")", ")", "<new_line>", "self", ".", "recv", "(", "unicode", "(", "self", ".", "authJID", ")", ",", "elem", ")", "<dedent>", "def", "check_msg", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'checking msg for %s'", "%", "self", ".", "_userid", ")", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "<new_line>", "my_pid", "=", "os", ".", "getpid", "(", ")", "<new_line>", "xmpp_read", "=", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "<new_line>", "if", "(", "xmpp_read", ">", "msg_count", ")", ":", "<new_line>", "<indent>", "xmpp_read", "=", "0", "<dedent>", "Log", ".", "debug", "(", "(", "'total: %d xmpp read: %d'", "%", "(", "msg_count", ",", "xmpp_read", ")", ")", ")", "<new_line>", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "msg_count", ")", "<new_line>", "if", "(", "xmpp_read", "<", "msg_count", ")", ":", "<new_line>", "<indent>", "return", "xmpp_read", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "(", "-", "1", ")", "<dedent>", "<dedent>", "def", "deliver_msg", "(", "self", ",", "start", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'deliver msg to %s'", "%", "unicode", "("], 500]
[[")", "<new_line>", "errors", "=", "{", "<new_line>", "(", "-", "1", ")", ":", "'That user has locked screen, please send later.'", ",", "<new_line>", "(", "-", "11", ")", ":", "'That user denied your message.'", ",", "<new_line>", "(", "-", "12", ")", ":", "'That user has too many unread messages. Please send later.'", ",", "<new_line>", "(", "-", "13", ")", ":", "'User has gone after message sent.'", ",", "<new_line>", "(", "-", "14", ")", ":", "'User has gone before message sent.'", ",", "<new_line>", "(", "-", "2", ")", ":", "'User has gone before message sent.'", ",", "<new_line>", "(", "-", "21", ")", ":", "'Error when sending message!'", "}", "<new_line>", "if", "(", "ret", "in", "errors", ")", ":", "<new_line>", "<indent>", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "to_jid", ",", "<new_line>", "'to'", ":", "from_jid", ",", "<new_line>", "'type'", ":", "'error'", "}", ",", "<new_line>", "self", ".", "E", ".", "body", "(", "errors", "[", "ret", "]", ")", ")", "<new_line>", "self", ".", "recv", "(", "from_jid", ",", "elem", ")", "<dedent>", "<dedent>", "<dedent>", "def", "make_jid", "(", "self", ",", "userid", ")", ":", "<new_line>", "<indent>", "return", "(", "'%s@%s'", "%", "(", "userid", ",", "self", ".", "_hostname", ")", ")", "<dedent>", "def", "refresh", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "_userinfo", ".", "freshtime", "=", "int", "(", "time", ".", "time", "(", ")", ")", "<new_line>", "self", ".", "_userinfo", ".", "save", "(", ")", "<dedent>", "def", "ping_result", "(", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "self", ".", "refresh", "(", ")", "<dedent>", "def", "ping_client", "(", "self", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "pingelem", "=", "self", ".", "E", ".", "ping", "(", "xmlns", "=", "'urn:xmpp:ping'", ")", "<new_line>", "return", "self", ".", "iq", "(", "'get'", ",", "self", ".", "ping_result", ",", "pingelem", ")", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'ping client %r failed: %r'", "%", "(", "self", ".", "authJID", ",", "e", ")", ")", ")", "<new_line>", "Log", ".", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "<new_line>", "return", "False", "<dedent>", "<dedent>", "def", "get_uid", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "_user", ".", "GetUID", "(", ")", "<dedent>", "def", "recv_msg", "(", "self", ",", "from_", ",", "msgtext", ")", ":", "<new_line>", "<indent>", "elem", "=", "self", ".", "E", ".", "message", "(", "{", "'from'", ":", "from_", ",", "'to'", ":", "unicode", "(", "self", ".", "authJID", ")", "}", ",", "<new_line>", "self", ".", "E", ".", "body", "(", "msgtext", ")", ")", "<new_line>", "self", ".", "recv", "(", "unicode", "(", "self", ".", "authJID", ")", ",", "elem", ")", "<dedent>", "def", "check_msg", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'checking msg for %s'", "%", "self", ".", "_userid", ")", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "<new_line>", "my_pid", "=", "os", ".", "getpid", "(", ")", "<new_line>", "xmpp_read", "=", "self", ".", "rosters", ".", "get_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ")", "<new_line>", "if", "(", "xmpp_read", ">", "msg_count", ")", ":", "<new_line>", "<indent>", "xmpp_read", "=", "0", "<dedent>", "Log", ".", "debug", "(", "(", "'total: %d xmpp read: %d'", "%", "(", "msg_count", ",", "xmpp_read", ")", ")", ")", "<new_line>", "self", ".", "rosters", ".", "set_xmpp_read", "(", "self", ".", "_user", ".", "GetUID", "(", ")", ",", "msg_count", ")", "<new_line>", "if", "(", "xmpp_read", "<", "msg_count", ")", ":", "<new_line>", "<indent>", "return", "xmpp_read", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "(", "-", "1", ")", "<dedent>", "<dedent>", "def", "deliver_msg", "(", "self", ",", "start", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'deliver msg to %s'", "%", "unicode", "(", "self", ".", "authJID", ")", ")", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "<new_line>", "my_pid", "=", "os", ".", "getpid", "(", ")", "<new_line>", "for", "i", "in", "range", "(", "start", ",", "msg_count", ")", ":", "<new_line>", "<indent>", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "<new_line>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "<new_line>", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "<dedent>", "<dedent>", "<dedent>", "def", "steal_msg", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'stealing msg for %s'", "%", "self", ".", "_userid", ")", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "<new_line>", "msg_unread", "=", "msgbox", ".", "GetUnreadCount", "(", ")", "<new_line>", "read_count", "=", "(", "msg_count", "-", "msg_unread", ")", "<new_line>", "my_pid", "=", "os", ".", "getpid", "(", ")", "<new_line>", "term_read", "=", "self", ".", "rosters", ".", "get_term_read", "(", "self", ".", "get_uid", "(", ")", ")", "<new_line>", "term_stealed", "=", "self", ".", "rosters", ".", "get_term_stealed", "(", "self", ".", "get_uid", "(", ")", ")", "<new_line>", "all_xmpp", "=", "True", "<new_line>", "new_unread", "=", "{", "}", "<new_line>", "for", "i", "in", "range", "(", "(", "read_count", "-", "1", ")", ",", "msg_count", ")", ":", "<new_line>", "<indent>", "if", "(", "i", "<", "0", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "<new_line>", "if", "(", "(", "i", ">=", "read_count", ")", "and", "all_xmpp", ")", ":", "<new_line>", "<indent>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "msgbox", ".", "GetUnreadMsg", "(", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "all_xmpp", "=", "False", "<dedent>", "<dedent>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "if", "(", "i", "<", "read_count", ")", ":", "<new_line>", "<indent>", "session", "=", "self", ".", "rosters", ".", "find_session", "(", "self", ".", "authJID", ".", "bare", ",", "msghead", ".", "topid", ")", "<new_line>", "if", "(", "(", "session", "is", "None", ")", "or", "(", "session", ".", "get_mode", "(", ")", "!=", "modes", ".", "MSG", ")", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "Log", ".", "debug", "(", "(", "'considered msg %d as unread'", "%", "i", ")", ")", "<dedent>", "if", "(", "msghead", ".", "topid", "not in", "new_unread", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'for pid %d, first unread at %d'", "%", "(", "msghead", ".", "topid", ",", "i", ")", ")", ")", "<new_line>", "new_unread", "[", "msghead", ".", "topid", "]", "=", "i", "<dedent>", "<dedent>", "final_unread", "=", "{", "}", "<new_line>", "to_steal", "=", "{", "}", "<new_line>", "to_steal_begin", "=", "msg_count", "<new_line>", "for", "pid", "in", "term_read", ":", "<new_line>", "<indent>", "if", "(", "pid", "in", "new_unread", ")", ":", "<new_line>", "<indent>", "if", "(", "new_unread", "[", "pid", "]", "==", "term_read", "[", "pid", "]", "[", "0", "]", ")", ":", "<new_line>", "<indent>", "final_unread", "[", "pid", "]", "=", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1", ")", ")", "<new_line>", "Log", ".", "debug", "(", "(", "'.. still unread: %d for %d, %d times'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1"], 500]
[["self", ".", "authJID", ")", ")", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "<new_line>", "my_pid", "=", "os", ".", "getpid", "(", ")", "<new_line>", "for", "i", "in", "range", "(", "start", ",", "msg_count", ")", ":", "<new_line>", "<indent>", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "<new_line>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "<new_line>", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "<dedent>", "<dedent>", "<dedent>", "def", "steal_msg", "(", "self", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'stealing msg for %s'", "%", "self", ".", "_userid", ")", ")", "<new_line>", "msgbox", "=", "MsgBox", ".", "MsgBox", "(", "self", ".", "_userid", ")", "<new_line>", "msg_count", "=", "msgbox", ".", "GetMsgCount", "(", "all", "=", "False", ")", "<new_line>", "msg_unread", "=", "msgbox", ".", "GetUnreadCount", "(", ")", "<new_line>", "read_count", "=", "(", "msg_count", "-", "msg_unread", ")", "<new_line>", "my_pid", "=", "os", ".", "getpid", "(", ")", "<new_line>", "term_read", "=", "self", ".", "rosters", ".", "get_term_read", "(", "self", ".", "get_uid", "(", ")", ")", "<new_line>", "term_stealed", "=", "self", ".", "rosters", ".", "get_term_stealed", "(", "self", ".", "get_uid", "(", ")", ")", "<new_line>", "all_xmpp", "=", "True", "<new_line>", "new_unread", "=", "{", "}", "<new_line>", "for", "i", "in", "range", "(", "(", "read_count", "-", "1", ")", ",", "msg_count", ")", ":", "<new_line>", "<indent>", "if", "(", "i", "<", "0", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "<new_line>", "if", "(", "(", "i", ">=", "read_count", ")", "and", "all_xmpp", ")", ":", "<new_line>", "<indent>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "msgbox", ".", "GetUnreadMsg", "(", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "all_xmpp", "=", "False", "<dedent>", "<dedent>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "if", "(", "i", "<", "read_count", ")", ":", "<new_line>", "<indent>", "session", "=", "self", ".", "rosters", ".", "find_session", "(", "self", ".", "authJID", ".", "bare", ",", "msghead", ".", "topid", ")", "<new_line>", "if", "(", "(", "session", "is", "None", ")", "or", "(", "session", ".", "get_mode", "(", ")", "!=", "modes", ".", "MSG", ")", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "Log", ".", "debug", "(", "(", "'considered msg %d as unread'", "%", "i", ")", ")", "<dedent>", "if", "(", "msghead", ".", "topid", "not in", "new_unread", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'for pid %d, first unread at %d'", "%", "(", "msghead", ".", "topid", ",", "i", ")", ")", ")", "<new_line>", "new_unread", "[", "msghead", ".", "topid", "]", "=", "i", "<dedent>", "<dedent>", "final_unread", "=", "{", "}", "<new_line>", "to_steal", "=", "{", "}", "<new_line>", "to_steal_begin", "=", "msg_count", "<new_line>", "for", "pid", "in", "term_read", ":", "<new_line>", "<indent>", "if", "(", "pid", "in", "new_unread", ")", ":", "<new_line>", "<indent>", "if", "(", "new_unread", "[", "pid", "]", "==", "term_read", "[", "pid", "]", "[", "0", "]", ")", ":", "<new_line>", "<indent>", "final_unread", "[", "pid", "]", "=", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1", ")", ")", "<new_line>", "Log", ".", "debug", "(", "(", "'.. still unread: %d for %d, %d times'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ",", "(", "term_read", "[", "pid", "]", "[", "1", "]", "+", "1", ")", ")", ")", ")", "<new_line>", "if", "(", "final_unread", "[", "pid", "]", "[", "1", "]", ">", "STEAL_AFTER_SEEN", ")", ":", "<new_line>", "<indent>", "to_steal", "[", "pid", "]", "=", "final_unread", "[", "pid", "]", "<new_line>", "Log", ".", "debug", "(", "(", "\".. let's steal! %d+ from %d\"", "%", "(", "to_steal", "[", "pid", "]", "[", "0", "]", ",", "pid", ")", ")", ")", "<new_line>", "if", "(", "pid", "in", "term_stealed", ")", ":", "<new_line>", "<indent>", "steal_begin", "=", "max", "(", "final_unread", "[", "pid", "]", "[", "0", "]", ",", "(", "term_stealed", "[", "pid", "]", "+", "1", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "steal_begin", "=", "final_unread", "[", "pid", "]", "[", "0", "]", "<dedent>", "if", "(", "steal_begin", "<", "to_steal_begin", ")", ":", "<new_line>", "<indent>", "to_steal_begin", "=", "steal_begin", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "<new_line>", "Log", ".", "debug", "(", "(", "'.. moved: %d->%d for %d'", "%", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'.. disappeared: %d'", "%", "pid", ")", ")", "<new_line>", "pass", "<dedent>", "<dedent>", "for", "pid", "in", "new_unread", ":", "<new_line>", "<indent>", "if", "(", "pid", "not in", "term_read", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'.. new unread: %d for %d'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "<new_line>", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "<dedent>", "<dedent>", "if", "to_steal", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'steal starting from %d'", "%", "to_steal_begin", ")", ")", "<new_line>", "for", "i", "in", "range", "(", "to_steal_begin", ",", "msg_count", ")", ":", "<new_line>", "<indent>", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "<new_line>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'skip xmpp %d for %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "<new_line>", "msgbox", ".", "GetUnreadMsg", "(", ")", "<dedent>", "elif", "(", "msghead", ".", "topid", "in", "to_steal", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "msghead", ".", "topid", "not in", "term_stealed", ")", "or", "(", "i", ">", "term_stealed", "[", "msghead", ".", "topid", "]", ")", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'steal! %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "<new_line>", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "<new_line>", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "<new_line>", "term_stealed", "[", "msghead", ".", "topid", "]", "=", "i", "<dedent>", "else", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'already stealed: %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "self", ".", "rosters", ".", "set_term_read", "(", "self", ".", "get_uid", "(", ")", ",", "final_unread", ")", "<dedent>", "@", "xmpp", ".", "stanza", "(", "'presence'", ")", "def", "presence", "(", "<new_line>", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "'Presence information may be sent out from the client or\\n        received from another account.'", "<new_line>", "Log", ".", "warn", "(", "(", "'handle presence. me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "<new_line>", "if", "(", "self", ".", "authJID", "==", "elem", ".", "get", "(", "'from'", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "elem", ".", "get", "(", "'to'", ")", "==", "None", ")", "or", "(", "not", "self", ".", "authJID", ".", "match_bare", "("], 500]
[[")", ")", ")", ")", "<new_line>", "if", "(", "final_unread", "[", "pid", "]", "[", "1", "]", ">", "STEAL_AFTER_SEEN", ")", ":", "<new_line>", "<indent>", "to_steal", "[", "pid", "]", "=", "final_unread", "[", "pid", "]", "<new_line>", "Log", ".", "debug", "(", "(", "\".. let's steal! %d+ from %d\"", "%", "(", "to_steal", "[", "pid", "]", "[", "0", "]", ",", "pid", ")", ")", ")", "<new_line>", "if", "(", "pid", "in", "term_stealed", ")", ":", "<new_line>", "<indent>", "steal_begin", "=", "max", "(", "final_unread", "[", "pid", "]", "[", "0", "]", ",", "(", "term_stealed", "[", "pid", "]", "+", "1", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "steal_begin", "=", "final_unread", "[", "pid", "]", "[", "0", "]", "<dedent>", "if", "(", "steal_begin", "<", "to_steal_begin", ")", ":", "<new_line>", "<indent>", "to_steal_begin", "=", "steal_begin", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "<new_line>", "Log", ".", "debug", "(", "(", "'.. moved: %d->%d for %d'", "%", "(", "term_read", "[", "pid", "]", "[", "0", "]", ",", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'.. disappeared: %d'", "%", "pid", ")", ")", "<new_line>", "pass", "<dedent>", "<dedent>", "for", "pid", "in", "new_unread", ":", "<new_line>", "<indent>", "if", "(", "pid", "not in", "term_read", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'.. new unread: %d for %d'", "%", "(", "new_unread", "[", "pid", "]", ",", "pid", ")", ")", ")", "<new_line>", "final_unread", "[", "pid", "]", "=", "(", "new_unread", "[", "pid", "]", ",", "1", ")", "<dedent>", "<dedent>", "if", "to_steal", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'steal starting from %d'", "%", "to_steal_begin", ")", ")", "<new_line>", "for", "i", "in", "range", "(", "to_steal_begin", ",", "msg_count", ")", ":", "<new_line>", "<indent>", "msghead", "=", "msgbox", ".", "LoadMsgHead", "(", "i", ",", "all", "=", "False", ")", "<new_line>", "if", "(", "msghead", ".", "topid", "==", "my_pid", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'skip xmpp %d for %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "<new_line>", "msgbox", ".", "GetUnreadMsg", "(", ")", "<dedent>", "elif", "(", "msghead", ".", "topid", "in", "to_steal", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "msghead", ".", "topid", "not in", "term_stealed", ")", "or", "(", "i", ">", "term_stealed", "[", "msghead", ".", "topid", "]", ")", ")", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'steal! %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "<new_line>", "msgtext", "=", "msgbox", ".", "LoadMsgText", "(", "msghead", ")", "<new_line>", "self", ".", "recv_msg", "(", "self", ".", "make_jid", "(", "msghead", ".", "id", ")", ",", "msgtext", ")", "<new_line>", "term_stealed", "[", "msghead", ".", "topid", "]", "=", "i", "<dedent>", "else", ":", "<new_line>", "<indent>", "Log", ".", "debug", "(", "(", "'already stealed: %d from %d'", "%", "(", "i", ",", "msghead", ".", "topid", ")", ")", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "self", ".", "rosters", ".", "set_term_read", "(", "self", ".", "get_uid", "(", ")", ",", "final_unread", ")", "<dedent>", "@", "xmpp", ".", "stanza", "(", "'presence'", ")", "def", "presence", "(", "<new_line>", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "'Presence information may be sent out from the client or\\n        received from another account.'", "<new_line>", "Log", ".", "warn", "(", "(", "'handle presence. me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "<new_line>", "if", "(", "self", ".", "authJID", "==", "elem", ".", "get", "(", "'from'", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "elem", ".", "get", "(", "'to'", ")", "==", "None", ")", "or", "(", "not", "self", ".", "authJID", ".", "match_bare", "(", "elem", ".", "get", "(", "'to'", ")", ")", ")", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "send_presence", "(", "elem", ")", "<dedent>", "<dedent>", "self", ".", "recv_presence", "(", "elem", ")", "<dedent>", "def", "send_presence", "(", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'send_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "<new_line>", "direct", "=", "elem", ".", "get", "(", "'to'", ")", "<new_line>", "if", "(", "not", "direct", ")", ":", "<new_line>", "<indent>", "self", ".", "rosters", ".", "broadcast", "(", "self", ",", "elem", ")", "<new_line>", "if", "(", "elem", ".", "get", "(", "'type'", ")", "!=", "'probe'", ")", ":", "<new_line>", "<indent>", "self", ".", "recv_presence", "(", "elem", ")", "<dedent>", "if", "(", "not", "self", ".", "probed", ")", ":", "<new_line>", "<indent>", "self", ".", "probed", "=", "True", "<new_line>", "self", ".", "rosters", ".", "probe", "(", "self", ")", "<dedent>", "<dedent>", "elif", "(", "not", "self", ".", "rosters", ".", "send", "(", "self", ",", "direct", ",", "elem", ")", ")", ":", "<new_line>", "<indent>", "self", ".", "send", "(", "direct", ",", "elem", ")", "<dedent>", "<dedent>", "def", "recv_presence", "(", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'recv_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "<new_line>", "if", "(", "not", "self", ".", "rosters", ".", "recv", "(", "self", ",", "elem", ")", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "'\\tsending it to client'", ")", "<new_line>", "self", ".", "write", "(", "elem", ")", "<dedent>", "<dedent>", "@", "xmpp", ".", "iq", "(", "'{jabber:iq:roster}query'", ")", "def", "roster", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "\"A roster is this account's list of contacts; it may be\\n        fetched or updated.\"", "<new_line>", "roster", "=", "self", ".", "rosters", ".", "get", "(", "self", ")", "<new_line>", "method", "=", "getattr", "(", "self", ",", "(", "'%s_roster'", "%", "iq", ".", "get", "(", "'type'", ")", ")", ")", "<new_line>", "return", "(", "method", "and", "method", "(", "iq", ",", "roster", ")", ")", "<dedent>", "def", "get_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "'jabber:iq:roster'", "}", ")", "<new_line>", "for", "item", "in", "roster", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "item", ")", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ")", "<dedent>", "def", "set_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "xmlns", "=", "'jabber:iq:roster'", ")", "<new_line>", "for", "item", "in", "iq", "[", "0", "]", ":", "<new_line>", "<indent>", "result", "=", "roster", ".", "set", "(", "item", ")", "<new_line>", "if", "(", "result", "is not", "None", ")", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "result", ")", "<dedent>", "<dedent>", "if", "(", "len", "(", "query", ")", ">", "0", ")", ":", "<new_line>", "<indent>", "self", ".", "push", "(", "roster", ",", "query", ")", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "<dedent>", "def", "push", "(", "self", ",", "roster", ",", "query", ")", ":", "<new_line>", "<indent>", "'Push roster changes to all clients that have requested this\\n        roster.'", "<new_line>", "for", "jid", "in", "roster", ".", "requests", "(", ")", ":", "<new_line>", "<indent>", "for", "(", "to", ",", "route", ")", "in", "self", ".", "routes", "(", "jid", ")", ":", "<new_line>", "<indent>", "route", ".", "iq", "(", "'set'", ",", "self", ".", "ignore", ",", "query", ")", "<dedent>", "<dedent>", "<dedent>", "def", "ignore", "(", "self", ",", "iq", ")", ":", "<new_line>", "<indent>"], 500]
[["elem", ".", "get", "(", "'to'", ")", ")", ")", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "send_presence", "(", "elem", ")", "<dedent>", "<dedent>", "self", ".", "recv_presence", "(", "elem", ")", "<dedent>", "def", "send_presence", "(", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'send_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "<new_line>", "direct", "=", "elem", ".", "get", "(", "'to'", ")", "<new_line>", "if", "(", "not", "direct", ")", ":", "<new_line>", "<indent>", "self", ".", "rosters", ".", "broadcast", "(", "self", ",", "elem", ")", "<new_line>", "if", "(", "elem", ".", "get", "(", "'type'", ")", "!=", "'probe'", ")", ":", "<new_line>", "<indent>", "self", ".", "recv_presence", "(", "elem", ")", "<dedent>", "if", "(", "not", "self", ".", "probed", ")", ":", "<new_line>", "<indent>", "self", ".", "probed", "=", "True", "<new_line>", "self", ".", "rosters", ".", "probe", "(", "self", ")", "<dedent>", "<dedent>", "elif", "(", "not", "self", ".", "rosters", ".", "send", "(", "self", ",", "direct", ",", "elem", ")", ")", ":", "<new_line>", "<indent>", "self", ".", "send", "(", "direct", ",", "elem", ")", "<dedent>", "<dedent>", "def", "recv_presence", "(", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'recv_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "<new_line>", "if", "(", "not", "self", ".", "rosters", ".", "recv", "(", "self", ",", "elem", ")", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "'\\tsending it to client'", ")", "<new_line>", "self", ".", "write", "(", "elem", ")", "<dedent>", "<dedent>", "@", "xmpp", ".", "iq", "(", "'{jabber:iq:roster}query'", ")", "def", "roster", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "\"A roster is this account's list of contacts; it may be\\n        fetched or updated.\"", "<new_line>", "roster", "=", "self", ".", "rosters", ".", "get", "(", "self", ")", "<new_line>", "method", "=", "getattr", "(", "self", ",", "(", "'%s_roster'", "%", "iq", ".", "get", "(", "'type'", ")", ")", ")", "<new_line>", "return", "(", "method", "and", "method", "(", "iq", ",", "roster", ")", ")", "<dedent>", "def", "get_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "'jabber:iq:roster'", "}", ")", "<new_line>", "for", "item", "in", "roster", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "item", ")", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ")", "<dedent>", "def", "set_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "xmlns", "=", "'jabber:iq:roster'", ")", "<new_line>", "for", "item", "in", "iq", "[", "0", "]", ":", "<new_line>", "<indent>", "result", "=", "roster", ".", "set", "(", "item", ")", "<new_line>", "if", "(", "result", "is not", "None", ")", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "result", ")", "<dedent>", "<dedent>", "if", "(", "len", "(", "query", ")", ">", "0", ")", ":", "<new_line>", "<indent>", "self", ".", "push", "(", "roster", ",", "query", ")", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "<dedent>", "def", "push", "(", "self", ",", "roster", ",", "query", ")", ":", "<new_line>", "<indent>", "'Push roster changes to all clients that have requested this\\n        roster.'", "<new_line>", "for", "jid", "in", "roster", ".", "requests", "(", ")", ":", "<new_line>", "<indent>", "for", "(", "to", ",", "route", ")", "in", "self", ".", "routes", "(", "jid", ")", ":", "<new_line>", "<indent>", "route", ".", "iq", "(", "'set'", ",", "self", ".", "ignore", ",", "query", ")", "<dedent>", "<dedent>", "<dedent>", "def", "ignore", "(", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "'An IQ no-op.'", "<dedent>", "@", "xmpp", ".", "iq", "(", "'{vcard-temp}vCard'", ")", "def", "vcard", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "'vCard support: the client requests its vCard after\\n        establishing a session.'", "<new_line>", "if", "(", "iq", ".", "get", "(", "'type'", ")", "==", "'get'", ")", ":", "<new_line>", "<indent>", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "<new_line>", "<indent>", "target", "=", "iq", ".", "get", "(", "'from'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "target", "=", "iq", ".", "get", "(", "'to'", ")", "<dedent>", "form_target", "=", "UCache", ".", "UCache", ".", "formalize_jid", "(", "target", ")", "<new_line>", "name", "=", "form_target", ".", "partition", "(", "'@'", ")", "[", "0", "]", "<new_line>", "user", "=", "UserManager", ".", "UserManager", ".", "LoadUser", "(", "name", ")", "<new_line>", "info", "=", "user", ".", "GetInfo", "(", ")", "<new_line>", "desc", "=", "<new_line>", "(", "'\\r\\nLogins: %d\\r\\nPosts: %d\\r\\nLast login: %s from %s\\r\\nExperience: %d\\r\\nPerformance: %d\\r\\nLife: %d\\r\\n'", "%", "(", "info", "[", "'numlogins'", "]", ",", "info", "[", "'numposts'", "]", ",", "info", "[", "'lastlogintime'", "]", ",", "<new_line>", "info", "[", "'lasthost'", "]", ",", "info", "[", "'exp'", "]", ",", "info", "[", "'perf'", "]", ",", "info", "[", "'life'", "]", ")", ")", "<new_line>", "if", "(", "'plan'", "in", "info", ")", ":", "<new_line>", "<indent>", "desc", "+", "=", "(", "'Plan:\\r%s'", "%", "info", "[", "'plan'", "]", ".", "replace", "(", "'\\n'", ",", "'\\r\\n'", ")", ")", "<dedent>", "vcard", "=", "self", ".", "E", ".", "vCard", "(", "{", "'xmlns'", ":", "'vcard-temp'", "}", ",", "<new_line>", "self", ".", "E", "(", "'FN'", ",", "name", ")", ",", "<new_line>", "self", ".", "E", "(", "'NICKNAME'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "info", "[", "'nick'", "]", ")", ")", ",", "<new_line>", "self", ".", "E", "(", "'DESC'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "desc", ")", ")", ")", "<new_line>", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ",", "{", "'from'", ":", "iq", ".", "get", "(", "'to'", ")", "}", ")", "<dedent>", "<dedent>", "<dedent>", "@", "xmpp", ".", "iq", "(", "(", "'{%s}query'", "%", "__disco_info_ns__", ")", ")", "def", "disco_info", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "' Service Discovery: disco#info '", "<new_line>", "target", "=", "iq", ".", "get", "(", "'to'", ")", "<new_line>", "if", "(", "target", ".", "find", "(", "'@'", ")", "<", "0", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "<new_line>", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":", "'server'", ",", "<new_line>", "'type'", ":", "'im'", ",", "<new_line>", "'name'", ":", "Config", ".", "Config", ".", "GetString", "(", "'XMPP_SERVER_IDENTITY_NAME'", ",", "'BBS'", ")", "}", ")", ")", "<new_line>", "features", "=", "[", "__disco_info_ns__", ",", "__disco_items_ns__", ",", "__vcard_ns__", "]", "<new_line>", "for", "feature", "in", "features", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "self", ".", "E", ".", "feature", "(", "{", "'var'", ":", "feature", "}", ")", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "<new_line>", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":", "'client'", ",", "<new_line>", "'type'", ":", "'term'", ",", "<new_line>", "'name'", ":", "Config", ".", "Config", ".", "GetString", "(", "'XMPP_SERVER_IDENTITY_NAME'", ",", "'BBS'", ")", "}", ")", ")", "<new_line>", "features", "=", "[", "__disco_info_ns__", ",", "__disco_items_ns__", ",", "__vcard_ns__", "]", "<new_line>", "for", "feature", "in"], 500]
[["(", "self", ",", "direct", ",", "elem", ")", ")", ":", "<new_line>", "<indent>", "self", ".", "send", "(", "direct", ",", "elem", ")", "<dedent>", "<dedent>", "def", "recv_presence", "(", "self", ",", "elem", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "(", "'recv_presence me: %r elem: %r'", "%", "(", "self", ".", "authJID", ",", "elem_to_str", "(", "elem", ")", ")", ")", ")", "<new_line>", "if", "(", "not", "self", ".", "rosters", ".", "recv", "(", "self", ",", "elem", ")", ")", ":", "<new_line>", "<indent>", "Log", ".", "warn", "(", "'\\tsending it to client'", ")", "<new_line>", "self", ".", "write", "(", "elem", ")", "<dedent>", "<dedent>", "@", "xmpp", ".", "iq", "(", "'{jabber:iq:roster}query'", ")", "def", "roster", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "\"A roster is this account's list of contacts; it may be\\n        fetched or updated.\"", "<new_line>", "roster", "=", "self", ".", "rosters", ".", "get", "(", "self", ")", "<new_line>", "method", "=", "getattr", "(", "self", ",", "(", "'%s_roster'", "%", "iq", ".", "get", "(", "'type'", ")", ")", ")", "<new_line>", "return", "(", "method", "and", "method", "(", "iq", ",", "roster", ")", ")", "<dedent>", "def", "get_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "'jabber:iq:roster'", "}", ")", "<new_line>", "for", "item", "in", "roster", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "item", ")", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ")", "<dedent>", "def", "set_roster", "(", "self", ",", "iq", ",", "roster", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "xmlns", "=", "'jabber:iq:roster'", ")", "<new_line>", "for", "item", "in", "iq", "[", "0", "]", ":", "<new_line>", "<indent>", "result", "=", "roster", ".", "set", "(", "item", ")", "<new_line>", "if", "(", "result", "is not", "None", ")", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "result", ")", "<dedent>", "<dedent>", "if", "(", "len", "(", "query", ")", ">", "0", ")", ":", "<new_line>", "<indent>", "self", ".", "push", "(", "roster", ",", "query", ")", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ")", "<dedent>", "def", "push", "(", "self", ",", "roster", ",", "query", ")", ":", "<new_line>", "<indent>", "'Push roster changes to all clients that have requested this\\n        roster.'", "<new_line>", "for", "jid", "in", "roster", ".", "requests", "(", ")", ":", "<new_line>", "<indent>", "for", "(", "to", ",", "route", ")", "in", "self", ".", "routes", "(", "jid", ")", ":", "<new_line>", "<indent>", "route", ".", "iq", "(", "'set'", ",", "self", ".", "ignore", ",", "query", ")", "<dedent>", "<dedent>", "<dedent>", "def", "ignore", "(", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "'An IQ no-op.'", "<dedent>", "@", "xmpp", ".", "iq", "(", "'{vcard-temp}vCard'", ")", "def", "vcard", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "'vCard support: the client requests its vCard after\\n        establishing a session.'", "<new_line>", "if", "(", "iq", ".", "get", "(", "'type'", ")", "==", "'get'", ")", ":", "<new_line>", "<indent>", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "<new_line>", "<indent>", "target", "=", "iq", ".", "get", "(", "'from'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "target", "=", "iq", ".", "get", "(", "'to'", ")", "<dedent>", "form_target", "=", "UCache", ".", "UCache", ".", "formalize_jid", "(", "target", ")", "<new_line>", "name", "=", "form_target", ".", "partition", "(", "'@'", ")", "[", "0", "]", "<new_line>", "user", "=", "UserManager", ".", "UserManager", ".", "LoadUser", "(", "name", ")", "<new_line>", "info", "=", "user", ".", "GetInfo", "(", ")", "<new_line>", "desc", "=", "<new_line>", "(", "'\\r\\nLogins: %d\\r\\nPosts: %d\\r\\nLast login: %s from %s\\r\\nExperience: %d\\r\\nPerformance: %d\\r\\nLife: %d\\r\\n'", "%", "(", "info", "[", "'numlogins'", "]", ",", "info", "[", "'numposts'", "]", ",", "info", "[", "'lastlogintime'", "]", ",", "<new_line>", "info", "[", "'lasthost'", "]", ",", "info", "[", "'exp'", "]", ",", "info", "[", "'perf'", "]", ",", "info", "[", "'life'", "]", ")", ")", "<new_line>", "if", "(", "'plan'", "in", "info", ")", ":", "<new_line>", "<indent>", "desc", "+", "=", "(", "'Plan:\\r%s'", "%", "info", "[", "'plan'", "]", ".", "replace", "(", "'\\n'", ",", "'\\r\\n'", ")", ")", "<dedent>", "vcard", "=", "self", ".", "E", ".", "vCard", "(", "{", "'xmlns'", ":", "'vcard-temp'", "}", ",", "<new_line>", "self", ".", "E", "(", "'FN'", ",", "name", ")", ",", "<new_line>", "self", ".", "E", "(", "'NICKNAME'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "info", "[", "'nick'", "]", ")", ")", ",", "<new_line>", "self", ".", "E", "(", "'DESC'", ",", "Util", ".", "Util", ".", "RemoveTags", "(", "desc", ")", ")", ")", "<new_line>", "if", "(", "iq", ".", "get", "(", "'to'", ")", "==", "None", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "vcard", ",", "{", "'from'", ":", "iq", ".", "get", "(", "'to'", ")", "}", ")", "<dedent>", "<dedent>", "<dedent>", "@", "xmpp", ".", "iq", "(", "(", "'{%s}query'", "%", "__disco_info_ns__", ")", ")", "def", "disco_info", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "' Service Discovery: disco#info '", "<new_line>", "target", "=", "iq", ".", "get", "(", "'to'", ")", "<new_line>", "if", "(", "target", ".", "find", "(", "'@'", ")", "<", "0", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "<new_line>", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":", "'server'", ",", "<new_line>", "'type'", ":", "'im'", ",", "<new_line>", "'name'", ":", "Config", ".", "Config", ".", "GetString", "(", "'XMPP_SERVER_IDENTITY_NAME'", ",", "'BBS'", ")", "}", ")", ")", "<new_line>", "features", "=", "[", "__disco_info_ns__", ",", "__disco_items_ns__", ",", "__vcard_ns__", "]", "<new_line>", "for", "feature", "in", "features", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "self", ".", "E", ".", "feature", "(", "{", "'var'", ":", "feature", "}", ")", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_info_ns__", "}", ",", "<new_line>", "self", ".", "E", ".", "identity", "(", "{", "'category'", ":", "'client'", ",", "<new_line>", "'type'", ":", "'term'", ",", "<new_line>", "'name'", ":", "Config", ".", "Config", ".", "GetString", "(", "'XMPP_SERVER_IDENTITY_NAME'", ",", "'BBS'", ")", "}", ")", ")", "<new_line>", "features", "=", "[", "__disco_info_ns__", ",", "__disco_items_ns__", ",", "__vcard_ns__", "]", "<new_line>", "for", "feature", "in", "features", ":", "<new_line>", "<indent>", "query", ".", "append", "(", "self", ".", "E", ".", "feature", "(", "{", "'var'", ":", "feature", "}", ")", ")", "<dedent>", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ",", "{", "'from'", ":", "target", "}", ")", "<dedent>", "@", "xmpp", ".", "iq", "(", "(", "'{%s}query'", "%", "__disco_items_ns__", ")", ")", "def", "disco_items", "(", "<new_line>", "self", ",", "iq", ")", ":", "<new_line>", "<indent>", "' Service Discovery: disco#items '", "<new_line>", "target", "=", "iq", ".", "get", "(", "'to'", ")", "<new_line>", "if", "(", "target", ".", "find", "(", "'@'", ")", "<", "0", ")", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_items_ns__", "}", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "query", "=", "self", ".", "E", ".", "query", "(", "{", "'xmlns'", ":", "__disco_items_ns__", "}", ")", "<dedent>", "return", "self", ".", "iq", "(", "'result'", ",", "iq", ",", "query", ",", "{", "'from'", ":", "target", "}", ")", "<dedent>", "<dedent>"], 859]
[["from", "__future__", "import", "print_function", "<new_line>", "from", "__future__", "import", "unicode_literals", "<new_line>", "from", "__future__", "import", "division", "<new_line>", "from", "__future__", "import", "absolute_import", "<new_line>", "from", "builtins", "import", "range", "<new_line>", "from", "future", "import", "standard_library", "<new_line>", "standard_library", ".", "install_aliases", "(", ")", "<new_line>", "import", "sys", "<new_line>", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "<new_line>", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "<new_line>", "if", "PY2", ":", "<new_line>", "<indent>", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "<dedent>", "<dedent>", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "<dedent>", "import", "hpOneView", "as", "hpov", "<new_line>", "from", "pprint", "import", "pprint", "<new_line>", "import", "json", "<new_line>", "from", "hpOneView.common", "import", "uri", "<new_line>", "import", "hpOneView.profile", "as", "profile", "<new_line>", "def", "acceptEULA", "(", "con", ")", ":", "<new_line>", "<indent>", "con", ".", "get_eula_status", "(", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "<new_line>", "<indent>", "print", "(", "'EULA display needed'", ")", "<new_line>", "con", ".", "set_eula", "(", "'no'", ")", "<dedent>", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "print", "(", "'EXCEPTION:'", ")", "<new_line>", "print", "(", "e", ")", "<dedent>", "<dedent>", "def", "login", "(", "con", ",", "credential", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "con", ".", "login", "(", "credential", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "print", "(", "'Login failed'", ")", "<dedent>", "<dedent>", "def", "get_eg_uri_from_arg", "(", "srv", ",", "name", ")", ":", "<new_line>", "<indent>", "if", "(", "srv", "and", "name", ")", ":", "<new_line>", "<indent>", "if", "(", "name", ".", "startswith", "(", "'/rest'", ")", "and", "(", "uri", "[", "'enclosureGroups'", "]", "in", "name", ")", ")", ":", "<new_line>", "<indent>", "return", "name", "<dedent>", "else", ":", "<new_line>", "<indent>", "egs", "=", "srv", ".", "get_enclosure_groups", "(", ")", "<new_line>", "for", "eg", "in", "egs", ":", "<new_line>", "<indent>", "if", "(", "eg", "[", "'name'", "]", "==", "name", ")", ":", "<new_line>", "<indent>", "return", "eg", "[", "'uri'", "]", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "get_sht_from_arg", "(", "srv", ",", "name", ")", ":", "<new_line>", "<indent>", "if", "(", "srv", "and", "name", ")", ":", "<new_line>", "<indent>", "if", "(", "name", ".", "startswith", "(", "'/rest'", ")", "and", "(", "uri", "[", "'server-hardware-types'", "]", "in", "name", ")", ")", ":", "<new_line>", "<indent>", "return", "name", "<dedent>", "else", ":", "<new_line>", "<indent>", "shts", "=", "srv", ".", "get_server_hardware_types", "(", ")", "<new_line>", "for", "sht", "in", "shts", ":", "<new_line>", "<indent>", "if", "(", "sht", "[", "'name'", "]", "==", "name", ")", ":", "<new_line>", "<indent>", "return", "sht", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "define_profile_template", "(", "<new_line>", "srv", ",", "<new_line>", "name", ",", "<new_line>", "desc", ",", "<new_line>", "sp_desc", ",", "<new_line>", "server_hwt", ",", "<new_line>", "enc_group", ",", "<new_line>", "affinity", ",", "<new_line>", "hide_flexnics", ",", "<new_line>", "conn_list", ",", "<new_line>", "fw_settings", ",", "<new_line>", "boot", ",", "<new_line>", "bootmode", ")", ":", "<new_line>", "<indent>", "if", "conn_list", ":", "<new_line>", "<indent>", "conn", "=", "json", ".", "loads", "(", "open", "(", "conn_list", ")", ".", "read", "(", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "conn", "=", "[", "]", "<dedent>", "profile_template", "=", "srv", ".", "create_server_profile_template", "(", "name", "=", "<new_line>", "name", ",", "description", "=", "<new_line>", "desc", ",", "serverProfileDescription", "=", "<new_line>", "sp_desc", ",", "serverHardwareTypeUri", "=", "<new_line>", "server_hwt", ",", "enclosureGroupUri", "=", "<new_line>", "enc_group", ",", "affinity", "=", "<new_line>", "affinity", ",", "hideUnusedFlexNics", "=", "<new_line>", "hide_flexnics", ",", "profileConnectionV4", "=", "<new_line>", "conn", ",", "firmwareSettingsV3", "=", "<new_line>", "fw_settings", ",", "bootSettings", "=", "<new_line>", "boot", ",", "bootModeSetting", "=", "<new_line>", "bootmode", ")", "<new_line>", "if", "(", "'serialNumberType'", "in", "profile_template", ")", ":", "<new_line>", "<indent>", "print", "(", "'\\n\\nName:                '", ",", "profile_template", "[", "'name'", "]", ")", "<new_line>", "print", "(", "'Type:                '", ",", "profile_template", "[", "'type'", "]", ")", "<new_line>", "print", "(", "'Description:         '", ",", "profile_template", "[", "'description'", "]", ")", "<new_line>", "print", "(", "'serialNumberType:    '", ",", "profile_template", "[", "'serialNumberType'", "]", ")", "<new_line>", "print", "(", "'Connections:'", ")", "<new_line>", "for", "connection", "in", "profile_template", "[", "'connections'", "]", ":", "<new_line>", "<indent>", "print", "(", "'  name:          '", ",", "connection", "[", "'name'", "]", ")", "<new_line>", "print", "(", "'  functionType:  '", ",", "connection", "[", "'functionType'", "]", ")", "<new_line>", "print", "(", "'  networkUri:    '", ",", "connection", "[", "'networkUri'", "]", ")", "<dedent>", "print", "(", "'Firmware:'", ")", "<new_line>", "print", "(", "'  manageFirmware:       '", ",", "profile_template", "[", "'firmware'", "]", "[", "'manageFirmware'", "]", ")", "<new_line>", "print", "(", "'  forceInstallFirmware: '", ",", "profile_template", "[", "'firmware'", "]", "[", "'forceInstallFirmware'", "]", ")", "<new_line>", "print", "(", "'  firmwareBaselineUri:  '", ",", "profile_template", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", ")", "<new_line>", "print", "(", "'Bios:'", ")", "<new_line>", "print", "(", "'  manageBios:         '", ",", "profile_template", "[", "'bios'", "]", "[", "'manageBios'", "]", ")", "<new_line>", "print", "(", "'  overriddenSettings: '", ",", "profile_template", "[", "'bios'", "]", "[", "'overriddenSettings'", "]", ")", "<new_line>", "print", "(", "'Boot:'", ")", "<new_line>", "print", "(", "'  manageBoot:         '", ",", "profile_template", "[", "'boot'", "]", "[", "'manageBoot'", "]", ")", "<new_line>", "print", "(", "'  order:              '", ",", "profile_template", "[", "'boot'", "]", "[", "'order'", "]", ",", "'\\n'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "pprint", "(", "profile_template", ")", "<dedent>", "<dedent>", "def", "main", "(", ")", ":", "<new_line>", "<indent>", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "<new_line>", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "<new_line>", "'\\n    Define a server profile template'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Appliance hostname or IP address'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Administrator'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Username'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Password'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Proxy (host:port format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-n'", ",", "dest", "=", "'name'", ",", "required", "=", "<new_line>", "True", ",", "help", "=", "<new_line>", "'\\n    Name of the profile template'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-d'", ",", "dest", "=", "'desc'", ",", "required", "=", "<new_line>", "False", ",", "help", "=", "<new_line>", "'\\n    Description for the server profile template'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-spd'", ",", "dest", "=", "'sp_desc'", ",", "required", "=", "<new_line>", "False", ",", "help", "=", "<new_line>", "'\\n    Server profile description'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-sht'", ",", "dest", "=", "'server_hwt'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    Server hardware type is required for defining an unassigned profile. Note\\n    the Server Hardware Type must be present in the HP OneView appliance\\n    before it can be used. For example, a single server with the specific server\\n    hardware type must have been added to OneView for that hardware type to\\n    be used. The example script get-server-hardware-types.py with the -l\\n    argument can be used to get a list of server hardware types that have\\n    been imported into the OneView appliance'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-eg'", ",", "dest", "=", "'enc_group'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    Identifies the enclosure group for which the Server Profile Template\\n    was designed. The enclosureGroupUri is determined when the profile\\n    template is created and cannot be modified\\n                        '", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-af'", ",", "dest", "=", "'affinity'", ",", "required", "=", "<new_line>", "False", ",", "choices", "=", "[", "'Bay'", ",", "'BayAndServer'", "]", ",", "default", "="], 0]
[["[", "]", "<dedent>", "profile_template", "=", "srv", ".", "create_server_profile_template", "(", "name", "=", "<new_line>", "name", ",", "description", "=", "<new_line>", "desc", ",", "serverProfileDescription", "=", "<new_line>", "sp_desc", ",", "serverHardwareTypeUri", "=", "<new_line>", "server_hwt", ",", "enclosureGroupUri", "=", "<new_line>", "enc_group", ",", "affinity", "=", "<new_line>", "affinity", ",", "hideUnusedFlexNics", "=", "<new_line>", "hide_flexnics", ",", "profileConnectionV4", "=", "<new_line>", "conn", ",", "firmwareSettingsV3", "=", "<new_line>", "fw_settings", ",", "bootSettings", "=", "<new_line>", "boot", ",", "bootModeSetting", "=", "<new_line>", "bootmode", ")", "<new_line>", "if", "(", "'serialNumberType'", "in", "profile_template", ")", ":", "<new_line>", "<indent>", "print", "(", "'\\n\\nName:                '", ",", "profile_template", "[", "'name'", "]", ")", "<new_line>", "print", "(", "'Type:                '", ",", "profile_template", "[", "'type'", "]", ")", "<new_line>", "print", "(", "'Description:         '", ",", "profile_template", "[", "'description'", "]", ")", "<new_line>", "print", "(", "'serialNumberType:    '", ",", "profile_template", "[", "'serialNumberType'", "]", ")", "<new_line>", "print", "(", "'Connections:'", ")", "<new_line>", "for", "connection", "in", "profile_template", "[", "'connections'", "]", ":", "<new_line>", "<indent>", "print", "(", "'  name:          '", ",", "connection", "[", "'name'", "]", ")", "<new_line>", "print", "(", "'  functionType:  '", ",", "connection", "[", "'functionType'", "]", ")", "<new_line>", "print", "(", "'  networkUri:    '", ",", "connection", "[", "'networkUri'", "]", ")", "<dedent>", "print", "(", "'Firmware:'", ")", "<new_line>", "print", "(", "'  manageFirmware:       '", ",", "profile_template", "[", "'firmware'", "]", "[", "'manageFirmware'", "]", ")", "<new_line>", "print", "(", "'  forceInstallFirmware: '", ",", "profile_template", "[", "'firmware'", "]", "[", "'forceInstallFirmware'", "]", ")", "<new_line>", "print", "(", "'  firmwareBaselineUri:  '", ",", "profile_template", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", ")", "<new_line>", "print", "(", "'Bios:'", ")", "<new_line>", "print", "(", "'  manageBios:         '", ",", "profile_template", "[", "'bios'", "]", "[", "'manageBios'", "]", ")", "<new_line>", "print", "(", "'  overriddenSettings: '", ",", "profile_template", "[", "'bios'", "]", "[", "'overriddenSettings'", "]", ")", "<new_line>", "print", "(", "'Boot:'", ")", "<new_line>", "print", "(", "'  manageBoot:         '", ",", "profile_template", "[", "'boot'", "]", "[", "'manageBoot'", "]", ")", "<new_line>", "print", "(", "'  order:              '", ",", "profile_template", "[", "'boot'", "]", "[", "'order'", "]", ",", "'\\n'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "pprint", "(", "profile_template", ")", "<dedent>", "<dedent>", "def", "main", "(", ")", ":", "<new_line>", "<indent>", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "<new_line>", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "<new_line>", "'\\n    Define a server profile template'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Appliance hostname or IP address'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Administrator'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Username'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Password'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Proxy (host:port format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-n'", ",", "dest", "=", "'name'", ",", "required", "=", "<new_line>", "True", ",", "help", "=", "<new_line>", "'\\n    Name of the profile template'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-d'", ",", "dest", "=", "'desc'", ",", "required", "=", "<new_line>", "False", ",", "help", "=", "<new_line>", "'\\n    Description for the server profile template'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-spd'", ",", "dest", "=", "'sp_desc'", ",", "required", "=", "<new_line>", "False", ",", "help", "=", "<new_line>", "'\\n    Server profile description'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-sht'", ",", "dest", "=", "'server_hwt'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    Server hardware type is required for defining an unassigned profile. Note\\n    the Server Hardware Type must be present in the HP OneView appliance\\n    before it can be used. For example, a single server with the specific server\\n    hardware type must have been added to OneView for that hardware type to\\n    be used. The example script get-server-hardware-types.py with the -l\\n    argument can be used to get a list of server hardware types that have\\n    been imported into the OneView appliance'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-eg'", ",", "dest", "=", "'enc_group'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    Identifies the enclosure group for which the Server Profile Template\\n    was designed. The enclosureGroupUri is determined when the profile\\n    template is created and cannot be modified\\n                        '", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-af'", ",", "dest", "=", "'affinity'", ",", "required", "=", "<new_line>", "False", ",", "choices", "=", "[", "'Bay'", ",", "'BayAndServer'", "]", ",", "default", "=", "<new_line>", "'Bay'", ",", "help", "=", "<new_line>", "'\\n    This identifies the behavior of the server profile when the server\\n    hardware is removed or replaced.\\n\\n        . Bay:  This profile remains with the device bay when the server\\n                hardware is removed or replaced.\\n\\n        . BayAndServer This profile is pinned to both the device bay and\\n          specific server hardware.'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-hn'", ",", "dest", "=", "'hide_flexnics'", ",", "required", "=", "<new_line>", "False", ",", "choices", "=", "[", "'true'", ",", "'false'", "]", ",", "help", "=", "<new_line>", "\"\\n    This setting controls the enumeration of physical functions that do not\\n    correspond to connections in a profile. Using this flag will SHOW unused\\n    FlexNICs to the Operating System. Changing this setting may alter the order\\n    of network interfaces in the Operating System. This option sets the 'Hide\\n    Unused FlexNICs' to disabled, eight FlexNICs will be enumerated in the\\n    Operating System as network interfaces for each Flex-10 or FlexFabric\\n    adapter.  Configuring Fibre Channel connections on a FlexFabric adapter may\\n    enumerate two storage interfaces, reducing the number of network interfaces\\n    to six. The default (this option is not selected) enables 'Hide Unused\\n    FlexNICs' and may suppress enumeration of FlexNICs that do not correspond\\n    to profile connections. FlexNICs are hidden in pairs, starting with the 4th\\n    pair. For instance, if the 4th FlexNIC on either physical port corresponds\\n    to a profile connection, all eight physical functions are enumerated. If a\\n    profile connection corresponds to the 2nd FlexNIC on either physical port,\\n    but no connection corresponds to the 3rd or 4th FlexNIC on either physical\\n    port, only the 1st and 2nd physical functions are enumerated in the\\n    Operating System.\"", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-cl'", ",", "dest", "=", "'conn_list'", ",", "required", "=", "<new_line>", "False", ",", "help", "=", "<new_line>", "'\\n    File with list of connections for this profile in JSON format. This file\\n    can be created with multiple calls to define-connection-list.py'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-fw'", ",", "dest", "=", "'baseline'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    SPP Baseline file name. e.g. SPP2013090_2013_0830_30.iso'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-mb'", ",", "dest", "=", "'disable_manage_boot'", ",", "action", "=", "<new_line>", "'store_true'", ",", "help", "=", "<new_line>", "'\\n    Explicitly DISABLE Boot Order Management. This value is enabled by\\n    default and required for Connection boot enablement. If this option is\\n    disabled, then  PXE and FC BfS settings are disabled within the entire\\n    Server Profile.'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-bo'", ",", "dest", "=", "'boot_order'", ",", "required", "=", "False", ",", "nargs", "=", "<new_line>", "'+'", ",", "help", "=", "<new_line>", "\"\\n    Defines the order in which boot will be attempted on the available\\n    devices. Please NOTE the supported boot order is server hardware type\\n    specific. For Gen7 and Gen8 server hardware the possible values are 'CD',\\n    'Floppy', 'USB', 'HardDisk', and 'PXE'. For Gen9 BL server hardware in\\n    Legacy BIOS boot mode, the possible values are 'CD', 'USB', 'HardDisk',\\n    and 'PXE'. For Gen9 BL server hardware in UEFI or UEFI Optimized boot\\n    mode, only one value is allowed and must be either 'HardDisk' or 'PXE'.\\n    For Gen9 DL server hardware in Legacy BIOS boot mode, the possible\\n    values are 'CD', 'USB', 'HardDisk', and 'PXE'. For Gen9 DL server\\n    hardware in UEFI or UEFI Optimized boot mode, boot order configuration\\n    is not supported.\\n\\n    Server boot order defined as a list separated by spaces. For example:\\n\\n    Gen7/8 BIOS Default Boot Order:\\n                            -bo CD Floppy USB HardDisk PXE\\n    Gen9 Legacy BIOS Boot Order:\\n                            -bo CD USB HardDisk PXE\\n    Gen9 UEFI Default Boot Order:\\n                            -bo HardDisk\\n    \"", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-bm'", ",", "dest", "=", "'boot_mode'", ",", "required", "=", "False", ",", "choices", "=", "<new_line>", "[", "'UEFI'", ",", "'UEFIOptimized'", ",", "'BIOS'", "]", ",", "default", "=", "<new_line>", "'BIOS'", ",", "help", "=", "<new_line>", "'\\n    Specify the Gen9 Boot Environment.\\n\\n    Sets the boot mode as one of the following:\\n\\n        . UEFI\\n        . UEFIOptimized\\n        . BIOS\\n\\n    If you select UEFI or UEFI optimized for an HP ProLiant DL Gen9 rack\\n    mount server, the remaining boot setting available is the PXE boot policy.\\n\\n    For the UEFI or UEFI optimized boot mode options, the boot mode choice\\n    should be based on the expected OS and required boot features for the\\n    server hardware. UEFI optimized boot mode reduces the time the system\\n    spends in POST(Video driver initialization). In order to select the\\n    appropriate boot mode, consider the following:\\n\\n        . If a secure boot is required, the boot mode must be set to UEFI\\n          or UEFI optimized .\\n        . For operating systems that do not support UEFI (such as DOS, or\\n          older versions of Windows and Linux), the boot mode must be set\\n          to BIOS.\\n        . When booting in UEFI mode, Windows 7, Server 2008, or 2008 R2\\n          should not be set to UEFIOptimized.'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-px'", ",", "dest", "=", "'pxe'", ",", "required", "=", "False", ",", "choices", "=", "<new_line>", "[", "'Auto'", ",", "'IPv4'", ",", "'IPv6'", ",", "<new_line>", "'IPv4ThenIPv6'", ",", "'IPv6ThenIPv4'", "]", ",", "default", "=", "<new_line>", "'IPv4'", ",", "help", "=", "<new_line>", "\"\\n    Controls the ordering of the network modes available to the Flexible\\n    LOM (FLB); for example, IPv4 and IPv6.\\n\\n    Select from the following policies:\\n\\n        . Auto\\n        . IPv4 only\\n        . IPv6 only\\n        . IPv4 then IPv6\\n        . IPv6 then IPv4\\n\\n    Setting the policy to Auto means the order of the existing network boot\\n    targets in the UEFI Boot Order list will not be modified, and any new\\n    network boot targets will be added to the end of the list using the\\n    System ROM's default policy.\"", ")", "<new_line>", "args", "=", "parser", ".", "parse_args", "(", ")", "<new_line>", "credential", "=", "{", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "<new_line>", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "<new_line>", "srv", "=", "hpov", ".", "servers", "(", "con", ")", "<new_line>", "sts", "=", "hpov", ".", "settings", "(", "con", ")", "<new_line>", "if", "args", ".", "proxy", ":", "<new_line>", "<indent>", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "<dedent>", "if", "args", ".", "cert", ":", "<new_line>", "<indent>", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "<dedent>", "login", "(", "con", ",", "credential", ")", "<new_line>", "acceptEULA", "(", "con", ")", "<new_line>", "eg_uri", "=", "get_eg_uri_from_arg", "(", "srv", ",", "args", ".", "enc_group", ")", "<new_line>", "sht", "=", "get_sht_from_arg", "(", "srv", ",", "args", ".", "server_hwt", ")", "<new_line>", "fw_settings", "=", "profile", ".", "make_firmware_dict", "(", "sts", ",", "args", ".", "baseline", ")", "<new_line>", "(", "boot", ",", "bootmode", ")", "=", "profile", ".", "make_boot_settings_dict", "(", "srv", ",", "sht", ",", "args", ".", "disable_manage_boot", ",", "<new_line>", "args", ".", "boot_order", ",", "args", ".", "boot_mode", ",", "args", ".", "pxe", ")", "<new_line>", "define_profile_template", "(", "srv", ",", "<new_line>", "args", ".", "name", ",", "<new_line>", "args", ".", "desc", ",", "<new_line>", "args", ".", "sp_desc", ",", "<new_line>", "sht", "[", "'uri'", "]", ",", "<new_line>", "eg_uri", ",", "<new_line>", "args", ".", "affinity", ",", "<new_line>", "args", ".", "hide_flexnics", ",", "<new_line>", "args", ".", "conn_list", ",", "<new_line>", "fw_settings", ",", "<new_line>", "boot", ",", "<new_line>", "bootmode", ")", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "import", "argparse", "<new_line>", "sys", ".", "exit", "(", "main", "(", ")", ")", "<dedent>"], 540]
[["from", "__future__", "import", "print_function", "<new_line>", "from", "__future__", "import", "unicode_literals", "<new_line>", "from", "__future__", "import", "division", "<new_line>", "from", "__future__", "import", "absolute_import", "<new_line>", "from", "builtins", "import", "range", "<new_line>", "from", "future", "import", "standard_library", "<new_line>", "standard_library", ".", "install_aliases", "(", ")", "<new_line>", "import", "sys", "<new_line>", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "<new_line>", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "<new_line>", "if", "PY2", ":", "<new_line>", "<indent>", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "<dedent>", "<dedent>", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "<dedent>", "import", "hpOneView", "as", "hpov", "<new_line>", "from", "pprint", "import", "pprint", "<new_line>", "def", "acceptEULA", "(", "con", ")", ":", "<new_line>", "<indent>", "con", ".", "get_eula_status", "(", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "<new_line>", "<indent>", "print", "(", "'EULA display needed'", ")", "<new_line>", "con", ".", "set_eula", "(", "'no'", ")", "<dedent>", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "print", "(", "'EXCEPTION:'", ")", "<new_line>", "print", "(", "e", ")", "<dedent>", "<dedent>", "def", "login", "(", "con", ",", "credential", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "con", ".", "login", "(", "credential", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "print", "(", "'Login failed'", ")", "<dedent>", "<dedent>", "def", "get_address_pools", "(", "con", ",", "srv", ",", "types", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "types", "==", "'ALL'", ")", "or", "(", "types", "==", "'VMAC'", ")", ")", ":", "<new_line>", "<indent>", "vmac", "=", "srv", ".", "get_vmac_pool", "(", ")", "<new_line>", "print", "(", ")", "<new_line>", "for", "key", "in", "sorted", "(", "vmac", ")", ":", "<new_line>", "<indent>", "print", "(", "'{0:16} : {1:}'", ".", "format", "(", "key", ",", "vmac", "[", "key", "]", ")", ")", "<dedent>", "if", "(", "'rangeUris'", "in", "vmac", ")", ":", "<new_line>", "<indent>", "for", "uri", "in", "vmac", "[", "'rangeUris'", "]", ":", "<new_line>", "<indent>", "ranges", "=", "con", ".", "get", "(", "uri", ")", "<new_line>", "print", "(", "'startAddress     :'", ",", "ranges", "[", "'startAddress'", "]", ")", "<new_line>", "print", "(", "'endAddress       :'", ",", "ranges", "[", "'endAddress'", "]", ")", "<new_line>", "print", "(", "'totalCount       :'", ",", "ranges", "[", "'totalCount'", "]", ")", "<dedent>", "<dedent>", "<dedent>", "if", "(", "(", "types", "==", "'ALL'", ")", "or", "(", "types", "==", "'VWWN'", ")", ")", ":", "<new_line>", "<indent>", "vwwn", "=", "srv", ".", "get_vwwn_pool", "(", ")", "<new_line>", "print", "(", ")", "<new_line>", "for", "key", "in", "sorted", "(", "vwwn", ")", ":", "<new_line>", "<indent>", "print", "(", "'{0:16} : {1:}'", ".", "format", "(", "key", ",", "vwwn", "[", "key", "]", ")", ")", "<dedent>", "if", "(", "'rangeUris'", "in", "vwwn", ")", ":", "<new_line>", "<indent>", "for", "uri", "in", "vwwn", "[", "'rangeUris'", "]", ":", "<new_line>", "<indent>", "ranges", "=", "con", ".", "get", "(", "uri", ")", "<new_line>", "print", "(", "'startAddress     :'", ",", "ranges", "[", "'startAddress'", "]", ")", "<new_line>", "print", "(", "'endAddress       :'", ",", "ranges", "[", "'endAddress'", "]", ")", "<new_line>", "print", "(", "'totalCount       :'", ",", "ranges", "[", "'totalCount'", "]", ")", "<dedent>", "<dedent>", "<dedent>", "if", "(", "(", "types", "==", "'ALL'", ")", "or", "(", "types", "==", "'VSN'", ")", ")", ":", "<new_line>", "<indent>", "vsn", "=", "srv", ".", "get_vsn_pool", "(", ")", "<new_line>", "print", "(", ")", "<new_line>", "for", "key", "in", "sorted", "(", "vsn", ")", ":", "<new_line>", "<indent>", "print", "(", "'{0:16} : {1:}'", ".", "format", "(", "key", ",", "vsn", "[", "key", "]", ")", ")", "<dedent>", "if", "(", "'rangeUris'", "in", "vsn", ")", ":", "<new_line>", "<indent>", "for", "uri", "in", "vsn", "[", "'rangeUris'", "]", ":", "<new_line>", "<indent>", "ranges", "=", "con", ".", "get", "(", "uri", ")", "<new_line>", "print", "(", "'startAddress     :'", ",", "ranges", "[", "'startAddress'", "]", ")", "<new_line>", "print", "(", "'endAddress       :'", ",", "ranges", "[", "'endAddress'", "]", ")", "<new_line>", "print", "(", "'totalCount       :'", ",", "ranges", "[", "'totalCount'", "]", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "def", "main", "(", ")", ":", "<new_line>", "<indent>", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "<new_line>", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "<new_line>", "'\\n    Display the avilable and configured Address Pools, and their associated\\n    Ranges from the appliance.  Currently, the appliance supports the\\n    following Address Pools:\\n\\n        - VMAC\\n        - VWWN\\n        - VSN\\n\\n    You can specify one or all of the Pool types.\\n\\n    Usage: '", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Appliance hostname or IP address'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Administrator'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Username'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Password'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Proxy (host:port format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-j'", ",", "dest", "=", "'domain'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Local'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Authorized Login Domain'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-t'", ",", "dest", "=", "'types'", ",", "required", "=", "False", ",", "choices", "=", "<new_line>", "[", "'VMAC'", ",", "'VWWN'", ",", "'VSN'", ",", "'ALL'", "]", ",", "default", "=", "'ALL'", ",", "help", "=", "<new_line>", "'\\n    Address Pool type.  Accepted values are VMAC, VWWN, VSN, or All'", ")", "<new_line>", "args", "=", "parser", ".", "parse_args", "(", ")", "<new_line>", "credential", "=", "{", "'authLoginDomain'", ":", "args", ".", "domain", ".", "upper", "(", ")", ",", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "<new_line>", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "<new_line>", "srv", "=", "hpov", ".", "servers", "(", "con", ")", "<new_line>", "if", "args", ".", "proxy", ":", "<new_line>", "<indent>", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "<dedent>", "if", "args", ".", "cert", ":", "<new_line>", "<indent>", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "<dedent>", "login", "(", "con", ",", "credential", ")", "<new_line>", "acceptEULA", "(", "con", ")", "<new_line>", "get_address_pools", "(", "con", ",", "srv", ",", "args", ".", "types", ")", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "import", "sys", "<new_line>", "import", "argparse", "<new_line>", "sys", ".", "exit", "(", "main", "(", ")", ")", "<dedent>"], 0]
[["from", "__future__", "import", "print_function", "<new_line>", "from", "__future__", "import", "unicode_literals", "<new_line>", "from", "__future__", "import", "division", "<new_line>", "from", "__future__", "import", "absolute_import", "<new_line>", "from", "builtins", "import", "range", "<new_line>", "from", "future", "import", "standard_library", "<new_line>", "standard_library", ".", "install_aliases", "(", ")", "<new_line>", "import", "sys", "<new_line>", "import", "re", "<new_line>", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "<new_line>", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "<new_line>", "if", "PY2", ":", "<new_line>", "<indent>", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "<dedent>", "<dedent>", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "<dedent>", "import", "hpOneView", "as", "hpov", "<new_line>", "from", "pprint", "import", "pprint", "<new_line>", "def", "acceptEULA", "(", "con", ")", ":", "<new_line>", "<indent>", "con", ".", "get_eula_status", "(", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "<new_line>", "<indent>", "print", "(", "'EULA display needed'", ")", "<new_line>", "con", ".", "set_eula", "(", "'no'", ")", "<dedent>", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "print", "(", "'EXCEPTION:'", ")", "<new_line>", "print", "(", "e", ")", "<dedent>", "<dedent>", "def", "login", "(", "con", ",", "credential", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "con", ".", "login", "(", "credential", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "print", "(", "'Login failed'", ")", "<dedent>", "<dedent>", "def", "get_managed_sans", "(", "fcs", ")", ":", "<new_line>", "<indent>", "sans", "=", "fcs", ".", "get_managed_sans", "(", ")", "<new_line>", "pprint", "(", "sans", ")", "<dedent>", "def", "main", "(", ")", ":", "<new_line>", "<indent>", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "<new_line>", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "<new_line>", "'\\n    Display or list the available Managed SAN resources in the appliance\\n\\n    Usage: '", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Appliance hostname or IP address'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Administrator'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Username'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Password'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Proxy (host:port format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-j'", ",", "dest", "=", "'domain'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Local'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Authorized Login Domain'", ")", "<new_line>", "args", "=", "parser", ".", "parse_args", "(", ")", "<new_line>", "credential", "=", "{", "'authLoginDomain'", ":", "args", ".", "domain", ".", "upper", "(", ")", ",", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "<new_line>", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "<new_line>", "fcs", "=", "hpov", ".", "fcsans", "(", "con", ")", "<new_line>", "if", "args", ".", "proxy", ":", "<new_line>", "<indent>", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "<dedent>", "if", "args", ".", "cert", ":", "<new_line>", "<indent>", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "<dedent>", "login", "(", "con", ",", "credential", ")", "<new_line>", "acceptEULA", "(", "con", ")", "<new_line>", "get_managed_sans", "(", "fcs", ")", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "import", "sys", "<new_line>", "import", "argparse", "<new_line>", "sys", ".", "exit", "(", "main", "(", ")", ")", "<dedent>"], 0]
[["from", "__future__", "import", "print_function", "<new_line>", "from", "__future__", "import", "unicode_literals", "<new_line>", "from", "__future__", "import", "division", "<new_line>", "from", "__future__", "import", "absolute_import", "<new_line>", "from", "builtins", "import", "range", "<new_line>", "from", "future", "import", "standard_library", "<new_line>", "standard_library", ".", "install_aliases", "(", ")", "<new_line>", "import", "sys", "<new_line>", "PYTHON_VERSION", "=", "sys", ".", "version_info", "[", ":", "3", "]", "<new_line>", "PY2", "=", "(", "PYTHON_VERSION", "[", "0", "]", "==", "2", ")", "<new_line>", "if", "PY2", ":", "<new_line>", "<indent>", "if", "(", "PYTHON_VERSION", "<", "(", "2", ",", "7", ",", "9", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 2.7.9 or later'", ")", "<dedent>", "<dedent>", "elif", "(", "PYTHON_VERSION", "<", "(", "3", ",", "4", ")", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "(", "'Must use Python 3.4 or later'", ")", "<dedent>", "import", "hpOneView", "as", "hpov", "<new_line>", "from", "pprint", "import", "pprint", "<new_line>", "def", "acceptEULA", "(", "con", ")", ":", "<new_line>", "<indent>", "con", ".", "get_eula_status", "(", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "con", ".", "get_eula_status", "(", ")", "is", "True", ")", ":", "<new_line>", "<indent>", "print", "(", "'EULA display needed'", ")", "<new_line>", "con", ".", "set_eula", "(", "'no'", ")", "<dedent>", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "print", "(", "'EXCEPTION:'", ")", "<new_line>", "print", "(", "e", ")", "<dedent>", "<dedent>", "def", "login", "(", "con", ",", "credential", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "con", ".", "login", "(", "credential", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "print", "(", "'Login failed'", ")", "<dedent>", "<dedent>", "def", "getpolicy", "(", "sts", ")", ":", "<new_line>", "<indent>", "policy", "=", "sts", ".", "get_storage_vol_template_policy", "(", ")", "<new_line>", "print", "(", "policy", "[", "'value'", "]", ")", "<dedent>", "def", "main", "(", ")", ":", "<new_line>", "<indent>", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ",", "formatter_class", "=", "<new_line>", "argparse", ".", "RawTextHelpFormatter", ",", "description", "=", "<new_line>", "'\\n    Display Storage Volume Templates\\n\\n    Usage: '", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-a'", ",", "dest", "=", "'host'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Appliance hostname or IP address'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-u'", ",", "dest", "=", "'user'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Administrator'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Username'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-p'", ",", "dest", "=", "'passwd'", ",", "required", "=", "True", ",", "help", "=", "<new_line>", "'\\n    HP OneView Password'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-c'", ",", "dest", "=", "'cert'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Trusted SSL Certificate Bundle in PEM (Base64 Encoded DER) Format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-y'", ",", "dest", "=", "'proxy'", ",", "required", "=", "False", ",", "help", "=", "<new_line>", "'\\n    Proxy (host:port format'", ")", "<new_line>", "parser", ".", "add_argument", "(", "'-j'", ",", "dest", "=", "'domain'", ",", "required", "=", "False", ",", "default", "=", "<new_line>", "'Local'", ",", "help", "=", "<new_line>", "'\\n    HP OneView Authorized Login Domain'", ")", "<new_line>", "args", "=", "parser", ".", "parse_args", "(", ")", "<new_line>", "credential", "=", "{", "'authLoginDomain'", ":", "args", ".", "domain", ".", "upper", "(", ")", ",", "'userName'", ":", "args", ".", "user", ",", "'password'", ":", "args", ".", "passwd", "}", "<new_line>", "con", "=", "hpov", ".", "connection", "(", "args", ".", "host", ")", "<new_line>", "sts", "=", "hpov", ".", "settings", "(", "con", ")", "<new_line>", "if", "args", ".", "proxy", ":", "<new_line>", "<indent>", "con", ".", "set_proxy", "(", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "args", ".", "proxy", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "<dedent>", "if", "args", ".", "cert", ":", "<new_line>", "<indent>", "con", ".", "set_trusted_ssl_bundle", "(", "args", ".", "cert", ")", "<dedent>", "login", "(", "con", ",", "credential", ")", "<new_line>", "acceptEULA", "(", "con", ")", "<new_line>", "getpolicy", "(", "sts", ")", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "import", "sys", "<new_line>", "import", "argparse", "<new_line>", "sys", ".", "exit", "(", "main", "(", ")", ")", "<dedent>"], 0]
[["'\\nservers.py\\n~~~~~~~~~~~~\\n\\nThis module implements servers HP OneView REST API\\n'", "<new_line>", "from", "__future__", "import", "unicode_literals", "<new_line>", "from", "__future__", "import", "print_function", "<new_line>", "from", "__future__", "import", "division", "<new_line>", "from", "__future__", "import", "absolute_import", "<new_line>", "from", "future", "import", "standard_library", "<new_line>", "standard_library", ".", "install_aliases", "(", ")", "<new_line>", "from", "pprint", "import", "pprint", "<new_line>", "__title__", "=", "'servers'", "<new_line>", "__version__", "=", "'0.0.1'", "<new_line>", "__copyright__", "=", "'(C) Copyright (2012-2015) Hewlett Packard Enterprise  Development LP'", "<new_line>", "__license__", "=", "'MIT'", "<new_line>", "__status__", "=", "'Development'", "<new_line>", "from", "hpOneView.common", "import", "*", "<new_line>", "from", "hpOneView.connection", "import", "*", "<new_line>", "from", "hpOneView.activity", "import", "*", "<new_line>", "from", "hpOneView.exceptions", "import", "*", "<new_line>", "class", "servers", "(", "object", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "con", ")", ":", "<new_line>", "<indent>", "self", ".", "_con", "=", "con", "<new_line>", "self", ".", "_activity", "=", "activity", "(", "con", ")", "<dedent>", "def", "get_connections", "(", "self", ",", "filter", "=", "''", ")", ":", "<new_line>", "<indent>", "' List all the active connections\\n\\n            Args:\\n                filter:\\n                    A general filter/query string that narrows the list of\\n                    resources returned by a multi-resource GET (read) request and\\n                    DELETE (delete) request. The default is no filter\\n                    (all resources are returned). The filter parameter specifies\\n                    a general filter/query string. This query string narrows the\\n                    selection of resources returned from a GET request that\\n                    returns a list of resources. The following example shows how to\\n                    retrieve only the first 10 connections:\\n\\n            Returns: all the connections, filtered or not.\\n            '", "<new_line>", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'conn'", "]", "+", "filter", ")", ")", ")", "<dedent>", "def", "get_connection", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' List a specific connection\\n\\n            Args:\\n                server:\\n                    Connection id\\n\\n            Returns: all the connections, filtered or not.\\n        '", "<new_line>", "body", "=", "self", ".", "_con", ".", "get", "(", "server", "[", "'uri'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_server_by_bay", "(", "self", ",", "baynum", ")", ":", "<new_line>", "<indent>", "servers", "=", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'servers'", "]", ")", ")", "<new_line>", "for", "server", "in", "servers", ":", "<new_line>", "<indent>", "if", "(", "server", "[", "'position'", "]", "==", "baynum", ")", ":", "<new_line>", "<indent>", "return", "server", "<dedent>", "<dedent>", "<dedent>", "def", "get_server_by_name", "(", "self", ",", "name", ")", ":", "<new_line>", "<indent>", "servers", "=", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'servers'", "]", ")", ")", "<new_line>", "for", "server", "in", "servers", ":", "<new_line>", "<indent>", "if", "(", "server", "[", "'name'", "]", "==", "name", ")", ":", "<new_line>", "<indent>", "return", "server", "<dedent>", "<dedent>", "<dedent>", "def", "get_available_servers", "(", "self", ",", "server_hardware_type", "=", "None", ",", "<new_line>", "enclosure_group", "=", "None", ",", "server_profile", "=", "None", ")", ":", "<new_line>", "<indent>", "filters", "=", "[", "]", "<new_line>", "if", "server_hardware_type", ":", "<new_line>", "<indent>", "filters", ".", "append", "(", "(", "'serverHardwareTypeUri='", "+", "server_hardware_type", "[", "'uri'", "]", ")", ")", "<dedent>", "if", "enclosure_group", ":", "<new_line>", "<indent>", "filters", ".", "append", "(", "(", "'enclosureGroupUri='", "+", "enclosure_group", "[", "'uri'", "]", ")", ")", "<dedent>", "if", "server_profile", ":", "<new_line>", "<indent>", "filters", ".", "append", "(", "(", "'serverProfileUri='", "+", "server_profile", "[", "'uri'", "]", ")", ")", "<dedent>", "query_string", "=", "''", "<new_line>", "if", "filters", ":", "<new_line>", "<indent>", "query_string", "=", "(", "'?'", "+", "'&'", ".", "join", "(", "filters", ")", ")", "<dedent>", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'profile-available-targets'", "]", "+", "query_string", ")", ")", "<dedent>", "def", "get_servers", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'servers'", "]", ")", ")", "<dedent>", "def", "get_utilization", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "'Retrieves historical utilization data for the specified resource, metrics, and time span. '", "<new_line>", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/utilization'", ")", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_env_conf", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "'Gets the settings that describe the environmental configuration of the server hardware resource. '", "<new_line>", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/environmentalConfiguration'", ")", ")", "<new_line>", "return", "body", "<dedent>", "def", "set_server_powerstate", "(", "self", ",", "server", ",", "state", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "<new_line>", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "state", "==", "'Off'", ")", "and", "(", "force", "is", "True", ")", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'Off'", ",", "'PressAndHold'", ")", "<dedent>", "elif", "(", "(", "state", "==", "'Off'", ")", "and", "(", "force", "is", "False", ")", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'Off'", ",", "'MomentaryPress'", ")", "<dedent>", "elif", "(", "state", "==", "'On'", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'On'", ",", "'MomentaryPress'", ")", "<dedent>", "elif", "(", "state", "==", "'Reset'", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'On'", ",", "'Reset'", ")", "<dedent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "(", "server", "[", "'uri'", "]", "+", "'/powerState'", ")", ",", "powerRequest", ")", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "60", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "delete_server", "(", "self", ",", "server", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "update_server", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server", "[", "'uri'", "]", ",", "server", ")", "<new_line>", "return", "body", "<dedent>", "def", "add_server", "(", "self", ",", "server", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'servers'", "]", ",", "server", ")", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "server", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "server", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "get_server_schema", "(", "self", ")", ":", "<new_line>", "<indent>", "' Gets the JSON schema of the server hardware resource.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'servers'", "]", "+", "'/schema'", ")", ")", "<dedent>", "def", "get_bios", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' Gets the list of BIOS/UEFI values currently set on the physical server.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/bios'", ")", ")", "<dedent>", "def", "get_ilo_sso_url", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' Retrieves the URL to launch a Single Sign-On (SSO) session for the iLO web interface.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/iloSsoUrl'", ")", ")", "<dedent>", "def", "get_java_remote_console_url", "(", "self", ","], 0]
[[",", "blocking", "=", "True", ",", "<new_line>", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "state", "==", "'Off'", ")", "and", "(", "force", "is", "True", ")", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'Off'", ",", "'PressAndHold'", ")", "<dedent>", "elif", "(", "(", "state", "==", "'Off'", ")", "and", "(", "force", "is", "False", ")", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'Off'", ",", "'MomentaryPress'", ")", "<dedent>", "elif", "(", "state", "==", "'On'", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'On'", ",", "'MomentaryPress'", ")", "<dedent>", "elif", "(", "state", "==", "'Reset'", ")", ":", "<new_line>", "<indent>", "powerRequest", "=", "make_powerstate_dict", "(", "'On'", ",", "'Reset'", ")", "<dedent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "(", "server", "[", "'uri'", "]", "+", "'/powerState'", ")", ",", "powerRequest", ")", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "60", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "delete_server", "(", "self", ",", "server", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "update_server", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server", "[", "'uri'", "]", ",", "server", ")", "<new_line>", "return", "body", "<dedent>", "def", "add_server", "(", "self", ",", "server", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'servers'", "]", ",", "server", ")", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "server", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "server", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "get_server_schema", "(", "self", ")", ":", "<new_line>", "<indent>", "' Gets the JSON schema of the server hardware resource.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'servers'", "]", "+", "'/schema'", ")", ")", "<dedent>", "def", "get_bios", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' Gets the list of BIOS/UEFI values currently set on the physical server.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/bios'", ")", ")", "<dedent>", "def", "get_ilo_sso_url", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' Retrieves the URL to launch a Single Sign-On (SSO) session for the iLO web interface.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/iloSsoUrl'", ")", ")", "<dedent>", "def", "get_java_remote_console_url", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' Generates a Single Sign-On (SSO) session for the iLO Java Applet console and returns\\n        the URL to launch it. '", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/javaRemoteConsoleUrl'", ")", ")", "<dedent>", "def", "get_remote_console_url", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' Generates a Single Sign-On (SSO) session for the iLO Integrated Remote Console Application\\n        (IRC) and returns the URL to launch it.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/remoteConsoleUrl'", ")", ")", "<dedent>", "def", "get_server_hardware_types", "(", "self", ")", ":", "<new_line>", "<indent>", "' Get the list of server hardware type resources defined on the appliance.'", "<new_line>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'server-hardware-types'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "remove_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "' Remove the server hardware type with the specified URI. A server hardware type cannot be deleted\\n         if it is associated with a server hardware or server profile resource. '", "<new_line>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server_hardware_type", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server_hardware_type", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "get_server_type_schema", "(", "self", ")", ":", "<new_line>", "<indent>", "' Get the JSON schema of the server hardware types resource.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'server-hardware-types'", "]", "+", "'/schema'", ")", ")", "<dedent>", "def", "get_server_hardware_type", "(", "self", ",", "server_type", ")", ":", "<new_line>", "<indent>", "' Get the server hardware type resource with the specified ID.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "server_type", "[", "'uri'", "]", ")", "<dedent>", "def", "set_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "name", ",", "description", ")", ":", "<new_line>", "<indent>", "' Updates one or more attributes for a server hardware type resource.\\n\\n        Args:\\n            name:\\n                 The localized name that describes a BIOS/UEFI setting.\\n            description:\\n                 Brief description of the server hardware type.\\n                    Maximum Length: 255\\n                    Minimum Length: 0\\n        '", "<new_line>", "request", "=", "make_server_type_dict", "(", "name", ",", "description", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server_hardware_type", "[", "'uri'", "]", ",", "request", ")", "<new_line>", "return", "task", "<dedent>", "def", "create_server_profile", "(", "self", ",", "<new_line>", "affinity", "=", "'Bay'", ",", "<new_line>", "biosSettings", "=", "None", ",", "<new_line>", "bootSettings", "=", "None", ",", "<new_line>", "bootModeSetting", "=", "None", ",", "<new_line>", "profileConnectionV4", "=", "None", ",", "<new_line>", "description", "=", "None", ",", "<new_line>", "firmwareSettingsV3", "=", "None", ",", "<new_line>", "hideUnusedFlexNics", "=", "True", ",", "<new_line>", "localStorageSettingsV3", "=", "None", ",", "<new_line>", "macType", "=", "'Virtual'", ",", "<new_line>", "name", "=", "None", ",", "<new_line>", "sanStorageV3", "=", "None", ",", "<new_line>", "serialNumber", "=", "None", ",", "<new_line>", "serialNumberType", "=", "'Physical'", ",", "<new_line>", "serverHardwareTypeUri", "=", "None", ",", "<new_line>", "serverHardwareUri", "=", "None", ",", "<new_line>", "serverProfileTemplateUri", "=", "None", ",", "<new_line>", "uuid", "=", "None", ",", "<new_line>", "wwnType", "=", "'Virtual'", ",", "<new_line>", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "' Create a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            biosSettings:\\n                Dictionary that describes Server BIOS settings\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n            profileConnectionV4:\\n                Array of ProfileConnectionV3\\n            description:\\n                Description of the Server Profile\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            localStorageSettingsV3:\\n                Dictionary that describes the local storage settings.\\n            macType:\\n                Specifies the type of MAC address to be programmed into the IO\\n                devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n            name:\\n                Unique name of the Server Profile\\n            sanStorageV3:\\n                Dictionary that describes the SAN storage settings.\\n            serialNumber:\\n                A 10-byte value that is exposed to the Operating System as the\\n                server hardware\\'s Serial Number. The value can be a virtual serial\\n                number, user defined serial number or physical serial number read\\n                from the server\\'s ROM. It cannot be modified after the profile is\\n                created.\\n            serialNumberType:\\n                 Specifies the type of Serial Number and UUID to be programmed into\\n                 the server ROM. The value can be \\'Virtual\\', \\'UserDefined\\', or\\n                 \\'Physical\\'. The serialNumberType defaults to \\'Virtual\\' when\\n                 serialNumber or uuid are not specified. It cannot be modified\\n                 after the profile is created.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            serverHardwareUri:\\n                 Identifies the server hardware to which the server profile is\\n                 currently assigned, if applicable\\n            serverProfileTemplateUri:\\n                Identifies the Server profile template the Server Profile is based\\n                on.\\n            uuid:\\n                A 36-byte value that is exposed to the Operating System as the\\n                server hardware\\'s UUID. The value can be a virtual uuid, user\\n                defined uuid or physical uuid read from the server\\'s ROM. It\\n                cannot be modified after the profile is created.\\n            wwnType:\\n                 Specifies the type of WWN address to be programmed into the IO\\n                 devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n                 It cannot be modified after the profile is created.\\n\\n        Returns: server profile or task\\n        '", "<new_line>", "profile", "=", "make_ServerProfileV5", "(", "affinity", ",", "biosSettings", ",", "bootSettings", ",", "<new_line>", "bootModeSetting", ",", "profileConnectionV4", ",", "<new_line>", "description", ",", "firmwareSettingsV3", ",", "<new_line>", "hideUnusedFlexNics", ",", "<new_line>", "localStorageSettingsV3", ",", "macType", ",", "name", ",", "<new_line>", "sanStorageV3", ",", "serialNumber", ",", "<new_line>", "serialNumberType", ",", "serverHardwareTypeUri", ",", "<new_line>", "serverHardwareUri", ",", "<new_line>", "serverProfileTemplateUri", ",", "uuid", ",", "wwnType", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "<new_line>", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "if", "(", "blocking", "is"], 500]
[["server", ")", ":", "<new_line>", "<indent>", "' Generates a Single Sign-On (SSO) session for the iLO Java Applet console and returns\\n        the URL to launch it. '", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/javaRemoteConsoleUrl'", ")", ")", "<dedent>", "def", "get_remote_console_url", "(", "self", ",", "server", ")", ":", "<new_line>", "<indent>", "' Generates a Single Sign-On (SSO) session for the iLO Integrated Remote Console Application\\n        (IRC) and returns the URL to launch it.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "server", "[", "'uri'", "]", "+", "'/remoteConsoleUrl'", ")", ")", "<dedent>", "def", "get_server_hardware_types", "(", "self", ")", ":", "<new_line>", "<indent>", "' Get the list of server hardware type resources defined on the appliance.'", "<new_line>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'server-hardware-types'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "remove_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "' Remove the server hardware type with the specified URI. A server hardware type cannot be deleted\\n         if it is associated with a server hardware or server profile resource. '", "<new_line>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "server_hardware_type", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "server_hardware_type", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "get_server_type_schema", "(", "self", ")", ":", "<new_line>", "<indent>", "' Get the JSON schema of the server hardware types resource.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "uri", "[", "'server-hardware-types'", "]", "+", "'/schema'", ")", ")", "<dedent>", "def", "get_server_hardware_type", "(", "self", ",", "server_type", ")", ":", "<new_line>", "<indent>", "' Get the server hardware type resource with the specified ID.'", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "server_type", "[", "'uri'", "]", ")", "<dedent>", "def", "set_server_hardware_type", "(", "self", ",", "server_hardware_type", ",", "name", ",", "description", ")", ":", "<new_line>", "<indent>", "' Updates one or more attributes for a server hardware type resource.\\n\\n        Args:\\n            name:\\n                 The localized name that describes a BIOS/UEFI setting.\\n            description:\\n                 Brief description of the server hardware type.\\n                    Maximum Length: 255\\n                    Minimum Length: 0\\n        '", "<new_line>", "request", "=", "make_server_type_dict", "(", "name", ",", "description", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "server_hardware_type", "[", "'uri'", "]", ",", "request", ")", "<new_line>", "return", "task", "<dedent>", "def", "create_server_profile", "(", "self", ",", "<new_line>", "affinity", "=", "'Bay'", ",", "<new_line>", "biosSettings", "=", "None", ",", "<new_line>", "bootSettings", "=", "None", ",", "<new_line>", "bootModeSetting", "=", "None", ",", "<new_line>", "profileConnectionV4", "=", "None", ",", "<new_line>", "description", "=", "None", ",", "<new_line>", "firmwareSettingsV3", "=", "None", ",", "<new_line>", "hideUnusedFlexNics", "=", "True", ",", "<new_line>", "localStorageSettingsV3", "=", "None", ",", "<new_line>", "macType", "=", "'Virtual'", ",", "<new_line>", "name", "=", "None", ",", "<new_line>", "sanStorageV3", "=", "None", ",", "<new_line>", "serialNumber", "=", "None", ",", "<new_line>", "serialNumberType", "=", "'Physical'", ",", "<new_line>", "serverHardwareTypeUri", "=", "None", ",", "<new_line>", "serverHardwareUri", "=", "None", ",", "<new_line>", "serverProfileTemplateUri", "=", "None", ",", "<new_line>", "uuid", "=", "None", ",", "<new_line>", "wwnType", "=", "'Virtual'", ",", "<new_line>", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "' Create a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            biosSettings:\\n                Dictionary that describes Server BIOS settings\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n            profileConnectionV4:\\n                Array of ProfileConnectionV3\\n            description:\\n                Description of the Server Profile\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            localStorageSettingsV3:\\n                Dictionary that describes the local storage settings.\\n            macType:\\n                Specifies the type of MAC address to be programmed into the IO\\n                devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n            name:\\n                Unique name of the Server Profile\\n            sanStorageV3:\\n                Dictionary that describes the SAN storage settings.\\n            serialNumber:\\n                A 10-byte value that is exposed to the Operating System as the\\n                server hardware\\'s Serial Number. The value can be a virtual serial\\n                number, user defined serial number or physical serial number read\\n                from the server\\'s ROM. It cannot be modified after the profile is\\n                created.\\n            serialNumberType:\\n                 Specifies the type of Serial Number and UUID to be programmed into\\n                 the server ROM. The value can be \\'Virtual\\', \\'UserDefined\\', or\\n                 \\'Physical\\'. The serialNumberType defaults to \\'Virtual\\' when\\n                 serialNumber or uuid are not specified. It cannot be modified\\n                 after the profile is created.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            serverHardwareUri:\\n                 Identifies the server hardware to which the server profile is\\n                 currently assigned, if applicable\\n            serverProfileTemplateUri:\\n                Identifies the Server profile template the Server Profile is based\\n                on.\\n            uuid:\\n                A 36-byte value that is exposed to the Operating System as the\\n                server hardware\\'s UUID. The value can be a virtual uuid, user\\n                defined uuid or physical uuid read from the server\\'s ROM. It\\n                cannot be modified after the profile is created.\\n            wwnType:\\n                 Specifies the type of WWN address to be programmed into the IO\\n                 devices. The value can be \\'Virtual\\', \\'Physical\\' or \\'UserDefined\\'.\\n                 It cannot be modified after the profile is created.\\n\\n        Returns: server profile or task\\n        '", "<new_line>", "profile", "=", "make_ServerProfileV5", "(", "affinity", ",", "biosSettings", ",", "bootSettings", ",", "<new_line>", "bootModeSetting", ",", "profileConnectionV4", ",", "<new_line>", "description", ",", "firmwareSettingsV3", ",", "<new_line>", "hideUnusedFlexNics", ",", "<new_line>", "localStorageSettingsV3", ",", "macType", ",", "name", ",", "<new_line>", "sanStorageV3", ",", "serialNumber", ",", "<new_line>", "serialNumberType", ",", "serverHardwareTypeUri", ",", "<new_line>", "serverHardwareUri", ",", "<new_line>", "serverProfileTemplateUri", ",", "uuid", ",", "wwnType", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "<new_line>", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "post_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "' POST a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            profile:\\n                ServerProfileV5\\n\\n        Returns: server profile or task\\n        '", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "<new_line>", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "remove_server_profile", "(", "self", ",", "profile", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "profile", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "get_server_profiles", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profiles'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "update_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile", "[", "'uri'", "]", ",", "profile", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "<dedent>", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "def", "update_server_profile_from_template", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>"], 500]
[["True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "post_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "' POST a ServerProfileV5 profile for use with the V200 API\\n\\n        Args:\\n            profile:\\n                ServerProfileV5\\n\\n        Returns: server profile or task\\n        '", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profiles'", "]", ",", "profile", ")", "<new_line>", "if", "(", "profile", "[", "'firmware'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "remove_server_profile", "(", "self", ",", "profile", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "profile", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "get_server_profiles", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profiles'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "update_server_profile", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile", "[", "'uri'", "]", ",", "profile", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "<dedent>", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "def", "update_server_profile_from_template", "(", "self", ",", "profile", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "patch_request", "=", "[", "{", "'op'", ":", "'replace'", ",", "'path'", ":", "'/templateCompliance'", ",", "'value'", ":", "'Compliant'", "}", "]", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "patch", "(", "profile", "[", "'uri'", "]", ",", "patch_request", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "tout", "=", "600", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "<dedent>", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "<dedent>", "def", "get_server_profile_by_name", "(", "self", ",", "name", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profiles'", "]", ",", "'name'", ",", "name", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_message", "(", "self", ",", "profile", ")", ":", "<new_line>", "<indent>", "' Retrieve the error or status messages associated with the specified profile. '", "<new_line>", "message", "=", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/messages'", ")", ")", "<new_line>", "return", "message", "<dedent>", "def", "get_profile_compliance_preview", "(", "self", ",", "profile", ")", ":", "<new_line>", "<indent>", "' Gets the preview of manual and automatic updates required to make the\\n        server profile consistent with its template. '", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/compliance-preview'", ")", ")", "<dedent>", "def", "create_server_profile_template", "(", "<new_line>", "self", ",", "<new_line>", "name", "=", "None", ",", "<new_line>", "description", "=", "None", ",", "<new_line>", "serverProfileDescription", "=", "None", ",", "<new_line>", "serverHardwareTypeUri", "=", "None", ",", "<new_line>", "enclosureGroupUri", "=", "None", ",", "<new_line>", "affinity", "=", "None", ",", "<new_line>", "hideUnusedFlexNics", "=", "None", ",", "<new_line>", "profileConnectionV4", "=", "None", ",", "<new_line>", "firmwareSettingsV3", "=", "None", ",", "<new_line>", "bootSettings", "=", "None", ",", "<new_line>", "bootModeSetting", "=", "None", ",", "<new_line>", "blocking", "=", "True", ",", "<new_line>", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "'\\n        Create a ServerProfileTemplateV1 dictionary for use with the V200 API\\n        Args:\\n            name:\\n                Unique name of the Server Profile Template\\n            description:\\n                Description of the Server Profile Template\\n            serverProfileDescription:\\n                The description of the server profiles created from this template.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            enclosureGroupUri:\\n                 Identifies the enclosure group for which the Server Profile Template\\n                 was designed. The enclosureGroupUri is determined when the profile\\n                 template is created and cannot be modified.\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            profileConnectionV4:\\n                An array of profileConnectionV4\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management.\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n\\n        Returns: dict\\n        '", "<new_line>", "profile_template", "=", "make_ServerProfileTemplateV1", "(", "name", ",", "<new_line>", "description", ",", "<new_line>", "serverProfileDescription", ",", "<new_line>", "serverHardwareTypeUri", ",", "<new_line>", "enclosureGroupUri", ",", "<new_line>", "affinity", ",", "<new_line>", "hideUnusedFlexNics", ",", "<new_line>", "profileConnectionV4", ",", "<new_line>", "firmwareSettingsV3", ",", "<new_line>", "bootSettings", ",", "<new_line>", "bootModeSetting", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profile-templates'", "]", ",", "profile_template", ")", "<new_line>", "tout", "=", "600", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile_template", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile_template", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "remove_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile_template", "[", "'uri'", "]", ")", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task"], 500]
[["<indent>", "patch_request", "=", "[", "{", "'op'", ":", "'replace'", ",", "'path'", ":", "'/templateCompliance'", ",", "'value'", ":", "'Compliant'", "}", "]", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "patch", "(", "profile", "[", "'uri'", "]", ",", "patch_request", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "if", "(", "profile", "[", "'firmware'", "]", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "tout", "=", "600", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "<dedent>", "profileResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileResource", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile", "<dedent>", "<dedent>", "def", "get_server_profile_by_name", "(", "self", ",", "name", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profiles'", "]", ",", "'name'", ",", "name", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_message", "(", "self", ",", "profile", ")", ":", "<new_line>", "<indent>", "' Retrieve the error or status messages associated with the specified profile. '", "<new_line>", "message", "=", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/messages'", ")", ")", "<new_line>", "return", "message", "<dedent>", "def", "get_profile_compliance_preview", "(", "self", ",", "profile", ")", ":", "<new_line>", "<indent>", "' Gets the preview of manual and automatic updates required to make the\\n        server profile consistent with its template. '", "<new_line>", "return", "self", ".", "_con", ".", "get", "(", "(", "profile", "[", "'uri'", "]", "+", "'/compliance-preview'", ")", ")", "<dedent>", "def", "create_server_profile_template", "(", "<new_line>", "self", ",", "<new_line>", "name", "=", "None", ",", "<new_line>", "description", "=", "None", ",", "<new_line>", "serverProfileDescription", "=", "None", ",", "<new_line>", "serverHardwareTypeUri", "=", "None", ",", "<new_line>", "enclosureGroupUri", "=", "None", ",", "<new_line>", "affinity", "=", "None", ",", "<new_line>", "hideUnusedFlexNics", "=", "None", ",", "<new_line>", "profileConnectionV4", "=", "None", ",", "<new_line>", "firmwareSettingsV3", "=", "None", ",", "<new_line>", "bootSettings", "=", "None", ",", "<new_line>", "bootModeSetting", "=", "None", ",", "<new_line>", "blocking", "=", "True", ",", "<new_line>", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "'\\n        Create a ServerProfileTemplateV1 dictionary for use with the V200 API\\n        Args:\\n            name:\\n                Unique name of the Server Profile Template\\n            description:\\n                Description of the Server Profile Template\\n            serverProfileDescription:\\n                The description of the server profiles created from this template.\\n            serverHardwareTypeUri:\\n                Identifies the server hardware type for which the Server Profile\\n                was designed. The serverHardwareTypeUri is determined when the\\n                profile is created.\\n            enclosureGroupUri:\\n                 Identifies the enclosure group for which the Server Profile Template\\n                 was designed. The enclosureGroupUri is determined when the profile\\n                 template is created and cannot be modified.\\n            affinity:\\n                This identifies the behavior of the server profile when the server\\n                hardware is removed or replaced. This can be set to \\'Bay\\' or\\n                \\'BayAndServer\\'.\\n            hideUnusedFlexNics:\\n                This setting controls the enumeration of physical functions that do\\n                not correspond to connections in a profile.\\n            profileConnectionV4:\\n                An array of profileConnectionV4\\n            firmwareSettingsV3:\\n                FirmwareSettingsV3 dictionary that defines the firmware baseline\\n                and management.\\n            bootSettings:\\n                Dictionary that indicates that the server will attempt to boot from\\n                this connection. This object can only be specified if\\n                \"boot.manageBoot\" is set to \\'true\\'\\n            bootModeSetting:\\n                Dictionary that describes the boot mode settings to be configured on\\n                Gen9 and newer servers.\\n\\n        Returns: dict\\n        '", "<new_line>", "profile_template", "=", "make_ServerProfileTemplateV1", "(", "name", ",", "<new_line>", "description", ",", "<new_line>", "serverProfileDescription", ",", "<new_line>", "serverHardwareTypeUri", ",", "<new_line>", "enclosureGroupUri", ",", "<new_line>", "affinity", ",", "<new_line>", "hideUnusedFlexNics", ",", "<new_line>", "profileConnectionV4", ",", "<new_line>", "firmwareSettingsV3", ",", "<new_line>", "bootSettings", ",", "<new_line>", "bootModeSetting", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'profile-templates'", "]", ",", "profile_template", ")", "<new_line>", "tout", "=", "600", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile_template", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile_template", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "remove_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "profile_template", "[", "'uri'", "]", ")", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<new_line>", "return", "task", "<dedent>", "return", "body", "<dedent>", "def", "get_server_profile_templates", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-templates'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "get_server_profile_template_by_name", "(", "self", ",", "name", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profile-templates'", "]", ",", "'name'", ",", "name", ")", "<new_line>", "return", "body", "<dedent>", "def", "update_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile_template", "[", "'uri'", "]", ",", "profile_template", ")", "<new_line>", "tout", "=", "600", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "<dedent>", "profileTemplateResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileTemplateResource", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile_template", "<dedent>", "def", "get_server_profile_from_template", "(", "self", ",", "profile_template", ")", ":", "<new_line>", "<indent>", "profile", "=", "self", ".", "_con", ".", "get", "(", "(", "profile_template", "[", "'uri'", "]", "+", "'/new-profile'", ")", ")", "<new_line>", "return", "profile", "<dedent>", "def", "get_enclosures", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosures'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "add_enclosure", "(", "self", ",", "enclosure", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosures'", "]", ",", "enclosure", ")", "<new_line>", "if", "(", "enclosure", "[", "'state'", "]", "is", "'Monitored'", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "elif", "(", "enclosure", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "enclosure", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "enclosure", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "remove_enclosure", "(", "self", ",", "enclosure", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "<new_line>", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "enclosure", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "enclosure", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "create_enclosure_group", "(", "self", ",", "associatedLIGs", ",", "name"], 500]
[[",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<new_line>", "return", "task", "<dedent>", "return", "body", "<dedent>", "def", "get_server_profile_templates", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-templates'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "get_server_profile_template_by_name", "(", "self", ",", "name", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get_entity_byfield", "(", "uri", "[", "'profile-templates'", "]", ",", "'name'", ",", "name", ")", "<new_line>", "return", "body", "<dedent>", "def", "update_server_profile_template", "(", "self", ",", "profile_template", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "profile_template", "[", "'uri'", "]", ",", "profile_template", ")", "<new_line>", "tout", "=", "600", "<new_line>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "<dedent>", "profileTemplateResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileTemplateResource", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile_template", "<dedent>", "def", "get_server_profile_from_template", "(", "self", ",", "profile_template", ")", ":", "<new_line>", "<indent>", "profile", "=", "self", ".", "_con", ".", "get", "(", "(", "profile_template", "[", "'uri'", "]", "+", "'/new-profile'", ")", ")", "<new_line>", "return", "profile", "<dedent>", "def", "get_enclosures", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosures'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "add_enclosure", "(", "self", ",", "enclosure", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosures'", "]", ",", "enclosure", ")", "<new_line>", "if", "(", "enclosure", "[", "'state'", "]", "is", "'Monitored'", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "elif", "(", "enclosure", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "enclosure", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "enclosure", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "remove_enclosure", "(", "self", ",", "enclosure", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "<new_line>", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "enclosure", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "enclosure", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "create_enclosure_group", "(", "self", ",", "associatedLIGs", ",", "name", ",", "<new_line>", "powerMode", "=", "'RedundantPowerSupply'", ")", ":", "<new_line>", "<indent>", "\" Create an EnclosureGroupV200 dictionary\\n\\n        Args:\\n            associatedLIGs:\\n                A sorted list of logical interconnect group URIs associated with\\n                the enclosure group.\\n            name:\\n                The name of the enclosure group.\\n            powerMode:\\n                Power mode of the enclosure group. Values are 'RedundantPowerFeed'\\n                or 'RedundantPowerSupply'.\\n\\n        Returns: enclosure group\\n        \"", "<new_line>", "egroup", "=", "make_EnclosureGroupV200", "(", "associatedLIGs", ",", "name", ",", "powerMode", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosureGroups'", "]", ",", "egroup", ")", "<new_line>", "return", "body", "<dedent>", "def", "delete_enclosure_group", "(", "self", ",", "egroup", ")", ":", "<new_line>", "<indent>", "self", ".", "_con", ".", "delete", "(", "egroup", "[", "'uri'", "]", ")", "<dedent>", "def", "get_enclosure_groups", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosureGroups'", "]", ")", ")", "<dedent>", "def", "update_enclosure_group", "(", "self", ",", "enclosuregroup", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "enclosuregroup", "[", "'uri'", "]", ",", "enclosuregroup", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_pool", "(", "self", ",", "pooltype", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "(", "uri", "[", "'idpool'", "]", "+", "'/'", ")", "+", "pooltype", ")", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_vmac_pool", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vmac-pool'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_vwwn_pool", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vwwn-pool'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_vsn_pool", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vsn-pool'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_networks", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_schema", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks-schema'", "]", ")", "<dedent>", "def", "get_profile_available_servers", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-servers'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_available_storage_systems", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-storage-systems'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_ports", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-ports'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "allocate_pool_ids", "(", "self", ",", "url", ",", "count", ")", ":", "<new_line>", "<indent>", "allocatorUrl", "=", "(", "'%s/allocator'", "%", "url", ")", "<new_line>", "allocatorBody", "=", "{", "'count'", ":", "count", "}", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "allocatorBody", ")", "<new_line>", "return", "body", "<dedent>", "def", "release_pool_ids", "(", "self", ",", "url", ",", "idList", ")", ":", "<new_line>", "<indent>", "collectorUrl", "=", "(", "'%s/collector'", "%", "url", ")", "<new_line>", "collectorBody", "=", "{", "'idList'", ":", "idList", "}", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "collectorUrl", ",", "collectorBody", ")", "<new_line>", "return", "body", "<dedent>", "def", "allocate_range_ids", "(", "self", ",", "allocatorUrl", ",", "count", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "{", "'count'", ":", "count", "}", ")", "<new_line>", "return", "body", "<dedent>", "def", "release_range_ids", "(", "self", ",", "collectorUrl", ",", "idList", ")", ":", "<new_line>", "<indent>", "("], 500]
[["is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "tout", ",", "verbose", "=", "verbose", ")", "<dedent>", "profileTemplateResource", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "profile", "=", "self", ".", "_con", ".", "get", "(", "profileTemplateResource", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "profile_template", "<dedent>", "def", "get_server_profile_from_template", "(", "self", ",", "profile_template", ")", ":", "<new_line>", "<indent>", "profile", "=", "self", ".", "_con", ".", "get", "(", "(", "profile_template", "[", "'uri'", "]", "+", "'/new-profile'", ")", ")", "<new_line>", "return", "profile", "<dedent>", "def", "get_enclosures", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosures'", "]", ")", "<new_line>", "return", "get_members", "(", "body", ")", "<dedent>", "def", "add_enclosure", "(", "self", ",", "enclosure", ",", "blocking", "=", "True", ",", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosures'", "]", ",", "enclosure", ")", "<new_line>", "if", "(", "enclosure", "[", "'state'", "]", "is", "'Monitored'", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "elif", "(", "enclosure", "[", "'firmwareBaselineUri'", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "tout", "=", "600", "<dedent>", "else", ":", "<new_line>", "<indent>", "tout", "=", "3600", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", ",", "verbose", "=", "verbose", ")", "<new_line>", "if", "(", "(", "'type'", "in", "task", ")", "and", "task", "[", "'type'", "]", ".", "startswith", "(", "'Task'", ")", ")", ":", "<new_line>", "<indent>", "entity", "=", "self", ".", "_activity", ".", "get_task_associated_resource", "(", "task", ")", "<new_line>", "enclosure", "=", "self", ".", "_con", ".", "get", "(", "entity", "[", "'resourceUri'", "]", ")", "<new_line>", "return", "enclosure", "<dedent>", "<dedent>", "return", "task", "<dedent>", "def", "remove_enclosure", "(", "self", ",", "enclosure", ",", "force", "=", "False", ",", "blocking", "=", "True", ",", "<new_line>", "verbose", "=", "False", ")", ":", "<new_line>", "<indent>", "if", "force", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "(", "enclosure", "[", "'uri'", "]", "+", "'?force=True'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "delete", "(", "enclosure", "[", "'uri'", "]", ")", "<dedent>", "if", "(", "blocking", "is", "True", ")", ":", "<new_line>", "<indent>", "task", "=", "self", ".", "_activity", ".", "wait4task", "(", "task", ",", "tout", "=", "600", ",", "verbose", "=", "verbose", ")", "<dedent>", "return", "task", "<dedent>", "def", "create_enclosure_group", "(", "self", ",", "associatedLIGs", ",", "name", ",", "<new_line>", "powerMode", "=", "'RedundantPowerSupply'", ")", ":", "<new_line>", "<indent>", "\" Create an EnclosureGroupV200 dictionary\\n\\n        Args:\\n            associatedLIGs:\\n                A sorted list of logical interconnect group URIs associated with\\n                the enclosure group.\\n            name:\\n                The name of the enclosure group.\\n            powerMode:\\n                Power mode of the enclosure group. Values are 'RedundantPowerFeed'\\n                or 'RedundantPowerSupply'.\\n\\n        Returns: enclosure group\\n        \"", "<new_line>", "egroup", "=", "make_EnclosureGroupV200", "(", "associatedLIGs", ",", "name", ",", "powerMode", ")", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "post", "(", "uri", "[", "'enclosureGroups'", "]", ",", "egroup", ")", "<new_line>", "return", "body", "<dedent>", "def", "delete_enclosure_group", "(", "self", ",", "egroup", ")", ":", "<new_line>", "<indent>", "self", ".", "_con", ".", "delete", "(", "egroup", "[", "'uri'", "]", ")", "<dedent>", "def", "get_enclosure_groups", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "get_members", "(", "self", ".", "_con", ".", "get", "(", "uri", "[", "'enclosureGroups'", "]", ")", ")", "<dedent>", "def", "update_enclosure_group", "(", "self", ",", "enclosuregroup", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "enclosuregroup", "[", "'uri'", "]", ",", "enclosuregroup", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_pool", "(", "self", ",", "pooltype", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "(", "(", "uri", "[", "'idpool'", "]", "+", "'/'", ")", "+", "pooltype", ")", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_vmac_pool", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vmac-pool'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_vwwn_pool", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vwwn-pool'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_vsn_pool", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'vsn-pool'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_networks", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_schema", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-networks-schema'", "]", ")", "<dedent>", "def", "get_profile_available_servers", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-servers'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_available_storage_systems", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-available-storage-systems'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "get_profile_ports", "(", "self", ")", ":", "<new_line>", "<indent>", "body", "=", "self", ".", "_con", ".", "get", "(", "uri", "[", "'profile-ports'", "]", ")", "<new_line>", "return", "body", "<dedent>", "def", "allocate_pool_ids", "(", "self", ",", "url", ",", "count", ")", ":", "<new_line>", "<indent>", "allocatorUrl", "=", "(", "'%s/allocator'", "%", "url", ")", "<new_line>", "allocatorBody", "=", "{", "'count'", ":", "count", "}", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "allocatorBody", ")", "<new_line>", "return", "body", "<dedent>", "def", "release_pool_ids", "(", "self", ",", "url", ",", "idList", ")", ":", "<new_line>", "<indent>", "collectorUrl", "=", "(", "'%s/collector'", "%", "url", ")", "<new_line>", "collectorBody", "=", "{", "'idList'", ":", "idList", "}", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "collectorUrl", ",", "collectorBody", ")", "<new_line>", "return", "body", "<dedent>", "def", "allocate_range_ids", "(", "self", ",", "allocatorUrl", ",", "count", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "allocatorUrl", ",", "{", "'count'", ":", "count", "}", ")", "<new_line>", "return", "body", "<dedent>", "def", "release_range_ids", "(", "self", ",", "collectorUrl", ",", "idList", ")", ":", "<new_line>", "<indent>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "collectorUrl", ",", "{", "'idList'", ":", "idList", "}", ")", "<new_line>", "return", "body", "<dedent>", "def", "enable_range", "(", "self", ",", "url", ")", ":", "<new_line>", "<indent>", "prange", "=", "self", ".", "_con", ".", "get", "(", "url", ")", "<new_line>", "prange", "[", "'enabled'", "]", "=", "True", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "url", ",", "prange", ")", "<new_line>", "return", "body", "<dedent>", "def", "disable_range", "(", "self", ",", "url", ")", ":", "<new_line>", "<indent>", "prange", "=", "self", ".", "_con", ".", "get", "(", "url", ")", "<new_line>", "prange", "[", "'enabled'", "]", "=", "False", "<new_line>", "(", "task", ",", "body", ")", "=", "self", ".", "_con", ".", "put", "(", "url", ",", "prange", ")", "<new_line>", "return", "body", "<dedent>", "<dedent>"], 880]
[["'RIS Schema classes'", "<new_line>", "import", "os", "<new_line>", "import", "re", "<new_line>", "import", "sys", "<new_line>", "import", "json", "<new_line>", "import", "locale", "<new_line>", "import", "zipfile", "<new_line>", "import", "logging", "<new_line>", "import", "textwrap", "<new_line>", "import", "validictory", "<new_line>", "from", ".", "sharedtypes", "import", "JSONEncoder", "<new_line>", "from", "ilorest.rest.v1_helper", "import", "RisObject", "<new_line>", "LOGGER", "=", "logging", ".", "getLogger", "(", "__name__", ")", "<new_line>", "class", "ValidationError", "(", "Exception", ")", ":", "<new_line>", "<indent>", "'Validation Class Error'", "<new_line>", "pass", "<dedent>", "class", "SchemaValidationError", "(", "ValidationError", ")", ":", "<new_line>", "<indent>", "'Schema Validation Class Error'", "<new_line>", "pass", "<dedent>", "class", "RegistryValidationError", "(", "ValidationError", ")", ":", "<new_line>", "<indent>", "'Registration Validation Class Error'", "<new_line>", "def", "__init__", "(", "self", ",", "msg", ",", "regentry", "=", "None", ",", "selector", "=", "None", ")", ":", "<new_line>", "<indent>", "super", "(", "RegistryValidationError", ",", "self", ")", ".", "__init__", "(", "msg", ")", "<new_line>", "self", ".", "reg", "=", "regentry", "<new_line>", "self", ".", "sel", "=", "selector", "<dedent>", "<dedent>", "class", "UnknownValidatorError", "(", "Exception", ")", ":", "<new_line>", "<indent>", "\"Raised when we find an attribute type that we don't know how to\"", "<new_line>", "' validate. '", "<dedent>", "class", "ValidationManager", "(", "object", ")", ":", "<new_line>", "<indent>", "'Keep track of all the schemas and registries and provides helpers'", "<new_line>", "' to simplify validation '", "<new_line>", "def", "__init__", "(", "self", ",", "local_path", ",", "bios_local_path", ",", "romfamily", "=", "None", ",", "<new_line>", "biosversion", "=", "None", ",", "iloversion", "=", "None", ",", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "super", "(", "ValidationManager", ",", "self", ")", ".", "__init__", "(", ")", "<new_line>", "defaultilopath", "=", "None", "<new_line>", "defaultbiospath", "=", "None", "<new_line>", "schemamainfolder", "=", "None", "<new_line>", "if", "(", "float", "(", "iloversion", ")", "<", "2.1", ")", ":", "<new_line>", "<indent>", "if", "(", "os", ".", "name", "==", "'nt'", ")", ":", "<new_line>", "<indent>", "defaultilopath", "=", "'.\\\\hp-rest-classes-ilo4'", "<new_line>", "defaultbiospath", "=", "'.\\\\hp-rest-classes-bios'", "<new_line>", "schemamainfolder", "=", "os", ".", "path", ".", "dirname", "(", "sys", ".", "executable", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "defaultilopath", "=", "'/usr/share/hprest/hp-rest-classes-ilo4'", "<new_line>", "defaultbiospath", "=", "'/usr/share/hprest/hp-rest-classes-bios'", "<new_line>", "schemamainfolder", "=", "'/usr/share/hprest/'", "<dedent>", "if", "(", "not", "local_path", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "defaultilopath", ")", ")", ":", "<new_line>", "<indent>", "ilozip", "=", "self", ".", "getiloziplocation", "(", "schemamainfolder", ",", "<new_line>", "iloversion", ")", "<new_line>", "if", "(", "ilozip", "and", "os", ".", "path", ".", "exists", "(", "ilozip", ")", ")", ":", "<new_line>", "<indent>", "with", "zipfile", ".", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "<new_line>", "ilozip", ")", ",", "'r'", ")", "as", "zfile", ":", "<new_line>", "<indent>", "zfile", ".", "extractall", "(", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "<new_line>", "'hp-rest-classes-ilo4'", ")", ")", "<dedent>", "local_path", "=", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "<new_line>", "'hp-rest-classes-ilo4'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "SchemaValidationError", "(", "<new_line>", "'No valid iLO schema zip file found.\\nPlease refer to our documentation for further instructions on downloading the appropriate schemas.'", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "local_path", "=", "defaultilopath", "<dedent>", "<dedent>", "elif", "(", "not", "os", ".", "path", ".", "isdir", "(", "local_path", ")", ")", ":", "<new_line>", "<indent>", "raise", "SchemaValidationError", "(", "(", "\"iLO schema directory '%s' doesn't exist\"", "%", "<new_line>", "local_path", ")", ")", "<dedent>", "if", "(", "not", "bios_local_path", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "defaultbiospath", ")", ")", ":", "<new_line>", "<indent>", "bioszip", "=", "self", ".", "getbiosziplocation", "(", "romfamily", ",", "<new_line>", "schemamainfolder", ",", "biosversion", ")", "<new_line>", "if", "(", "bioszip", "and", "os", ".", "path", ".", "exists", "(", "bioszip", ")", ")", ":", "<new_line>", "<indent>", "with", "zipfile", ".", "ZipFile", "(", "<new_line>", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "bioszip", ")", ",", "'r'", ")", "as", "<new_line>", "zfile", ":", "<new_line>", "<indent>", "zfile", ".", "extractall", "(", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "<new_line>", "'hp-rest-classes-bios'", ")", ")", "<dedent>", "bios_local_path", "=", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "<new_line>", "'hp-rest-classes-bios'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "SchemaValidationError", "(", "'No valid BIOS schema zip file found.\\nPlease refer to our documentation for further instructions on downloading the appropriate schemas.'", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "bios_local_path", "=", "defaultbiospath", "<dedent>", "<dedent>", "elif", "(", "not", "os", ".", "path", ".", "isdir", "(", "bios_local_path", ")", ")", ":", "<new_line>", "<indent>", "raise", "SchemaValidationError", "(", "(", "\"Bios schema directory '%s' doesn't exist\"", "%", "<new_line>", "bios_local_path", ")", ")", "<dedent>", "<dedent>", "elif", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "local_path", "=", "'/redfish/v1/Schemas/'", "<new_line>", "bios_local_path", "=", "'/redfish/v1/Registries/'", "<dedent>", "else", ":", "<new_line>", "<indent>", "local_path", "=", "'/rest/v1/Schemas'", "<new_line>", "bios_local_path", "=", "'/rest/v1/Registries'", "<dedent>", "self", ".", "_schema_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_classes", "=", "list", "(", ")", "<new_line>", "self", ".", "_registry_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_classes_registry", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_schema_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_classes", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_registry_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_classes_registry", "=", "list", "(", ")", "<new_line>", "self", ".", "_ilo_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_base_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_hpcommon_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_iloevents_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_errors", "=", "list", "(", ")", "<new_line>", "if", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "self", ".", "_schemaid", "=", "[", "'/redfish/v1/schemas'", ",", "'Members'", "]", "<new_line>", "self", ".", "_regid", "=", "[", "'/redfish/v1/registries'", ",", "'Members'", "]", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_schemaid", "=", "[", "'/rest/v1/schemas'", ",", "'Items'", "]", "<new_line>", "self", ".", "_regid", "=", "[", "'/rest/v1/registries'", ",", "'Items'", "]", "<dedent>", "if", "local_path", ":", "<new_line>", "<indent>", "self", ".", "add_location", "(", "schema_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "<new_line>", "self", ".", "add_location", "(", "registry_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "<dedent>", "if", "bios_local_path", ":", "<new_line>", "<indent>", "self", ".", "add_location", "(", "schema_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "<new_line>", "monolith", ")", "<new_line>", "self", ".", "add_location", "(", "registry_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "<new_line>", "monolith", ")", "<dedent>", "<dedent>", "def", "getbiosziplocation", "(", "self", ",", "romfamily", ",", "schemadir", ",", "biosversion", ")", ":", "<new_line>", "<indent>", "'Helper function for BIOS zip location from schema directory\\n\\n        :param romfamily: the current systems rom family.\\n        :type romfamily: str.\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param biosversion: the current system BIOS version.\\n        :type biosversion: str.\\n\\n        '", "<new_line>", "foundfile", "=", "None", "<new_line>", "currentver", "=", "None", "<new_line>", "tempstr", "=", "(", "(", "(", "'hp-rest-classes-bios-'", "+", "romfamily", ")", "+", "'-'", ")", "+", "biosversion", ")", "<new_line>", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "if", "(", "tempstr", "in", "filename", ")", ":", "<new_line>", "<indent>", "regentry", "=", "re", ".", "compile", "(", "(", "'%s(.*?).zip'", "%", "tempstr", ")", ")", "<new_line>", "mentry", "=", "regentry", ".", "search", "(", "filename", ")", "<new_line>", "if", "(", "mentry", "and", "currentver", ")", ":", "<new_line>", "<indent>", "if", "(", "currentver", "<", "mentry", ".", "group", "(", "1", ")", ")", ":", "<new_line>", "<indent>", "foundfile", "=", "filename", "<new_line>", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "<dedent>", "<dedent>", "elif", "(", "mentry", "and", "(", "not", "currentver", ")", ")", ":", "<new_line>", "<indent>", "foundfile", "=", "filename", "<new_line>", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "if", "foundfile", ":", "<new_line>", "<indent>", "return", "os", ".", "path", ".", "join", "(", "schemadir"], 0]
[[".", "join", "(", "schemamainfolder", ",", "<new_line>", "'hp-rest-classes-bios'", ")", ")", "<dedent>", "bios_local_path", "=", "os", ".", "path", ".", "join", "(", "schemamainfolder", ",", "<new_line>", "'hp-rest-classes-bios'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "SchemaValidationError", "(", "'No valid BIOS schema zip file found.\\nPlease refer to our documentation for further instructions on downloading the appropriate schemas.'", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "bios_local_path", "=", "defaultbiospath", "<dedent>", "<dedent>", "elif", "(", "not", "os", ".", "path", ".", "isdir", "(", "bios_local_path", ")", ")", ":", "<new_line>", "<indent>", "raise", "SchemaValidationError", "(", "(", "\"Bios schema directory '%s' doesn't exist\"", "%", "<new_line>", "bios_local_path", ")", ")", "<dedent>", "<dedent>", "elif", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "local_path", "=", "'/redfish/v1/Schemas/'", "<new_line>", "bios_local_path", "=", "'/redfish/v1/Registries/'", "<dedent>", "else", ":", "<new_line>", "<indent>", "local_path", "=", "'/rest/v1/Schemas'", "<new_line>", "bios_local_path", "=", "'/rest/v1/Registries'", "<dedent>", "self", ".", "_schema_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_classes", "=", "list", "(", ")", "<new_line>", "self", ".", "_registry_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_classes_registry", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_schema_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_classes", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_registry_locations", "=", "list", "(", ")", "<new_line>", "self", ".", "_bios_classes_registry", "=", "list", "(", ")", "<new_line>", "self", ".", "_ilo_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_base_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_hpcommon_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_iloevents_messages", "=", "list", "(", ")", "<new_line>", "self", ".", "_errors", "=", "list", "(", ")", "<new_line>", "if", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "self", ".", "_schemaid", "=", "[", "'/redfish/v1/schemas'", ",", "'Members'", "]", "<new_line>", "self", ".", "_regid", "=", "[", "'/redfish/v1/registries'", ",", "'Members'", "]", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_schemaid", "=", "[", "'/rest/v1/schemas'", ",", "'Items'", "]", "<new_line>", "self", ".", "_regid", "=", "[", "'/rest/v1/registries'", ",", "'Items'", "]", "<dedent>", "if", "local_path", ":", "<new_line>", "<indent>", "self", ".", "add_location", "(", "schema_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "<new_line>", "self", ".", "add_location", "(", "registry_path", "=", "local_path", ",", "monolith", "=", "monolith", ")", "<dedent>", "if", "bios_local_path", ":", "<new_line>", "<indent>", "self", ".", "add_location", "(", "schema_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "<new_line>", "monolith", ")", "<new_line>", "self", ".", "add_location", "(", "registry_path", "=", "bios_local_path", ",", "biossection", "=", "True", ",", "monolith", "=", "<new_line>", "monolith", ")", "<dedent>", "<dedent>", "def", "getbiosziplocation", "(", "self", ",", "romfamily", ",", "schemadir", ",", "biosversion", ")", ":", "<new_line>", "<indent>", "'Helper function for BIOS zip location from schema directory\\n\\n        :param romfamily: the current systems rom family.\\n        :type romfamily: str.\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param biosversion: the current system BIOS version.\\n        :type biosversion: str.\\n\\n        '", "<new_line>", "foundfile", "=", "None", "<new_line>", "currentver", "=", "None", "<new_line>", "tempstr", "=", "(", "(", "(", "'hp-rest-classes-bios-'", "+", "romfamily", ")", "+", "'-'", ")", "+", "biosversion", ")", "<new_line>", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "if", "(", "tempstr", "in", "filename", ")", ":", "<new_line>", "<indent>", "regentry", "=", "re", ".", "compile", "(", "(", "'%s(.*?).zip'", "%", "tempstr", ")", ")", "<new_line>", "mentry", "=", "regentry", ".", "search", "(", "filename", ")", "<new_line>", "if", "(", "mentry", "and", "currentver", ")", ":", "<new_line>", "<indent>", "if", "(", "currentver", "<", "mentry", ".", "group", "(", "1", ")", ")", ":", "<new_line>", "<indent>", "foundfile", "=", "filename", "<new_line>", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "<dedent>", "<dedent>", "elif", "(", "mentry", "and", "(", "not", "currentver", ")", ")", ":", "<new_line>", "<indent>", "foundfile", "=", "filename", "<new_line>", "currentver", "=", "mentry", ".", "group", "(", "1", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "if", "foundfile", ":", "<new_line>", "<indent>", "return", "os", ".", "path", ".", "join", "(", "schemadir", ",", "foundfile", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "def", "getiloziplocation", "(", "self", ",", "schemadir", ",", "iloversion", ")", ":", "<new_line>", "<indent>", "'Helper function for iLO zip location from schema directory\\n\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param iloversion: the current system iLO version.\\n        :type iloversion: str.\\n\\n        '", "<new_line>", "if", "(", "float", "(", "iloversion", ")", "<", "2.1", ")", ":", "<new_line>", "<indent>", "iloversion", "=", "'2.00'", "<dedent>", "tempstr", "=", "(", "'hp-rest-classes-ilo4-'", "+", "iloversion", ".", "replace", "(", "'.'", ",", "''", ")", ")", "<new_line>", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "if", "(", "tempstr", "in", "filename", ")", ":", "<new_line>", "<indent>", "return", "os", ".", "path", ".", "join", "(", "schemadir", ",", "filename", ")", "<dedent>", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "add_location", "(", "self", ",", "schema_path", "=", "None", ",", "registry_path", "=", "None", ",", "<new_line>", "biossection", "=", "False", ",", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'Add schema_path and registry_path to the list of locations to'", "<new_line>", "' search for schemas and registries\\n\\n        :param schema_path: directory or URL where schemas are located.\\n        :type  schema_path: str.\\n        :param registry_path: directory or URL where registries are located.\\n        :type registry_path: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "<new_line>", "if", "schema_path", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_schema_locations", ".", "append", "(", "schema_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "monolith", "=", "monolith", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_schema_locations", ".", "append", "(", "schema_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "<dedent>", "<dedent>", "elif", "registry_path", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_registry_locations", ".", "append", "(", "registry_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "registries", "=", "True", ",", "monolith", "=", "monolith", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_registry_locations", ".", "append", "(", "registry_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "registries", "=", "True", ",", "monolith", "=", "<new_line>", "monolith", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "ValueError", "(", "\"'schema_path' and 'registry_path' are undefined\"", ")", "<dedent>", "<dedent>", "def", "_update_location_map", "(", "self", ",", "biossection", "=", "False", ",", "registries", "=", "False", ",", "<new_line>", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'Searches locations to build a map of type to filename\\n\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "<new_line>", "locationslist", "=", "list", "(", ")", "<new_line>", "pathjoinstr", "=", "None", "<new_line>", "if", "(", "not", "registries", ")", ":", "<new_line>", "<indent>", "pathjoinstr", "=", "'Schemas'", "<new_line>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_schema_locations", "<dedent>", "else", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_bios_schema_locations", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "pathjoinstr", "=", "'Registries'", "<new_line>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_registry_locations", "<dedent>", "else", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_bios_registry_locations", "<dedent>", "<dedent>", "for", "location", "in", "locationslist", ":", "<new_line>", "<indent>", "if", "monolith", ":", "<new_line>", "<indent>", "self", ".", "new_load_file", "(", "monolith", ",", "root", "=", "location", ",", "biossection", "=", "<new_line>", "biossection", ",", "registries", "=", "registries", ")", "<dedent>", "elif", "self", ".", "_is_local", "(", "location", ")", ":", "<new_line>", "<indent>", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "location", ",", "<new_line>", "pathjoinstr", ")", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "<new_line>", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "<new_line>", "if", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "location", ",", "biossection", "=", "<new_line>", "biossection", ",", "registries", "=", "registries"], 500]
[[",", "foundfile", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "def", "getiloziplocation", "(", "self", ",", "schemadir", ",", "iloversion", ")", ":", "<new_line>", "<indent>", "'Helper function for iLO zip location from schema directory\\n\\n        :param schemadir: the current configuration schema directory.\\n        :type schemadir: str.\\n        :param iloversion: the current system iLO version.\\n        :type iloversion: str.\\n\\n        '", "<new_line>", "if", "(", "float", "(", "iloversion", ")", "<", "2.1", ")", ":", "<new_line>", "<indent>", "iloversion", "=", "'2.00'", "<dedent>", "tempstr", "=", "(", "'hp-rest-classes-ilo4-'", "+", "iloversion", ".", "replace", "(", "'.'", ",", "''", ")", ")", "<new_line>", "for", "(", "_", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "schemadir", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "if", "(", "tempstr", "in", "filename", ")", ":", "<new_line>", "<indent>", "return", "os", ".", "path", ".", "join", "(", "schemadir", ",", "filename", ")", "<dedent>", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "add_location", "(", "self", ",", "schema_path", "=", "None", ",", "registry_path", "=", "None", ",", "<new_line>", "biossection", "=", "False", ",", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'Add schema_path and registry_path to the list of locations to'", "<new_line>", "' search for schemas and registries\\n\\n        :param schema_path: directory or URL where schemas are located.\\n        :type  schema_path: str.\\n        :param registry_path: directory or URL where registries are located.\\n        :type registry_path: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "<new_line>", "if", "schema_path", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_schema_locations", ".", "append", "(", "schema_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "monolith", "=", "monolith", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_schema_locations", ".", "append", "(", "schema_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "monolith", "=", "monolith", ")", "<dedent>", "<dedent>", "elif", "registry_path", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_registry_locations", ".", "append", "(", "registry_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "registries", "=", "True", ",", "monolith", "=", "monolith", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_registry_locations", ".", "append", "(", "registry_path", ")", "<new_line>", "self", ".", "_update_location_map", "(", "biossection", "=", "True", ",", "registries", "=", "True", ",", "monolith", "=", "<new_line>", "monolith", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "ValueError", "(", "\"'schema_path' and 'registry_path' are undefined\"", ")", "<dedent>", "<dedent>", "def", "_update_location_map", "(", "self", ",", "biossection", "=", "False", ",", "registries", "=", "False", ",", "<new_line>", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'Searches locations to build a map of type to filename\\n\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "<new_line>", "locationslist", "=", "list", "(", ")", "<new_line>", "pathjoinstr", "=", "None", "<new_line>", "if", "(", "not", "registries", ")", ":", "<new_line>", "<indent>", "pathjoinstr", "=", "'Schemas'", "<new_line>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_schema_locations", "<dedent>", "else", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_bios_schema_locations", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "pathjoinstr", "=", "'Registries'", "<new_line>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_registry_locations", "<dedent>", "else", ":", "<new_line>", "<indent>", "locationslist", "=", "self", ".", "_bios_registry_locations", "<dedent>", "<dedent>", "for", "location", "in", "locationslist", ":", "<new_line>", "<indent>", "if", "monolith", ":", "<new_line>", "<indent>", "self", ".", "new_load_file", "(", "monolith", ",", "root", "=", "location", ",", "biossection", "=", "<new_line>", "biossection", ",", "registries", "=", "registries", ")", "<dedent>", "elif", "self", ".", "_is_local", "(", "location", ")", ":", "<new_line>", "<indent>", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "location", ",", "<new_line>", "pathjoinstr", ")", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "<new_line>", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "<new_line>", "if", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "location", ",", "biossection", "=", "<new_line>", "biossection", ",", "registries", "=", "registries", ")", ":", "<new_line>", "<indent>", "LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "def", "new_load_file", "(", "self", ",", "monolith", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "<new_line>", "registries", "=", "False", ")", ":", "<new_line>", "<indent>", "'Loads the types from monolith.\\n\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param root: pointer to the root of the load.\\n        :type root: class obj.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n\\n        '", "<new_line>", "classesdataholder", "=", "[", "]", "<new_line>", "for", "itemtype", "in", "monolith", ".", "types", ":", "<new_line>", "<indent>", "if", "(", "itemtype", ".", "startswith", "(", "'#SchemaFileCollection.'", ")", "or", "<new_line>", "(", "itemtype", ".", "startswith", "(", "'Collection.'", ")", "and", "<new_line>", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ")", ":", "<new_line>", "<indent>", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "<new_line>", "<indent>", "if", "(", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", "or", "<new_line>", "(", "self", ".", "_regid", "[", "0", "]", "in", "<new_line>", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "not", "registries", ")", "and", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "<new_line>", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "if", "classesdataholder", ":", "<new_line>", "<indent>", "if", "(", "self", ".", "_schemaid", "[", "1", "]", "in", "instance", ".", "resp", ".", "dict", ")", ":", "<new_line>", "<indent>", "classesdataholder", "[", "0", "]", "[", "self", ".", "_schemaid", "[", "1", "]", "]", ".", "extend", "(", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "<new_line>", "self", ".", "_schemaid", "[", "1", "]", "]", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "<dedent>", "<dedent>", "elif", "(", "registries", "and", "(", "self", ".", "_regid", "[", "0", "]", "in", "<new_line>", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "if", "classesdataholder", ":", "<new_line>", "<indent>", "if", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "classesdataholder", "[", "0", "]", "[", "self", ".", "_regid", "[", "1", "]", "]", ".", "extend", "(", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "<new_line>", "self", ".", "_regid", "[", "1", "]", "]", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "if", "classesdataholder", ":", "<new_line>", "<indent>", "classesdataholder", "=", "classesdataholder", "[", "0", "]", "<dedent>", "try", ":", "<new_line>", "<indent>", "if", "(", "(", "monolith", ".", "_typestring", "in", "classesdataholder", ")", "and", "(", "(", "'Collection.'", "in", "<new_line>", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "or", "<new_line>", "(", "(", "'#SchemaFileCollection.'", "in", "<new_line>", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "and", "<new_line>", "monolith", ".", "is_redfish", ")", ")", ")", ":", "<new_line>", "<indent>", "newclass", "=", "Classes", ".", "parse", "(", "classesdataholder", ")", "<new_line>", "newclass", ".", "set_root", "(", "root", ")", "<new_line>", "if", "(", "not", "registries", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "<dedent>", "<dedent>", "elif", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")"], 500]
[[")", ":", "<new_line>", "<indent>", "LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "def", "new_load_file", "(", "self", ",", "monolith", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "<new_line>", "registries", "=", "False", ")", ":", "<new_line>", "<indent>", "'Loads the types from monolith.\\n\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param root: pointer to the root of the load.\\n        :type root: class obj.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n\\n        '", "<new_line>", "classesdataholder", "=", "[", "]", "<new_line>", "for", "itemtype", "in", "monolith", ".", "types", ":", "<new_line>", "<indent>", "if", "(", "itemtype", ".", "startswith", "(", "'#SchemaFileCollection.'", ")", "or", "<new_line>", "(", "itemtype", ".", "startswith", "(", "'Collection.'", ")", "and", "<new_line>", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ")", ":", "<new_line>", "<indent>", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "<new_line>", "<indent>", "if", "(", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", "or", "<new_line>", "(", "self", ".", "_regid", "[", "0", "]", "in", "<new_line>", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "not", "registries", ")", "and", "(", "self", ".", "_schemaid", "[", "0", "]", "in", "<new_line>", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "if", "classesdataholder", ":", "<new_line>", "<indent>", "if", "(", "self", ".", "_schemaid", "[", "1", "]", "in", "instance", ".", "resp", ".", "dict", ")", ":", "<new_line>", "<indent>", "classesdataholder", "[", "0", "]", "[", "self", ".", "_schemaid", "[", "1", "]", "]", ".", "extend", "(", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "<new_line>", "self", ".", "_schemaid", "[", "1", "]", "]", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "<dedent>", "<dedent>", "elif", "(", "registries", "and", "(", "self", ".", "_regid", "[", "0", "]", "in", "<new_line>", "instance", ".", "resp", ".", "request", ".", "path", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "if", "classesdataholder", ":", "<new_line>", "<indent>", "if", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "classesdataholder", "[", "0", "]", "[", "self", ".", "_regid", "[", "1", "]", "]", ".", "extend", "(", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "<new_line>", "self", ".", "_regid", "[", "1", "]", "]", ")", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "classesdataholder", ".", "append", "(", "instance", ".", "resp", ".", "dict", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "if", "classesdataholder", ":", "<new_line>", "<indent>", "classesdataholder", "=", "classesdataholder", "[", "0", "]", "<dedent>", "try", ":", "<new_line>", "<indent>", "if", "(", "(", "monolith", ".", "_typestring", "in", "classesdataholder", ")", "and", "(", "(", "'Collection.'", "in", "<new_line>", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "or", "<new_line>", "(", "(", "'#SchemaFileCollection.'", "in", "<new_line>", "classesdataholder", "[", "monolith", ".", "_typestring", "]", ")", "and", "<new_line>", "monolith", ".", "is_redfish", ")", ")", ")", ":", "<new_line>", "<indent>", "newclass", "=", "Classes", ".", "parse", "(", "classesdataholder", ")", "<new_line>", "newclass", ".", "set_root", "(", "root", ")", "<new_line>", "if", "(", "not", "registries", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "<dedent>", "<dedent>", "elif", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")", "<dedent>", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "def", "load_file", "(", "self", ",", "filepath", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "<new_line>", "registries", "=", "False", ",", "datareturn", "=", "False", ")", ":", "<new_line>", "<indent>", "'Loads the types from filepath.\\n\\n        :param filepath: path to a file to load, local or URL.\\n        :type filepath: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param datareturn: flag to determine if the raw data should be returned.\\n        :type datareturn: boolean.\\n\\n        '", "<new_line>", "result", "=", "False", "<new_line>", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "filehand", "=", "open", "(", "filepath", ",", "'r'", ")", "<new_line>", "data", "=", "json", ".", "load", "(", "filehand", ")", "<new_line>", "if", "datareturn", ":", "<new_line>", "<indent>", "return", "data", "<dedent>", "if", "(", "(", "'Type'", "in", "data", ")", "and", "(", "data", "[", "'Type'", "]", "==", "'Collection.1.0.0'", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "biossection", "and", "registries", ")", ":", "<new_line>", "<indent>", "itemsreturn", "=", "self", ".", "bios_helper_function", "(", "data", ",", "root", ")", "<new_line>", "data", "[", "'Items'", "]", "=", "itemsreturn", "<dedent>", "newclass", "=", "Classes", ".", "parse", "(", "data", ")", "<new_line>", "newclass", ".", "set_root", "(", "root", ")", "<new_line>", "if", "(", "not", "registries", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "<dedent>", "<dedent>", "elif", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")", "<dedent>", "result", "=", "True", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "finally", ":", "<new_line>", "<indent>", "filehand", ".", "close", "(", ")", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "bios_helper_function", "(", "self", ",", "data", ",", "root", ")", ":", "<new_line>", "<indent>", "'Helper function for BIOS schemas\\n\\n        :param data: current retrieved data for BIOS.\\n        :type data: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n\\n        '", "<new_line>", "folderentries", "=", "data", "[", "'links'", "]", "<new_line>", "datareturn", "=", "list", "(", ")", "<new_line>", "for", "entry", "in", "folderentries", "[", "'Member'", "]", ":", "<new_line>", "<indent>", "joinstr", "=", "entry", "[", "'href'", "]", "<new_line>", "if", "(", "(", "os", ".", "name", "==", "'nt'", ")", "and", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ")", ":", "<new_line>", "<indent>", "joinstr", "=", "joinstr", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "[", "1", ":", "]", "<dedent>", "elif", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ":", "<new_line>", "<indent>", "joinstr", "=", "joinstr", "[", "1", ":", "]", "<dedent>", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "root", ",", "joinstr", ")", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "<new_line>", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "<new_line>", "datareturn", ".", "append", "(", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "root", ",", "biossection", "=", "<new_line>", "True", ",", "registries", "=", "True", ",", "datareturn", "=", "True", ")", ")", "<new_line>", "LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "<dedent>", "<dedent>", "<dedent>", "return", "datareturn", "<dedent>", "def", "validate", "(", "self", ",", "item", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "<new_line>", "newarg", "=", "None", ",", "checkall", "=", "False", ",", "regloc", "=", "None", ")", ":", "<new_line>", "<indent>", "'Search for matching schemas and attribute registries and'", "<new_line>", "' ensure that item is valid.\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param regloc: path to registry location.\\n        :type regloc: str.\\n\\n        '"], 500]
[["<dedent>", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "def", "load_file", "(", "self", ",", "filepath", ",", "root", "=", "None", ",", "biossection", "=", "False", ",", "<new_line>", "registries", "=", "False", ",", "datareturn", "=", "False", ")", ":", "<new_line>", "<indent>", "'Loads the types from filepath.\\n\\n        :param filepath: path to a file to load, local or URL.\\n        :type filepath: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n        :param biossection: flag to determine if within BIOS section.\\n        :type biossection: str.\\n        :param registries: flag to determine if within registries section.\\n        :type registries: boolean.\\n        :param datareturn: flag to determine if the raw data should be returned.\\n        :type datareturn: boolean.\\n\\n        '", "<new_line>", "result", "=", "False", "<new_line>", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "filehand", "=", "open", "(", "filepath", ",", "'r'", ")", "<new_line>", "data", "=", "json", ".", "load", "(", "filehand", ")", "<new_line>", "if", "datareturn", ":", "<new_line>", "<indent>", "return", "data", "<dedent>", "if", "(", "(", "'Type'", "in", "data", ")", "and", "(", "data", "[", "'Type'", "]", "==", "'Collection.1.0.0'", ")", ")", ":", "<new_line>", "<indent>", "if", "(", "biossection", "and", "registries", ")", ":", "<new_line>", "<indent>", "itemsreturn", "=", "self", ".", "bios_helper_function", "(", "data", ",", "root", ")", "<new_line>", "data", "[", "'Items'", "]", "=", "itemsreturn", "<dedent>", "newclass", "=", "Classes", ".", "parse", "(", "data", ")", "<new_line>", "newclass", ".", "set_root", "(", "root", ")", "<new_line>", "if", "(", "not", "registries", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes", ".", "append", "(", "newclass", ")", "<dedent>", "<dedent>", "elif", "(", "not", "biossection", ")", ":", "<new_line>", "<indent>", "self", ".", "_classes_registry", ".", "append", "(", "newclass", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "self", ".", "_bios_classes_registry", ".", "append", "(", "newclass", ")", "<dedent>", "result", "=", "True", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "finally", ":", "<new_line>", "<indent>", "filehand", ".", "close", "(", ")", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "bios_helper_function", "(", "self", ",", "data", ",", "root", ")", ":", "<new_line>", "<indent>", "'Helper function for BIOS schemas\\n\\n        :param data: current retrieved data for BIOS.\\n        :type data: str.\\n        :param root: root path used to reconstruct full file paths.\\n        :type root: str.\\n\\n        '", "<new_line>", "folderentries", "=", "data", "[", "'links'", "]", "<new_line>", "datareturn", "=", "list", "(", ")", "<new_line>", "for", "entry", "in", "folderentries", "[", "'Member'", "]", ":", "<new_line>", "<indent>", "joinstr", "=", "entry", "[", "'href'", "]", "<new_line>", "if", "(", "(", "os", ".", "name", "==", "'nt'", ")", "and", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ")", ":", "<new_line>", "<indent>", "joinstr", "=", "joinstr", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "[", "1", ":", "]", "<dedent>", "elif", "(", "joinstr", "[", "0", "]", "==", "'/'", ")", ":", "<new_line>", "<indent>", "joinstr", "=", "joinstr", "[", "1", ":", "]", "<dedent>", "for", "(", "root", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "root", ",", "joinstr", ")", ")", ":", "<new_line>", "<indent>", "for", "filename", "in", "filenames", ":", "<new_line>", "<indent>", "fqpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "<new_line>", "os", ".", "path", ".", "normpath", "(", "root", ")", ",", "filename", ")", ")", "<new_line>", "datareturn", ".", "append", "(", "self", ".", "load_file", "(", "fqpath", ",", "root", "=", "root", ",", "biossection", "=", "<new_line>", "True", ",", "registries", "=", "True", ",", "datareturn", "=", "True", ")", ")", "<new_line>", "LOGGER", ".", "info", "(", "\"Loaded schema mapping '%s'\"", ",", "fqpath", ")", "<dedent>", "<dedent>", "<dedent>", "return", "datareturn", "<dedent>", "def", "validate", "(", "self", ",", "item", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "<new_line>", "newarg", "=", "None", ",", "checkall", "=", "False", ",", "regloc", "=", "None", ")", ":", "<new_line>", "<indent>", "'Search for matching schemas and attribute registries and'", "<new_line>", "' ensure that item is valid.\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param regloc: path to registry location.\\n        :type regloc: str.\\n\\n        '", "<new_line>", "if", "regloc", ":", "<new_line>", "<indent>", "attrreg", "=", "RepoRegistryEntry", "(", "regloc", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "attrreg", "=", "self", ".", "find_schema", "(", "schname", "=", "item", "[", "monolith", ".", "_typestring", "]", ")", "<dedent>", "if", "attrreg", ":", "<new_line>", "<indent>", "tempvalue", "=", "attrreg", ".", "validate", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ",", "currdict", "=", "<new_line>", "currdict", ",", "monolith", "=", "monolith", ",", "newarg", "=", "<new_line>", "newarg", ",", "checkall", "=", "checkall", ")", "<new_line>", "if", "(", "tempvalue", "is", "True", ")", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "elif", "tempvalue", ":", "<new_line>", "<indent>", "self", ".", "_errors", "=", "tempvalue", "<dedent>", "<dedent>", "return", "True", "<dedent>", "def", "bios_validate", "(", "self", ",", "item", ",", "regname", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "<new_line>", "checkall", "=", "False", ",", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'BIOS Search for matching schemas and attribute registries and'", "<new_line>", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "<new_line>", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "attrreg", ":", "<new_line>", "<indent>", "tempvalue", "=", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "<new_line>", "selector", ",", "currdict", "=", "currdict", ",", "checkall", "=", "<new_line>", "checkall", ",", "monolith", "=", "monolith", ")", "<new_line>", "if", "(", "tempvalue", "==", "'readonly'", ")", ":", "<new_line>", "<indent>", "return", "tempvalue", "<dedent>", "elif", "(", "tempvalue", "==", "'unique'", ")", ":", "<new_line>", "<indent>", "return", "tempvalue", "<dedent>", "elif", "tempvalue", ":", "<new_line>", "<indent>", "self", ".", "_errors", "=", "tempvalue", "<dedent>", "<dedent>", "return", "True", "<dedent>", "def", "bios_info", "(", "self", ",", "item", ",", "regname", ",", "selector", ")", ":", "<new_line>", "<indent>", "'BIOS Search for matching schemas and attribute registries and'", "<new_line>", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n\\n        '", "<new_line>", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "attrreg", ":", "<new_line>", "<indent>", "if", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "<new_line>", "selector", ")", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "<dedent>", "return", "True", "<dedent>", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "<new_line>", "<indent>", "'Searches through all locations and returns the first schema'", "<new_line>", "' found for the provided type\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "<new_line>", "for", "cls", "in", "self", ".", "_classes", ":", "<new_line>", "<indent>", "found", "=", "cls", ".", "find_schema", "(", "schname", "=", "schname", ")", "<new_line>", "if", "found", ":", "<new_line>", "<indent>", "return", "found", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Searches through all locations and returns the first registry'", "<new_line>", "' found for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "for", "cls", "in", "self", ".", "_classes_registry", ":", "<new_line>", "<indent>", "found", "=", "cls", ".", "find_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "found", ":", "<new_line>", "<indent>", "return", "found", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Searches through all locations and returns the first schema found'", "<new_line>", "' for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "for", "cls", "in", "self", ".", "_bios_classes_registry", ":", "<new_line>", "<indent>", "found", "=", "cls", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "found", ":", "<new_line>", "<indent>", "return", "found", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "get_errors", "(", "self", ")", ":", "<new_line>", "<indent>", "'Return a list of errors encountered'", "<new_line>", "return", "self", ".", "_errors", "<dedent>", "def", "_is_local", "(", "self", ",", "path", ")", ":", "<new_line>", "<indent>", "'Determine if path is a local file or remote\\n\\n        :param path: The path to examine.\\n        :type path: str.\\n\\n        '", "<new_line>", "if", "(", "'://'", "in", "path", ")", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "return", "True", "<dedent>", "<dedent>", "class", "Classes", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "item", ")", ":", "<new_line>", "<indent>", "super", "(", "Classes", ",", "self", ")", ".", "__init__", "(", "item", ")", "<new_line>", "self", ".", "_root", "=", "None", "<dedent>", "def", "set_root"], 500]
[["<new_line>", "if", "regloc", ":", "<new_line>", "<indent>", "attrreg", "=", "RepoRegistryEntry", "(", "regloc", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "attrreg", "=", "self", ".", "find_schema", "(", "schname", "=", "item", "[", "monolith", ".", "_typestring", "]", ")", "<dedent>", "if", "attrreg", ":", "<new_line>", "<indent>", "tempvalue", "=", "attrreg", ".", "validate", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "selector", ",", "currdict", "=", "<new_line>", "currdict", ",", "monolith", "=", "monolith", ",", "newarg", "=", "<new_line>", "newarg", ",", "checkall", "=", "checkall", ")", "<new_line>", "if", "(", "tempvalue", "is", "True", ")", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "elif", "tempvalue", ":", "<new_line>", "<indent>", "self", ".", "_errors", "=", "tempvalue", "<dedent>", "<dedent>", "return", "True", "<dedent>", "def", "bios_validate", "(", "self", ",", "item", ",", "regname", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "<new_line>", "checkall", "=", "False", ",", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'BIOS Search for matching schemas and attribute registries and'", "<new_line>", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n\\n        '", "<new_line>", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "attrreg", ":", "<new_line>", "<indent>", "tempvalue", "=", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "<new_line>", "selector", ",", "currdict", "=", "currdict", ",", "checkall", "=", "<new_line>", "checkall", ",", "monolith", "=", "monolith", ")", "<new_line>", "if", "(", "tempvalue", "==", "'readonly'", ")", ":", "<new_line>", "<indent>", "return", "tempvalue", "<dedent>", "elif", "(", "tempvalue", "==", "'unique'", ")", ":", "<new_line>", "<indent>", "return", "tempvalue", "<dedent>", "elif", "tempvalue", ":", "<new_line>", "<indent>", "self", ".", "_errors", "=", "tempvalue", "<dedent>", "<dedent>", "return", "True", "<dedent>", "def", "bios_info", "(", "self", ",", "item", ",", "regname", ",", "selector", ")", ":", "<new_line>", "<indent>", "'BIOS Search for matching schemas and attribute registries and'", "<new_line>", "' ensure that item is valid\\n\\n        :param item: the item to be validated.\\n        :type item: str.\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n\\n        '", "<new_line>", "attrreg", "=", "self", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "attrreg", ":", "<new_line>", "<indent>", "if", "attrreg", ".", "validate_bios_version", "(", "item", ",", "self", ".", "_errors", ",", "selector", "=", "<new_line>", "selector", ")", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "<dedent>", "return", "True", "<dedent>", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "<new_line>", "<indent>", "'Searches through all locations and returns the first schema'", "<new_line>", "' found for the provided type\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "<new_line>", "for", "cls", "in", "self", ".", "_classes", ":", "<new_line>", "<indent>", "found", "=", "cls", ".", "find_schema", "(", "schname", "=", "schname", ")", "<new_line>", "if", "found", ":", "<new_line>", "<indent>", "return", "found", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Searches through all locations and returns the first registry'", "<new_line>", "' found for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "for", "cls", "in", "self", ".", "_classes_registry", ":", "<new_line>", "<indent>", "found", "=", "cls", ".", "find_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "found", ":", "<new_line>", "<indent>", "return", "found", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Searches through all locations and returns the first schema found'", "<new_line>", "' for the provided type\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "for", "cls", "in", "self", ".", "_bios_classes_registry", ":", "<new_line>", "<indent>", "found", "=", "cls", ".", "find_bios_registry", "(", "regname", "=", "regname", ")", "<new_line>", "if", "found", ":", "<new_line>", "<indent>", "return", "found", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "get_errors", "(", "self", ")", ":", "<new_line>", "<indent>", "'Return a list of errors encountered'", "<new_line>", "return", "self", ".", "_errors", "<dedent>", "def", "_is_local", "(", "self", ",", "path", ")", ":", "<new_line>", "<indent>", "'Determine if path is a local file or remote\\n\\n        :param path: The path to examine.\\n        :type path: str.\\n\\n        '", "<new_line>", "if", "(", "'://'", "in", "path", ")", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "return", "True", "<dedent>", "<dedent>", "class", "Classes", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "item", ")", ":", "<new_line>", "<indent>", "super", "(", "Classes", ",", "self", ")", ".", "__init__", "(", "item", ")", "<new_line>", "self", ".", "_root", "=", "None", "<dedent>", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "<new_line>", "<indent>", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "<new_line>", "self", ".", "_root", "=", "newroot", "<dedent>", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "<new_line>", "<indent>", "'Returns iLO schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "entry", "and", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", "==", "<new_line>", "schname", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "schname", "=", "schname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "<new_line>", "for", "entry", "in", "self", ".", "Members", ":", "<new_line>", "<indent>", "schlink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "<new_line>", "schlink", "=", "schlink", "[", "(", "len", "(", "schlink", ")", "-", "2", ")", "]", "<new_line>", "if", "(", "schname", ".", "lower", "(", ")", "==", "schlink", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "result", "=", "entry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Returns iLO registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "<new_line>", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ".", "startswith", "(", "regname", ".", "lower", "(", ")", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "regname", "=", "regname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "<new_line>", "for", "entry", "in", "self", ".", "Members", ":", "<new_line>", "<indent>", "reglink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "<new_line>", "reglink", "=", "reglink", "[", "(", "len", "(", "reglink", ")", "-", "2", ")", "]", "<new_line>", "if", "(", "regname", ".", "lower", "(", ")", "==", "reglink", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "result", "=", "entry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "find_bios_schema", "(", "self", ",", "schname", ")", ":", "<new_line>", "<indent>", "'Returns BIOS schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", "==", "<new_line>", "schname", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "="], 500]
[["(", "self", ",", "newroot", ")", ":", "<new_line>", "<indent>", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "<new_line>", "self", ".", "_root", "=", "newroot", "<dedent>", "def", "find_schema", "(", "self", ",", "schname", ")", ":", "<new_line>", "<indent>", "'Returns iLO schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "entry", "and", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", "==", "<new_line>", "schname", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "schname", "=", "schname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "<new_line>", "for", "entry", "in", "self", ".", "Members", ":", "<new_line>", "<indent>", "schlink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "<new_line>", "schlink", "=", "schlink", "[", "(", "len", "(", "schlink", ")", "-", "2", ")", "]", "<new_line>", "if", "(", "schname", ".", "lower", "(", ")", "==", "schlink", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "result", "=", "entry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "find_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Returns iLO registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "<new_line>", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ".", "startswith", "(", "regname", ".", "lower", "(", ")", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "hasattr", "(", "self", ",", "'Members'", ")", "and", "isinstance", "(", "self", ".", "Members", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "regname", "=", "regname", ".", "split", "(", "'.'", ")", "[", "(", "-", "1", ")", "]", "<new_line>", "for", "entry", "in", "self", ".", "Members", ":", "<new_line>", "<indent>", "reglink", "=", "entry", "[", "'@odata.id'", "]", ".", "split", "(", "'/'", ")", "<new_line>", "reglink", "=", "reglink", "[", "(", "len", "(", "reglink", ")", "-", "2", ")", "]", "<new_line>", "if", "(", "regname", ".", "lower", "(", ")", "==", "reglink", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "result", "=", "entry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "find_bios_schema", "(", "self", ",", "schname", ")", ":", "<new_line>", "<indent>", "'Returns BIOS schemas\\n\\n        :param schname: string containing the schema name.\\n        :type schname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", "==", "<new_line>", "schname", ".", "lower", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Returns BIOS registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "regname", ".", "lower", "(", ")", "in", "<new_line>", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "<dedent>", "class", "RepoBaseEntry", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "RepoBaseEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "<new_line>", "self", ".", "_root", "=", "None", "<dedent>", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "<new_line>", "<indent>", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "<new_line>", "self", ".", "_root", "=", "newroot", "<dedent>", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "<new_line>", "<indent>", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "'Uri'", "in", "currloc", ")", ":", "<new_line>", "<indent>", "root", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "_root", ")", "<new_line>", "xref", "=", "os", ".", "path", ".", "normpath", "(", "currloc", ".", "Uri", ".", "extref", ")", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", "<new_line>", "fqpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "xref", ")", "<new_line>", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "SchemaValidationError", "(", "<new_line>", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "fqpath", ")", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "result", "=", "None", "<new_line>", "if", "fqpath", ".", "endswith", "(", "'.json'", ")", ":", "<new_line>", "<indent>", "result", "=", "open", "(", "fqpath", ")", ".", "read", "(", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "<dedent>", "class", "RepoRegistryEntry", "(", "RepoBaseEntry", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "RepoRegistryEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "<new_line>", "checkall", "=", "False", ",", "monolith", "=", "None", ",", "newarg", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "reg", "=", "self", ".", "get_registry_model", "(", "errlist", "=", "errlist", ",", "currdict", "=", "currdict", ",", "monolith", "=", "<new_line>", "monolith", ",", "newarg", "=", "newarg", ")", "<new_line>", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "reg", "[", "selector", "]", ".", "readonly", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>"], 500]
[["RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "find_bios_registry", "(", "self", ",", "regname", ")", ":", "<new_line>", "<indent>", "'Returns BIOS registries\\n\\n        :param regname: string containing the registry name.\\n        :type regname: str.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "hasattr", "(", "self", ",", "'Items'", ")", "and", "isinstance", "(", "self", ".", "Items", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "for", "entry", "in", "self", ".", "Items", ":", "<new_line>", "<indent>", "if", "(", "entry", "and", "(", "(", "'Schema'", "in", "entry", ")", "and", "(", "regname", ".", "lower", "(", ")", "in", "<new_line>", "entry", "[", "'Schema'", "]", ".", "lower", "(", ")", ")", ")", ")", ":", "<new_line>", "<indent>", "regentry", "=", "RepoRegistryEntry", ".", "parse", "(", "entry", ")", "<new_line>", "regentry", ".", "set_root", "(", "self", ".", "_root", ")", "<new_line>", "result", "=", "regentry", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "<dedent>", "class", "RepoBaseEntry", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "RepoBaseEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "<new_line>", "self", ".", "_root", "=", "None", "<dedent>", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "<new_line>", "<indent>", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "<new_line>", "self", ".", "_root", "=", "newroot", "<dedent>", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "<new_line>", "<indent>", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "result", "=", "None", "<new_line>", "if", "(", "'Uri'", "in", "currloc", ")", ":", "<new_line>", "<indent>", "root", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "_root", ")", "<new_line>", "xref", "=", "os", ".", "path", ".", "normpath", "(", "currloc", ".", "Uri", ".", "extref", ")", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", "<new_line>", "fqpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "xref", ")", "<new_line>", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "SchemaValidationError", "(", "<new_line>", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "fqpath", ")", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "result", "=", "None", "<new_line>", "if", "fqpath", ".", "endswith", "(", "'.json'", ")", ":", "<new_line>", "<indent>", "result", "=", "open", "(", "fqpath", ")", ".", "read", "(", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "<dedent>", "class", "RepoRegistryEntry", "(", "RepoBaseEntry", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "RepoRegistryEntry", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "currdict", "=", "None", ",", "<new_line>", "checkall", "=", "False", ",", "monolith", "=", "None", ",", "newarg", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "reg", "=", "self", ".", "get_registry_model", "(", "errlist", "=", "errlist", ",", "currdict", "=", "currdict", ",", "monolith", "=", "<new_line>", "monolith", ",", "newarg", "=", "newarg", ")", "<new_line>", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "reg", "[", "selector", "]", ".", "readonly", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "<dedent>", "if", "errlist", ":", "<new_line>", "<indent>", "return", "errlist", "<dedent>", "<dedent>", "def", "validate_bios_version", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "<new_line>", "checkall", "=", "False", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'BIOS VERSION. Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "reg", "=", "self", ".", "get_registry_model_bios_version", "(", "errlist", "=", "errlist", ",", "currdict", "=", "<new_line>", "currdict", ",", "monolith", "=", "monolith", ")", "<new_line>", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "reg", ".", "Attributes", ":", "<new_line>", "<indent>", "if", "(", "not", "(", "item", "[", "'Name'", "]", "==", "selector", ")", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "if", "(", "item", "[", "'ReadOnly'", "]", "is", "True", ")", ":", "<new_line>", "<indent>", "return", "'readonly'", "<dedent>", "try", ":", "<new_line>", "<indent>", "if", "(", "item", "[", "'IsSystemUniqueProperty'", "]", "is", "True", ")", ":", "<new_line>", "<indent>", "return", "'unique'", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "continue", "<dedent>", "else", ":", "<new_line>", "<indent>", "continue", "<dedent>", "<dedent>", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "<dedent>", "if", "errlist", ":", "<new_line>", "<indent>", "return", "errlist", "<dedent>", "<dedent>", "def", "validate_deprecated", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "<new_line>", "return", "errlist", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "None", "<new_line>", "langcode", "=", "'TBD'", "<new_line>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "[", "loclang", "]", "<new_line>", "break", "<dedent>", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "<new_line>", "<indent>", "defloc", "=", "loc", "[", "loclang", "]", "<dedent>", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "<new_line>", "return", "<dedent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "<new_line>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "<new_line>", "if", "(", "'Registry'", "in", "jsonreg", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "'Type'", "in"], 500]
[["elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "<dedent>", "if", "errlist", ":", "<new_line>", "<indent>", "return", "errlist", "<dedent>", "<dedent>", "def", "validate_bios_version", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ",", "selector", "=", "None", ",", "<new_line>", "checkall", "=", "False", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ")", ":", "<new_line>", "<indent>", "'BIOS VERSION. Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param selector: the type selection for the get operation.\\n        :type selector: str.\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param checkall: flag to determine if check all should be enabled.\\n        :type checkall: boolean.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "reg", "=", "self", ".", "get_registry_model_bios_version", "(", "errlist", "=", "errlist", ",", "currdict", "=", "<new_line>", "currdict", ",", "monolith", "=", "monolith", ")", "<new_line>", "if", "(", "reg", "and", "(", "not", "checkall", ")", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "reg", ".", "Attributes", ":", "<new_line>", "<indent>", "if", "(", "not", "(", "item", "[", "'Name'", "]", "==", "selector", ")", ")", ":", "<new_line>", "<indent>", "continue", "<dedent>", "if", "(", "item", "[", "'ReadOnly'", "]", "is", "True", ")", ":", "<new_line>", "<indent>", "return", "'readonly'", "<dedent>", "try", ":", "<new_line>", "<indent>", "if", "(", "item", "[", "'IsSystemUniqueProperty'", "]", "is", "True", ")", ":", "<new_line>", "<indent>", "return", "'unique'", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "continue", "<dedent>", "else", ":", "<new_line>", "<indent>", "continue", "<dedent>", "<dedent>", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "elif", "(", "checkall", "and", "(", "selector", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "results", "=", "reg", ".", "validate_att_val_bios", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to locate registry model'", ")", ")", "<dedent>", "if", "errlist", ":", "<new_line>", "<indent>", "return", "errlist", "<dedent>", "<dedent>", "def", "validate_deprecated", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location property does not exist'", ")", ")", "<new_line>", "return", "errlist", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "None", "<new_line>", "langcode", "=", "'TBD'", "<new_line>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "[", "loclang", "]", "<new_line>", "break", "<dedent>", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "<new_line>", "<indent>", "defloc", "=", "loc", "[", "loclang", "]", "<dedent>", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "<new_line>", "return", "<dedent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "<new_line>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "<new_line>", "if", "(", "'Registry'", "in", "jsonreg", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "'Type'", "in", "jsonreg", ")", "and", "(", "jsonreg", "[", "'Type'", "]", "==", "<new_line>", "'HpPropertiesRegistrySchema.1.0.0'", ")", ")", ":", "<new_line>", "<indent>", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "jsonreg", "[", "'Registry'", "]", ")", "<new_line>", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "def", "get_registry_model", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "errlist", "=", "None", ",", "<new_line>", "skipcommit", "=", "False", ",", "searchtype", "=", "None", ",", "newarg", "=", "None", ",", "latestschema", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and find the registry model if available\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param skipcommit: flag to determine if commit should be skipped.\\n        :type skipcommit: boolean.\\n        :param searchtype: classifier for the current search.\\n        :type searchtype: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param latestschema: flag to determine if we should use smart schema.\\n        :type latestschema: boolean.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "'Location property does not exist'", ")", ")", "<new_line>", "return", "None", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "'en'", "<new_line>", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "<new_line>", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "<new_line>", "<indent>", "langcode", "[", "0", "]", "=", "'en'", "<dedent>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "<new_line>", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "<new_line>", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "<new_line>", "break", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "<new_line>", "return", "None", "<dedent>", "if", "(", "not", "searchtype", ")", ":", "<new_line>", "<indent>", "searchtype", "=", "'ob'", "<dedent>", "location_file", "=", "None", "<new_line>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "for", "itemtype", "in", "monolith", ".", "types", ":", "<new_line>", "<indent>", "if", "(", "itemtype", ".", "lower", "(", ")", ".", "startswith", "(", "searchtype", ".", "lower", "(", ")", ")", "and", "<new_line>", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "<new_line>", "<indent>", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "<new_line>", "'#'", ")", "[", "(", "-", "1", ")", "]", "<new_line>", "currtype", "=", "(", "currtype", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", "<dedent>", "if", "latestschema", ":", "<new_line>", "<indent>", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "<new_line>", "'.'", ")", "[", ":", "1", "]", "<new_line>", "insttype", "=", "instance", ".", "resp", ".", "dict", "[", "'title'", "]", ".", "split", "(", "<new_line>", "'.'", ")", "[", ":", "1", "]", "<new_line>", "if", "(", "(", "currtype", "==", "insttype", ")", "or", "(", "currtype", "==", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "<new_line>", "'oldtitle'", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", ")", ")", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "<dedent>", "elif", "(", "(", "(", "searchtype", "==", "'ob'", ")", "and", "instance", ".", "resp", ".", "dict", "[", "<new_line>"], 500]
[["jsonreg", ")", "and", "(", "jsonreg", "[", "'Type'", "]", "==", "<new_line>", "'HpPropertiesRegistrySchema.1.0.0'", ")", ")", ":", "<new_line>", "<indent>", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "jsonreg", "[", "'Registry'", "]", ")", "<new_line>", "results", "=", "reg", ".", "validate_attribute_values", "(", "tdict", ")", "<new_line>", "errlist", ".", "extend", "(", "results", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "def", "get_registry_model", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "errlist", "=", "None", ",", "<new_line>", "skipcommit", "=", "False", ",", "searchtype", "=", "None", ",", "newarg", "=", "None", ",", "latestschema", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and find the registry model if available\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n        :param skipcommit: flag to determine if commit should be skipped.\\n        :type skipcommit: boolean.\\n        :param searchtype: classifier for the current search.\\n        :type searchtype: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param latestschema: flag to determine if we should use smart schema.\\n        :type latestschema: boolean.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "'Location property does not exist'", ")", ")", "<new_line>", "return", "None", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "'en'", "<new_line>", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "<new_line>", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "<new_line>", "<indent>", "langcode", "[", "0", "]", "=", "'en'", "<dedent>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "<new_line>", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "<new_line>", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "<new_line>", "break", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Unable to determine location'", ")", ")", "<new_line>", "return", "None", "<dedent>", "if", "(", "not", "searchtype", ")", ":", "<new_line>", "<indent>", "searchtype", "=", "'ob'", "<dedent>", "location_file", "=", "None", "<new_line>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "for", "itemtype", "in", "monolith", ".", "types", ":", "<new_line>", "<indent>", "if", "(", "itemtype", ".", "lower", "(", ")", ".", "startswith", "(", "searchtype", ".", "lower", "(", ")", ")", "and", "<new_line>", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "<new_line>", "<indent>", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "monolith", ".", "is_redfish", ":", "<new_line>", "<indent>", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "<new_line>", "'#'", ")", "[", "(", "-", "1", ")", "]", "<new_line>", "currtype", "=", "(", "currtype", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.'", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", "<dedent>", "if", "latestschema", ":", "<new_line>", "<indent>", "currtype", "=", "currdict", "[", "instance", ".", "_typestring", "]", ".", "split", "(", "<new_line>", "'.'", ")", "[", ":", "1", "]", "<new_line>", "insttype", "=", "instance", ".", "resp", ".", "dict", "[", "'title'", "]", ".", "split", "(", "<new_line>", "'.'", ")", "[", ":", "1", "]", "<new_line>", "if", "(", "(", "currtype", "==", "insttype", ")", "or", "(", "currtype", "==", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "<new_line>", "'oldtitle'", "]", ".", "split", "(", "'.'", ")", "[", ":", "1", "]", ")", ")", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "<dedent>", "elif", "(", "(", "(", "searchtype", "==", "'ob'", ")", "and", "instance", ".", "resp", ".", "dict", "[", "<new_line>", "'title'", "]", ".", "startswith", "(", "currtype", ")", ")", "or", "<new_line>", "(", "(", "'oldtitle'", "in", "instance", ".", "resp", ".", "dict", ".", "keys", "(", ")", ")", "and", "<new_line>", "(", "currdict", "[", "instance", ".", "_typestring", "]", "==", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "'oldtitle'", "]", ")", ")", ")", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "elif", "(", "(", "searchtype", "!=", "'ob'", ")", "and", "<new_line>", "(", "currdict", "[", "instance", ".", "_typestring", "]", "in", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "'RegistryPrefix'", "]", ")", ")", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "<dedent>", "if", "location_file", ":", "<new_line>", "<indent>", "break", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "<dedent>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "<new_line>", "JSONEncoder", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "<dedent>", "if", "skipcommit", ":", "<new_line>", "<indent>", "return", "jsonreg", "[", "'Messages'", "]", "<dedent>", "if", "(", "'properties'", "in", "jsonreg", ")", ":", "<new_line>", "<indent>", "regitem", "=", "jsonreg", "[", "'properties'", "]", "<new_line>", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "<new_line>", "if", "newarg", ":", "<new_line>", "<indent>", "regcopy", "=", "reg", "<new_line>", "for", "arg", "in", "newarg", "[", ":", "(", "-", "1", ")", "]", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "(", "'properties'", "in", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", "and", "<new_line>", "(", "'patternProperties'", "in", "<new_line>", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "regcopy", "[", "arg", "]", "[", "'properties'", "]", ".", "update", "(", "<new_line>", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", ")", "<new_line>", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'properties'", "]", "<new_line>", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "<new_line>", "<indent>", "test", "=", "re", ".", "compile", "(", "pattern", ")", "<new_line>", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "<new_line>", "match", "=", "test", ".", "match", "(", "nextarg", ")", "<new_line>", "if", "match", ":", "<new_line>", "<indent>", "regcopy", "[", "nextarg", "]", "=", "regcopy", ".", "pop", "(", "pattern", ")", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "'oneOf'", "in", "regcopy", "[", "arg", "]", ")", ":", "<new_line>", "<indent>", "oneof", "=", "regcopy", "[", "arg", "]", "[", "'oneOf'", "]", "<new_line>", "for", "item", "in", "oneof", ":", "<new_line>", "<indent>", "regcopy", "=", "item", "[", "'properties'", "]", "<new_line>", "if", "(", "not", "(", "arg", "==", "newarg", "[", "(", "-", "1", ")", "]", ")", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "nextitem", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "<new_line>", "regcopy", "[", "nextitem", "]", "<new_line>", "break", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "continue", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "regcopy", "=", "regcopy", "["], 500]
[["'title'", "]", ".", "startswith", "(", "currtype", ")", ")", "or", "<new_line>", "(", "(", "'oldtitle'", "in", "instance", ".", "resp", ".", "dict", ".", "keys", "(", ")", ")", "and", "<new_line>", "(", "currdict", "[", "instance", ".", "_typestring", "]", "==", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "'oldtitle'", "]", ")", ")", ")", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "elif", "(", "(", "searchtype", "!=", "'ob'", ")", "and", "<new_line>", "(", "currdict", "[", "instance", ".", "_typestring", "]", "in", "<new_line>", "instance", ".", "resp", ".", "dict", "[", "'RegistryPrefix'", "]", ")", ")", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "pass", "<dedent>", "else", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "<dedent>", "if", "location_file", ":", "<new_line>", "<indent>", "break", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "<dedent>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "<new_line>", "JSONEncoder", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "<dedent>", "if", "skipcommit", ":", "<new_line>", "<indent>", "return", "jsonreg", "[", "'Messages'", "]", "<dedent>", "if", "(", "'properties'", "in", "jsonreg", ")", ":", "<new_line>", "<indent>", "regitem", "=", "jsonreg", "[", "'properties'", "]", "<new_line>", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "<new_line>", "if", "newarg", ":", "<new_line>", "<indent>", "regcopy", "=", "reg", "<new_line>", "for", "arg", "in", "newarg", "[", ":", "(", "-", "1", ")", "]", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "(", "'properties'", "in", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", "and", "<new_line>", "(", "'patternProperties'", "in", "<new_line>", "regcopy", "[", "arg", "]", ".", "iterkeys", "(", ")", ")", ")", ":", "<new_line>", "<indent>", "regcopy", "[", "arg", "]", "[", "'properties'", "]", ".", "update", "(", "<new_line>", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", ")", "<new_line>", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'properties'", "]", "<new_line>", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "<new_line>", "<indent>", "test", "=", "re", ".", "compile", "(", "pattern", ")", "<new_line>", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "<new_line>", "match", "=", "test", ".", "match", "(", "nextarg", ")", "<new_line>", "if", "match", ":", "<new_line>", "<indent>", "regcopy", "[", "nextarg", "]", "=", "regcopy", ".", "pop", "(", "pattern", ")", "<new_line>", "break", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "'oneOf'", "in", "regcopy", "[", "arg", "]", ")", ":", "<new_line>", "<indent>", "oneof", "=", "regcopy", "[", "arg", "]", "[", "'oneOf'", "]", "<new_line>", "for", "item", "in", "oneof", ":", "<new_line>", "<indent>", "regcopy", "=", "item", "[", "'properties'", "]", "<new_line>", "if", "(", "not", "(", "arg", "==", "newarg", "[", "(", "-", "1", ")", "]", ")", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "nextitem", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "<new_line>", "regcopy", "[", "nextitem", "]", "<new_line>", "break", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "continue", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'properties'", "]", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", "<new_line>", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "<new_line>", "<indent>", "test", "=", "re", ".", "compile", "(", "pattern", ")", "<new_line>", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "<new_line>", "match", "=", "test", ".", "match", "(", "nextarg", ")", "<new_line>", "if", "match", ":", "<new_line>", "<indent>", "patterninfo", "=", "regcopy", ".", "pop", "(", "pattern", ")", "<new_line>", "regcopy", "[", "nextarg", "]", "=", "patterninfo", "<dedent>", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "<dedent>", "reg", "=", "regcopy", "<dedent>", "<dedent>", "return", "reg", "<dedent>", "return", "None", "<dedent>", "def", "get_registry_model_bios_version", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "<new_line>", "errlist", "=", "None", ")", ":", "<new_line>", "<indent>", "'BIOS VERSION Load the schema file and find the registry model'", "<new_line>", "' if available.\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "'Location property does not exist'", ")", ")", "<new_line>", "return", "None", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "'en'", "<new_line>", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "<new_line>", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "<new_line>", "<indent>", "langcode", "[", "0", "]", "=", "'en'", "<dedent>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "<new_line>", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "<new_line>", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "<new_line>", "break", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "'Unable to determine location'", ")", ")", "<new_line>", "return", "None", "<dedent>", "location_file", "=", "None", "<new_line>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "for", "itemtype", "in", "monolith", ".", "types", ":", "<new_line>", "<indent>", "if", "(", "(", "'HpBiosAttributeRegistrySchema.'", "in", "itemtype", ")", "and", "<new_line>", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "<new_line>", "<indent>", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "<dedent>", "if", "location_file", ":", "<new_line>", "<indent>", "break", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "<dedent>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "<new_line>", "JSONEncoder", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "<dedent>", "if", "(", "'RegistryEntries'", "in", "jsonreg", ")", ":", "<new_line>", "<indent>", "regitem", "=", "jsonreg", "[", "'RegistryEntries'", "]", "<new_line>", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "<new_line>", "return", "reg", "<dedent>", "<dedent>", "return"], 500]
[["arg", "]", "[", "'properties'", "]", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "regcopy", "=", "regcopy", "[", "arg", "]", "[", "'patternProperties'", "]", "<new_line>", "for", "pattern", "in", "regcopy", ".", "iterkeys", "(", ")", ":", "<new_line>", "<indent>", "test", "=", "re", ".", "compile", "(", "pattern", ")", "<new_line>", "nextarg", "=", "newarg", "[", "(", "newarg", ".", "index", "(", "arg", ")", "+", "1", ")", "]", "<new_line>", "match", "=", "test", ".", "match", "(", "nextarg", ")", "<new_line>", "if", "match", ":", "<new_line>", "<indent>", "patterninfo", "=", "regcopy", ".", "pop", "(", "pattern", ")", "<new_line>", "regcopy", "[", "nextarg", "]", "=", "patterninfo", "<dedent>", "<dedent>", "<dedent>", "except", "BaseException", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "<dedent>", "reg", "=", "regcopy", "<dedent>", "<dedent>", "return", "reg", "<dedent>", "return", "None", "<dedent>", "def", "get_registry_model_bios_version", "(", "self", ",", "currdict", "=", "None", ",", "monolith", "=", "None", ",", "<new_line>", "errlist", "=", "None", ")", ":", "<new_line>", "<indent>", "'BIOS VERSION Load the schema file and find the registry model'", "<new_line>", "' if available.\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param monolith: full data model retrieved from server.\\n        :type monolith: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "'Location property does not exist'", ")", ")", "<new_line>", "return", "None", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "'en'", "<new_line>", "langcode", "=", "list", "(", "locale", ".", "getdefaultlocale", "(", ")", ")", "<new_line>", "if", "(", "not", "langcode", "[", "0", "]", ")", ":", "<new_line>", "<indent>", "langcode", "[", "0", "]", "=", "'en'", "<dedent>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "locationlanguage", "=", "loc", "[", "'Language'", "]", ".", "lower", "(", ")", "<new_line>", "locationlanguage", "=", "locationlanguage", ".", "replace", "(", "'-'", ",", "'_'", ")", "<new_line>", "if", "(", "locationlanguage", "in", "langcode", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "<new_line>", "break", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "'Unable to determine location'", ")", ")", "<new_line>", "return", "None", "<dedent>", "location_file", "=", "None", "<new_line>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "for", "itemtype", "in", "monolith", ".", "types", ":", "<new_line>", "<indent>", "if", "(", "(", "'HpBiosAttributeRegistrySchema.'", "in", "itemtype", ")", "and", "<new_line>", "(", "'Instances'", "in", "monolith", ".", "types", "[", "itemtype", "]", ")", ")", ":", "<new_line>", "<indent>", "for", "instance", "in", "monolith", ".", "types", "[", "itemtype", "]", "[", "'Instances'", "]", ":", "<new_line>", "<indent>", "location_file", "=", "instance", ".", "resp", ".", "dict", "<new_line>", "break", "<dedent>", "<dedent>", "if", "location_file", ":", "<new_line>", "<indent>", "break", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "errlist", ")", "<dedent>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "RegistryValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "if", "(", "currdict", "and", "monolith", ")", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "location_file", ",", "indent", "=", "2", ",", "cls", "=", "<new_line>", "JSONEncoder", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonreg", "=", "json", ".", "loads", "(", "location_file", ")", "<dedent>", "if", "(", "'RegistryEntries'", "in", "jsonreg", ")", ":", "<new_line>", "<indent>", "regitem", "=", "jsonreg", "[", "'RegistryEntries'", "]", "<new_line>", "reg", "=", "HpPropertiesRegistry", ".", "parse", "(", "regitem", ")", "<new_line>", "return", "reg", "<dedent>", "<dedent>", "return", "None", "<dedent>", "<dedent>", "class", "RepoSchemaEntry", "(", "RepoBaseEntry", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "item", ")", ":", "<new_line>", "<indent>", "super", "(", "RepoSchemaEntry", ",", "self", ")", ".", "__init__", "(", "item", ")", "<new_line>", "self", ".", "_root", "=", "None", "<dedent>", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "<new_line>", "<indent>", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "<new_line>", "self", ".", "_root", "=", "newroot", "<dedent>", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "<new_line>", "<indent>", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "(", "'ArchiveUri'", "in", "currloc", ")", "and", "(", "'ArchiveFile'", "in", "currloc", ")", ")", ":", "<new_line>", "<indent>", "fqpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "<new_line>", "currloc", ".", "ArchiveUri", ".", "xref", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", ")", "<new_line>", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "SchemaValidationError", "(", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "<new_line>", "fqpath", ")", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "archive_file", "=", "currloc", ".", "ArchiveFile", "<new_line>", "archive_fh", "=", "None", "<new_line>", "result", "=", "None", "<new_line>", "if", "fqpath", ".", "endswith", "(", "'.zip'", ")", ":", "<new_line>", "<indent>", "archive_fh", "=", "zipfile", ".", "ZipFile", "(", "fqpath", ")", "<new_line>", "infolist", "=", "archive_fh", ".", "infolist", "(", ")", "<new_line>", "for", "i", "in", "infolist", ":", "<new_line>", "<indent>", "if", "(", "i", ".", "filename", ".", "lower", "(", ")", "==", "archive_file", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "jsonsch_fh", "=", "archive_fh", ".", "open", "(", "i", ")", "<new_line>", "result", "=", "jsonsch_fh", ".", "read", "(", ")", "<new_line>", "jsonsch_fh", ".", "close", "(", ")", "<dedent>", "<dedent>", "archive_fh", ".", "close", "(", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location property does not exist'", ")", ")", "<new_line>", "return", "result", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "None", "<new_line>", "langcode", "=", "'TBD'", "<new_line>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "[", "loclang", "]", "<new_line>", "break", "<dedent>", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "<new_line>", "<indent>", "defloc", "=", "loc", "[", "loclang", "]", "<dedent>", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "SchemaValidationError", "(", "<new_line>", "'Unable to determine location'", ")", ")", "<new_line>", "return", "<dedent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "result", ")", "<new_line>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonsch", "=", "json", ".", "loads", "(", "location_file", ")", "<new_line>", "validictory", ".", "validate", "(", "tdict", ",", "jsonsch", ")", "<dedent>", "<dedent>", "<dedent>", "class", "HpPropertiesRegistry", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Models the HpPropertiesRegistry file'", "<new_line>", "def", "__init__", "(", "self", ","], 500]
[["None", "<dedent>", "<dedent>", "class", "RepoSchemaEntry", "(", "RepoBaseEntry", ")", ":", "<new_line>", "<indent>", "'Represents an entry in the Classes registry'", "<new_line>", "def", "__init__", "(", "self", ",", "item", ")", ":", "<new_line>", "<indent>", "super", "(", "RepoSchemaEntry", ",", "self", ")", ".", "__init__", "(", "item", ")", "<new_line>", "self", ".", "_root", "=", "None", "<dedent>", "def", "set_root", "(", "self", ",", "newroot", ")", ":", "<new_line>", "<indent>", "'Set new root\\n\\n        :param newroot: new root to be set.\\n        :type newroot: str.\\n\\n        '", "<new_line>", "self", ".", "_root", "=", "newroot", "<dedent>", "def", "_read_location_file", "(", "self", ",", "currloc", ",", "errlist", ")", ":", "<new_line>", "<indent>", "'Return results from locations\\n\\n        :param currdict: current selection dictionary.\\n        :type currdict: dict.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "(", "'ArchiveUri'", "in", "currloc", ")", "and", "(", "'ArchiveFile'", "in", "currloc", ")", ")", ":", "<new_line>", "<indent>", "fqpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "<new_line>", "currloc", ".", "ArchiveUri", ".", "xref", ".", "lstrip", "(", "os", ".", "path", ".", "sep", ")", ")", "<new_line>", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "fqpath", ")", ")", ":", "<new_line>", "<indent>", "errlist", ".", "append", "(", "SchemaValidationError", "(", "(", "\"Unable to location ArchiveUri '%s'\"", "%", "<new_line>", "fqpath", ")", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "archive_file", "=", "currloc", ".", "ArchiveFile", "<new_line>", "archive_fh", "=", "None", "<new_line>", "result", "=", "None", "<new_line>", "if", "fqpath", ".", "endswith", "(", "'.zip'", ")", ":", "<new_line>", "<indent>", "archive_fh", "=", "zipfile", ".", "ZipFile", "(", "fqpath", ")", "<new_line>", "infolist", "=", "archive_fh", ".", "infolist", "(", ")", "<new_line>", "for", "i", "in", "infolist", ":", "<new_line>", "<indent>", "if", "(", "i", ".", "filename", ".", "lower", "(", ")", "==", "archive_file", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "jsonsch_fh", "=", "archive_fh", ".", "open", "(", "i", ")", "<new_line>", "result", "=", "jsonsch_fh", ".", "read", "(", ")", "<new_line>", "jsonsch_fh", ".", "close", "(", ")", "<dedent>", "<dedent>", "archive_fh", ".", "close", "(", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "validate", "(", "self", ",", "tdict", ",", "errlist", "=", "None", ")", ":", "<new_line>", "<indent>", "'Load the schema file and validate tdict against it\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n        :param errlist: list containing found errors.\\n        :type errlist: list.\\n\\n        '", "<new_line>", "if", "(", "not", "errlist", ")", ":", "<new_line>", "<indent>", "errlist", "=", "list", "(", ")", "<dedent>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "not", "hasattr", "(", "self", ",", "'Location'", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location property does not exist'", ")", ")", "<new_line>", "return", "result", "<dedent>", "currloc", "=", "None", "<new_line>", "defloc", "=", "None", "<new_line>", "langcode", "=", "'TBD'", "<new_line>", "for", "loc", "in", "self", ".", "Location", ":", "<new_line>", "<indent>", "for", "loclang", "in", "loc", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "loclang", ".", "lower", "(", ")", "==", "langcode", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "currloc", "=", "loc", "[", "loclang", "]", "<new_line>", "break", "<dedent>", "elif", "(", "loclang", ".", "lower", "(", ")", "==", "'default'", ")", ":", "<new_line>", "<indent>", "defloc", "=", "loc", "[", "loclang", "]", "<dedent>", "<dedent>", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "currloc", "=", "defloc", "<dedent>", "if", "(", "not", "currloc", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "SchemaValidationError", "(", "<new_line>", "'Unable to determine location'", ")", ")", "<new_line>", "return", "<dedent>", "location_file", "=", "self", ".", "_read_location_file", "(", "currloc", ",", "errlist", "=", "result", ")", "<new_line>", "if", "(", "not", "location_file", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "SchemaValidationError", "(", "'Location data is empty'", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "jsonsch", "=", "json", ".", "loads", "(", "location_file", ")", "<new_line>", "validictory", ".", "validate", "(", "tdict", ",", "jsonsch", ")", "<dedent>", "<dedent>", "<dedent>", "class", "HpPropertiesRegistry", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Models the HpPropertiesRegistry file'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "HpPropertiesRegistry", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "def", "validate_attribute_values", "(", "self", ",", "tdict", ")", ":", "<new_line>", "<indent>", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "for", "tkey", "in", "tdict", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "self", "[", "tkey", "]", "and", "hasattr", "(", "self", "[", "tkey", "]", ",", "'type'", ")", ")", ":", "<new_line>", "<indent>", "temp", "=", "self", ".", "validate_attribute", "(", "self", "[", "tkey", "]", ",", "tdict", "[", "tkey", "]", ",", "<new_line>", "tkey", ")", "<new_line>", "for", "err", "in", "temp", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "<new_line>", "<indent>", "if", "err", ".", "reg", ":", "<new_line>", "<indent>", "err", ".", "sel", "=", "tkey", "<dedent>", "<dedent>", "<dedent>", "result", ".", "extend", "(", "temp", ")", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "validate_att_val_bios", "(", "self", ",", "tdict", ")", ":", "<new_line>", "<indent>", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "for", "tkey", "in", "tdict", ":", "<new_line>", "<indent>", "for", "item", "in", "self", ".", "Attributes", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "(", "item", "[", "'Name'", "]", "==", "tkey", ")", "and", "hasattr", "(", "item", ",", "'Type'", ")", ")", ":", "<new_line>", "<indent>", "temp", "=", "self", ".", "validate_attribute", "(", "item", ",", "tdict", "[", "tkey", "]", ",", "tkey", ")", "<new_line>", "for", "err", "in", "temp", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "<new_line>", "<indent>", "if", "err", ".", "reg", ":", "<new_line>", "<indent>", "err", ".", "sel", "=", "tkey", "<dedent>", "<dedent>", "<dedent>", "result", ".", "extend", "(", "temp", ")", "<new_line>", "break", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "get_validator", "(", "self", ",", "attrname", ",", "newargs", "=", "None", ",", "oneof", "=", "None", ")", ":", "<new_line>", "<indent>", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param oneof: special string for \"oneof\" options within validation.\\n        :type oneof: list.\\n\\n        '", "<new_line>", "if", "oneof", ":", "<new_line>", "<indent>", "self", "=", "oneof", "<dedent>", "if", "newargs", ":", "<new_line>", "<indent>", "for", "arg", "in", "newargs", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "self", "=", "self", "[", "'properties'", "]", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "pass", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "arg", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "elif", "(", "not", "(", "arg", "==", "newargs", "[", "(", "-", "1", ")", "]", ")", ")", ":", "<new_line>", "<indent>", "self", "=", "self", "[", "arg", "]", "<dedent>", "<dedent>", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "attrname", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "validator", "=", "None", "<new_line>", "if", "EnumValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "EnumValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "StringValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "StringValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "ObjectValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "ObjectValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "IntegerValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "IntegerValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "BoolValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>"], 500]
[["d", ")", ":", "<new_line>", "<indent>", "super", "(", "HpPropertiesRegistry", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "def", "validate_attribute_values", "(", "self", ",", "tdict", ")", ":", "<new_line>", "<indent>", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "for", "tkey", "in", "tdict", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "self", "[", "tkey", "]", "and", "hasattr", "(", "self", "[", "tkey", "]", ",", "'type'", ")", ")", ":", "<new_line>", "<indent>", "temp", "=", "self", ".", "validate_attribute", "(", "self", "[", "tkey", "]", ",", "tdict", "[", "tkey", "]", ",", "<new_line>", "tkey", ")", "<new_line>", "for", "err", "in", "temp", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "<new_line>", "<indent>", "if", "err", ".", "reg", ":", "<new_line>", "<indent>", "err", ".", "sel", "=", "tkey", "<dedent>", "<dedent>", "<dedent>", "result", ".", "extend", "(", "temp", ")", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "validate_att_val_bios", "(", "self", ",", "tdict", ")", ":", "<new_line>", "<indent>", "'Look for tdict in attribute list and attempt to validate its value\\n\\n        :param tdict: the dictionary to test against.\\n        :type tdict: list.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "for", "tkey", "in", "tdict", ":", "<new_line>", "<indent>", "for", "item", "in", "self", ".", "Attributes", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "(", "item", "[", "'Name'", "]", "==", "tkey", ")", "and", "hasattr", "(", "item", ",", "'Type'", ")", ")", ":", "<new_line>", "<indent>", "temp", "=", "self", ".", "validate_attribute", "(", "item", ",", "tdict", "[", "tkey", "]", ",", "tkey", ")", "<new_line>", "for", "err", "in", "temp", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "err", ",", "RegistryValidationError", ")", ":", "<new_line>", "<indent>", "if", "err", ".", "reg", ":", "<new_line>", "<indent>", "err", ".", "sel", "=", "tkey", "<dedent>", "<dedent>", "<dedent>", "result", ".", "extend", "(", "temp", ")", "<new_line>", "break", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "get_validator", "(", "self", ",", "attrname", ",", "newargs", "=", "None", ",", "oneof", "=", "None", ")", ":", "<new_line>", "<indent>", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param newargs: list of multi level properties to be modified.\\n        :type newargs: list.\\n        :param oneof: special string for \"oneof\" options within validation.\\n        :type oneof: list.\\n\\n        '", "<new_line>", "if", "oneof", ":", "<new_line>", "<indent>", "self", "=", "oneof", "<dedent>", "if", "newargs", ":", "<new_line>", "<indent>", "for", "arg", "in", "newargs", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "self", "=", "self", "[", "'properties'", "]", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "pass", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "arg", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "elif", "(", "not", "(", "arg", "==", "newargs", "[", "(", "-", "1", ")", "]", ")", ")", ":", "<new_line>", "<indent>", "self", "=", "self", "[", "arg", "]", "<dedent>", "<dedent>", "<dedent>", "if", "(", "not", "hasattr", "(", "self", ",", "attrname", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "validator", "=", "None", "<new_line>", "if", "EnumValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "EnumValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "StringValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "StringValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "ObjectValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "ObjectValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "IntegerValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "IntegerValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "BoolValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "BoolValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "PasswordValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "PasswordValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "(", "'oneOf'", "in", "self", "[", "attrname", "]", ".", "keys", "(", ")", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "self", "[", "attrname", "]", "[", "'oneOf'", "]", ":", "<new_line>", "<indent>", "validator", "=", "self", ".", "get_validator", "(", "attrname", ",", "newargs", ",", "<new_line>", "HpPropertiesRegistry", "(", "{", "attrname", ":", "item", "}", ")", ")", "<new_line>", "if", "validator", ":", "<new_line>", "<indent>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "validator", "<dedent>", "def", "get_validator_bios", "(", "self", ",", "attrname", ")", ":", "<new_line>", "<indent>", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "for", "item", "in", "self", ".", "Attributes", ":", "<new_line>", "<indent>", "if", "(", "item", "[", "'Name'", "]", "==", "attrname", ")", ":", "<new_line>", "<indent>", "validator", "=", "None", "<new_line>", "if", "EnumValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "EnumValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "StringValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "StringValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "IntegerValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "IntegerValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "BoolValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "BoolValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "ObjectValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "ObjectValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "PasswordValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "PasswordValidator", ".", "parse", "(", "item", ")", "<dedent>", "return", "validator", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "validate_attribute", "(", "self", ",", "attrentry", ",", "attrval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Function to validate attribute against iLO schema\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param attrval: attribute value to be used for validation.\\n        :type attrval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "validator", "=", "None", "<new_line>", "if", "EnumValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "EnumValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "StringValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "StringValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "IntegerValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "IntegerValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "BoolValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "BoolValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "ObjectValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "ObjectValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "PasswordValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "PasswordValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "UnknownValidatorError", "(", "attrentry", ")", "<dedent>", "if", "validator", ":", "<new_line>", "<indent>", "result", ".", "extend", "(", "validator", ".", "validate", "(", "attrval", ",", "name", ")", ")", "<dedent>", "return", "result", "<dedent>", "<dedent>", "class", "BaseValidator", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Base validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "BaseValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "def", "validate", "(", "self", ")", ":", "<new_line>", "<indent>", "'Overridable function for validation '", "<new_line>", "raise", "RuntimeError", "(", "'You must override this method in your derived class'", ")", "<dedent>", "<dedent>", "class", "EnumValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Enum validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>"], 500]
[["<indent>", "validator", "=", "BoolValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "PasswordValidator", ".", "is_type", "(", "self", "[", "attrname", "]", ")", ":", "<new_line>", "<indent>", "validator", "=", "PasswordValidator", ".", "parse", "(", "self", "[", "attrname", "]", ")", "<dedent>", "elif", "(", "'oneOf'", "in", "self", "[", "attrname", "]", ".", "keys", "(", ")", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "self", "[", "attrname", "]", "[", "'oneOf'", "]", ":", "<new_line>", "<indent>", "validator", "=", "self", ".", "get_validator", "(", "attrname", ",", "newargs", ",", "<new_line>", "HpPropertiesRegistry", "(", "{", "attrname", ":", "item", "}", ")", ")", "<new_line>", "if", "validator", ":", "<new_line>", "<indent>", "break", "<dedent>", "<dedent>", "<dedent>", "return", "validator", "<dedent>", "def", "get_validator_bios", "(", "self", ",", "attrname", ")", ":", "<new_line>", "<indent>", "'Returns attribute validator type\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "for", "item", "in", "self", ".", "Attributes", ":", "<new_line>", "<indent>", "if", "(", "item", "[", "'Name'", "]", "==", "attrname", ")", ":", "<new_line>", "<indent>", "validator", "=", "None", "<new_line>", "if", "EnumValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "EnumValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "StringValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "StringValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "IntegerValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "IntegerValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "BoolValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "BoolValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "ObjectValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "ObjectValidator", ".", "parse", "(", "item", ")", "<dedent>", "elif", "PasswordValidator", ".", "is_type", "(", "item", ")", ":", "<new_line>", "<indent>", "validator", "=", "PasswordValidator", ".", "parse", "(", "item", ")", "<dedent>", "return", "validator", "<dedent>", "<dedent>", "return", "None", "<dedent>", "def", "validate_attribute", "(", "self", ",", "attrentry", ",", "attrval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Function to validate attribute against iLO schema\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n        :param attrval: attribute value to be used for validation.\\n        :type attrval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "validator", "=", "None", "<new_line>", "if", "EnumValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "EnumValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "StringValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "StringValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "IntegerValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "IntegerValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "BoolValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "BoolValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "ObjectValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "ObjectValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "elif", "PasswordValidator", ".", "is_type", "(", "attrentry", ")", ":", "<new_line>", "<indent>", "validator", "=", "PasswordValidator", ".", "parse", "(", "attrentry", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "UnknownValidatorError", "(", "attrentry", ")", "<dedent>", "if", "validator", ":", "<new_line>", "<indent>", "result", ".", "extend", "(", "validator", ".", "validate", "(", "attrval", ",", "name", ")", ")", "<dedent>", "return", "result", "<dedent>", "<dedent>", "class", "BaseValidator", "(", "RisObject", ")", ":", "<new_line>", "<indent>", "'Base validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "BaseValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "def", "validate", "(", "self", ")", ":", "<new_line>", "<indent>", "'Overridable function for validation '", "<new_line>", "raise", "RuntimeError", "(", "'You must override this method in your derived class'", ")", "<dedent>", "<dedent>", "class", "EnumValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Enum validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "EnumValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is enumeration\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "<new_line>", "'string'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "enum", ":", "<new_line>", "<indent>", "if", "(", "possibleval", ".", "lower", "(", ")", "==", "newval", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "Value", ":", "<new_line>", "<indent>", "if", "(", "possibleval", ".", "ValueName", ".", "lower", "(", ")", "==", "str", "(", "newval", ")", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "<dedent>", "<dedent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "<new_line>", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "<new_line>", "self", ")", ")", "<new_line>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":"], 500]
[["super", "(", "EnumValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is enumeration\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'string'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "(", "(", "'enum'", "in", "attrentry", ")", "and", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "<new_line>", "'string'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'enumeration'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "enum", ":", "<new_line>", "<indent>", "if", "(", "possibleval", ".", "lower", "(", ")", "==", "newval", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "Value", ":", "<new_line>", "<indent>", "if", "(", "possibleval", ".", "ValueName", ".", "lower", "(", ")", "==", "str", "(", "newval", ")", ".", "lower", "(", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "<dedent>", "<dedent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "<new_line>", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "<new_line>", "self", ")", ")", "<new_line>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "enum", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'    %s\\n'", "%", "possibleval", ")", ")", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "Value", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'    %(ValueName)s\\n'", "%", "possibleval", ")", ")", "<dedent>", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "class", "BoolValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Bool validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "BoolValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is boolean\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]"], 500]
[["<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "enum", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'    %s\\n'", "%", "possibleval", ")", ")", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "for", "possibleval", "in", "self", ".", "Value", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'    %(ValueName)s\\n'", "%", "possibleval", ")", ")", "<dedent>", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "class", "BoolValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Bool validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "BoolValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is boolean\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'boolean'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "(", "newval", "is", "False", ")", "or", "(", "newval", "is", "True", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "result", ".", "append", "(", "<new_line>", "RegistryValidationError", "(", "<new_line>", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "<new_line>", "self", ")", ")", "<new_line>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>"], 500]
[[",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'boolean'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'boolean'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "(", "newval", "is", "False", ")", "or", "(", "newval", "is", "True", ")", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "result", ".", "append", "(", "<new_line>", "RegistryValidationError", "(", "<new_line>", "(", "\"'%s' is not a valid setting for '%s'\"", "%", "(", "newval", ",", "name", ")", ")", ",", "regentry", "=", "<new_line>", "self", ")", ")", "<new_line>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "<new_line>", "out", ".", "write", "(", "'    True or False\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "class", "StringValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Constructor '", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "StringValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is string\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "'string'", "in", "value", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "'MinLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "(", "\"'%s' must be at least '%s' characters long\"", "%", "<new_line>"], 500]
[["<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "out", ".", "write", "(", "'\\nPOSSIBLE VALUES\\n'", ")", "<new_line>", "out", ".", "write", "(", "'    True or False\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "class", "StringValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Constructor '", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "StringValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is string\\n\\n        :param attrentry: attribute entry containing data to be validated.\\n        :type attrentry: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'string'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "'string'", "in", "value", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'string'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "'MinLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "(", "\"'%s' must be at least '%s' characters long\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'MaxLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "(", "\"'%s' must be less than '%s' characters long\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "self", "[", "'ValueExpression'", "]", ":", "<new_line>", "<indent>", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "<new_line>", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "<new_line>", "self", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>"], 500]
[["(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'MaxLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "(", "\"'%s' must be less than '%s' characters long\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "self", "[", "'ValueExpression'", "]", ":", "<new_line>", "<indent>", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "<new_line>", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "<new_line>", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "<new_line>", "self", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'MinLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nMIN LENGTH\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MinLength)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'MaxLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nMAX LENGTH\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MaxLength)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "<dedent>", "class", "IntegerValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Interger validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "IntegerValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is integer\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "(", "item", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "(", "item", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "value", ".", "lower", "(", ")", "==", "'interger'", ")", "or", "(", "value", ".", "lower", "(", ")", "==", "<new_line>", "'number'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "<new_line>", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate"], 500]
[["out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'MinLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nMIN LENGTH\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MinLength)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'MaxLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nMAX LENGTH\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MaxLength)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "<dedent>", "class", "IntegerValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Interger validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "IntegerValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is integer\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "(", "item", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "(", "item", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "value", ".", "lower", "(", ")", "==", "'interger'", ")", "or", "(", "value", ".", "lower", "(", ")", "==", "<new_line>", "'number'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", "or", "<new_line>", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", ".", "lower", "(", ")", "==", "'number'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'integer'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "intval", "=", "int", "(", "newval", ")", "<new_line>", "pat", "=", "re", ".", "compile", "(", "'0-9+'", ")", "<new_line>", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "intval", ")", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "<new_line>", "RegistryValidationError", "(", "<new_line>", "(", "\"'%(Name)s' must be an integer value'\"", "%", "self", ")", ",", "regentry", "=", "<new_line>", "self", ")", ")", "<new_line>", "return", "result", "<dedent>", "if", "(", "'LowerBound'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "intval", "<", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be greater than or equal to '%s'\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'UpperBound'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "intval", ">", "int", "(", "self", "[", "'UpperBound'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than or equal to '%s'\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "("], 500]
[["(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "intval", "=", "int", "(", "newval", ")", "<new_line>", "pat", "=", "re", ".", "compile", "(", "'0-9+'", ")", "<new_line>", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "intval", ")", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "<new_line>", "RegistryValidationError", "(", "<new_line>", "(", "\"'%(Name)s' must be an integer value'\"", "%", "self", ")", ",", "regentry", "=", "<new_line>", "self", ")", ")", "<new_line>", "return", "result", "<dedent>", "if", "(", "'LowerBound'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "intval", "<", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be greater than or equal to '%s'\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'UpperBound'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "intval", ">", "int", "(", "self", "[", "'UpperBound'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than or equal to '%s'\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'LowerBound'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "<dedent>", "class", "ObjectValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Object validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "ObjectValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is object\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'object'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "(", "key", ".", "lower", "(", ")", "==", "'anyof'", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "value", "[", "0", "]", "[", "'type'", "]", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "continue", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent"], 500]
[["(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "<dedent>", "class", "ObjectValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Object validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "ObjectValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is object\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'object'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "(", "key", ".", "lower", "(", ")", "==", "'anyof'", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "if", "(", "value", "[", "0", "]", "[", "'type'", "]", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "continue", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'object'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "<dedent>", "class", "PasswordValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Password validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "PasswordValidator", ","], 500]
[["=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "<dedent>", "class", "PasswordValidator", "(", "BaseValidator", ")", ":", "<new_line>", "<indent>", "'Password validator class'", "<new_line>", "def", "__init__", "(", "self", ",", "d", ")", ":", "<new_line>", "<indent>", "super", "(", "PasswordValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is password\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'password'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'password'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "newval", "is", "None", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "if", "(", "'MinLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be at least '%s' characters long\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'MaxLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than '%s' characters long\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "self", "[", "'ValueExpression'", "]", ":", "<new_line>", "<indent>", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "<new_line>", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "<new_line>", "self", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")"], 500]
[["super", "(", "PasswordValidator", ",", "self", ")", ".", "__init__", "(", "d", ")", "<dedent>", "@", "staticmethod", "def", "is_type", "(", "<new_line>", "attrentry", ")", ":", "<new_line>", "<indent>", "'Validate that the type is password\\n\\n        :param attrname: attribute name to be used for validation.\\n        :type attrname: str.\\n\\n        '", "<new_line>", "if", "(", "'type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "attrentry", "[", "'type'", "]", ",", "list", ")", ":", "<new_line>", "<indent>", "for", "item", "in", "attrentry", "[", "'type'", "]", ":", "<new_line>", "<indent>", "if", "(", "item", ".", "lower", "(", ")", "==", "'password'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", "==", "'array'", ")", ":", "<new_line>", "<indent>", "for", "(", "key", ",", "value", ")", "in", "attrentry", "[", "'items'", "]", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "(", "key", ".", "lower", "(", ")", "==", "'type'", ")", "and", "(", "value", ".", "lower", "(", ")", "==", "'password'", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "<dedent>", "elif", "(", "attrentry", "[", "'type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "elif", "(", "'Type'", "in", "attrentry", ")", ":", "<new_line>", "<indent>", "if", "(", "attrentry", "[", "'Type'", "]", ".", "lower", "(", ")", "==", "'password'", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "<dedent>", "return", "False", "<dedent>", "def", "validate", "(", "self", ",", "newval", ",", "name", ")", ":", "<new_line>", "<indent>", "'Validate against iLO schema\\n\\n        :param newval: new value to be used for validation.\\n        :type newval: str.\\n        :param name: clean name for outputting.\\n        :type name: str.\\n\\n        '", "<new_line>", "result", "=", "list", "(", ")", "<new_line>", "if", "(", "newval", "is", "None", ")", ":", "<new_line>", "<indent>", "return", "result", "<dedent>", "if", "(", "'MinLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", "<", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be at least '%s' characters long\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'MinLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'MaxLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "newval", ")", ">", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%s' must be less than '%s' characters long\"", "%", "<new_line>", "(", "self", ".", "Name", ",", "<new_line>", "int", "(", "self", "[", "'MaxLength'", "]", ")", ")", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "if", "(", "'ValueExpression'", "in", "self", ")", ":", "<new_line>", "<indent>", "if", "self", "[", "'ValueExpression'", "]", ":", "<new_line>", "<indent>", "pat", "=", "re", ".", "compile", "(", "self", "[", "'ValueExpression'", "]", ")", "<new_line>", "if", "(", "newval", "and", "(", "not", "pat", ".", "match", "(", "newval", ")", ")", ")", ":", "<new_line>", "<indent>", "result", ".", "append", "(", "RegistryValidationError", "(", "(", "\"'%(Name)s' must match the regular expression '%(ValueExpression)s'\"", "%", "<new_line>", "self", ")", ",", "regentry", "=", "self", ")", ")", "<dedent>", "<dedent>", "<dedent>", "return", "result", "<dedent>", "def", "print_help", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "<new_line>", "<indent>", "'Info command helper function for print outs\\n\\n        :param name: clean name for outputting.\\n        :type name: str.\\n        :param out: output type for verbosity.\\n        :type out: output type.\\n\\n        '", "<new_line>", "wrapper", "=", "textwrap", ".", "TextWrapper", "(", ")", "<new_line>", "wrapper", ".", "initial_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "wrapper", ".", "subsequent_indent", "=", "(", "' '", "*", "4", ")", "<new_line>", "out", ".", "write", "(", "'\\nNAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "name", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<new_line>", "if", "(", "'DisplayName'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDISPLAY NAME\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(DisplayName)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'description'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nDESCRIPTION\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(description)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'HelpText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nHELP TEXT\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(HelpText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'WarningText'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\n************************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\nWARNING\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(WarningText)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n\\n**********************************************\\n'", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "(", "'type'", "in", "self", ")", "and", "isinstance", "(", "self", "[", "'type'", "]", ",", "list", ")", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "for", "item", "in", "self", "[", "'type'", "]", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "(", "'%s\\n'", "%", "wrapper", ".", "fill", "(", "(", "'%s'", "%", "item", ")", ")", ")", ")", "<dedent>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'Type'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nTYPE\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(Type)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'MinLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nMIN LENGTH\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MinLength)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'MaxLength'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nMAX LENGTH\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(MaxLength)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "if", "(", "'ReadOnly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(ReadOnly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "elif", "(", "'readonly'", "in", "self", ")", ":", "<new_line>", "<indent>", "out", ".", "write", "(", "'\\nREAD-ONLY\\n'", ")", "<new_line>", "out", ".", "write", "(", "(", "'%s'", "%", "wrapper", ".", "fill", "(", "(", "'%(readonly)s'", "%", "self", ")", ")", ")", ")", "<new_line>", "out", ".", "write", "(", "'\\n'", ")", "<dedent>", "<dedent>", "<dedent>"], 504]
[["from", ".", "constants", "import", "MILLI_MICROS", ",", "SECOND_MICROS", ",", "MINUTE_MICROS", "<new_line>", "import", "calendar", "<new_line>", "from", "datetime", "import", "datetime", "<new_line>", "from", "dateutil", "import", "parser", "<new_line>", "from", "dateutil.tz", "import", "tzlocal", "<new_line>", "from", ".", "error", "import", "TimeConstructionError", "<new_line>", "from", ".", "sanedelta", "import", "SaneDelta", "<new_line>", "import", "pytz", "<new_line>", "MICROS_TRANSLATIONS", "=", "<new_line>", "(", "(", "(", "'m'", ",", "'mins'", ",", "'minutes'", ",", "'epoch_mins'", ",", "'epoch_minutes'", ")", ",", "MINUTE_MICROS", ")", ",", "<new_line>", "(", "(", "'s'", ",", "'secs'", ",", "'seconds'", ",", "'epoch_secs'", ",", "'epoch_seconds'", ")", ",", "SECOND_MICROS", ")", ",", "<new_line>", "(", "(", "'ms'", ",", "'millis'", ",", "'milliseconds'", ",", "'epoch_millis'", ",", "'epoch_milliseconds'", ")", ",", "MILLI_MICROS", ")", ",", "<new_line>", "(", "(", "'us'", ",", "'micros'", ",", "'microseconds'", ",", "'epoch_micros'", ",", "'epoch_microseconds'", ")", ",", "1", ")", ")", "<new_line>", "MICROS_TRANSLATION_HASH", "=", "dict", "(", "(", "(", "alt", ",", "v", ")", "for", "(", "k", ",", "v", ")", "in", "MICROS_TRANSLATIONS", "for", "alt", "in", "k", ")", ")", "<new_line>", "class", "SaneTime", "(", "object", ")", ":", "<new_line>", "<indent>", "'\\n    A time stored in epoch microseconds, and optionally decorated with a timezone.\\n    An object of this class represents a moment in time.\\n    A moment in time experience in America/New_York is equal to the same moment in time experienced in Europe/Dublin\\n    '", "<new_line>", "\"\\n    Why not store in millis or seconds?\\n    datetime stores things in micros, and since millis already crosses over the 32bit boundary, we\\n    might as well store everything we got in the 64 bit numbers.  This will force 32bit machines to\\n    go to long's, so maybe a little reduced performance there, but isn't everything on 64 bit now?\\n    This also avoids the unexpected scenario where two different datetimes would compare as equal\\n    when they were converted to sanetimes.  As to why-not-seconds, well that's just lame.  You can\\n    easily go to seconds or millis from sanetime by using the .s or .ms properties.\\n\\n    When you do arithmetic with sanetime you are operating on microseconds.  st + 1 creates a new\\n    sanetime that is 1 microsecond in the future from the st sanetime.\\n\\n    When you do comparisons, all comparisons are happening at the microsecond level.  You are\\n    comparing microseconds in time.\\n    \"", "<new_line>", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "'\\n        acceptable arg inputs:\\n          1) epoch micros integer (or int like)\\n          2) a datetime\\n            NOTE!! a naive datetime is assumed to be in UTC, unless you tell this\\n            method otherwise by also passing in a tz paramter.  A timezoned datetime is \\n            preserved with the timezone it has\\n          3) a string representation that the dateutil parser can deal with\\n          4) multiple args just as datetime would accept\\n\\n        acceptable keyworded inputs:\\n          1) us = an int/long in epoch micros\\n          2) ms = an int/long in epoch millis\\n          3) s = an int/long in epoch seconds\\n          4) m = an int/long in epoch minutes\\n          5) tz = a timezone (either a pytz timezone object, a recognizeable pytz timezone string, or a dateutil tz object)\\n        '", "<new_line>", "super", "(", "time", ",", "self", ")", ".", "__init__", "(", ")", "<new_line>", "uss", "=", "set", "(", ")", "<new_line>", "tzs", "=", "set", "(", ")", "<new_line>", "naive_dt", "=", "None", "<new_line>", "avoid_localize", "=", "False", "<new_line>", "for", "(", "k", ",", "v", ")", "in", "kwargs", ".", "iteritems", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "k", "in", "(", "'tz'", ",", "'timezone'", ")", ")", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "v", ")", ")", "<dedent>", "elif", "(", "k", "in", "MICROS_TRANSLATION_HASH", ")", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "(", "MICROS_TRANSLATION_HASH", "[", "k", "]", "*", "v", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "TimeConstructionError", "(", "(", "'Unexpected kwarg in SaneTime constructor! (%s = %s)'", "%", "(", "k", ",", "v", ")", ")", ")", "<dedent>", "<dedent>", "args", "=", "list", "(", "args", ")", "<new_line>", "if", "(", "(", "len", "(", "args", ")", ">", "2", ")", "and", "(", "len", "(", "args", ")", "<=", "8", ")", ")", ":", "<new_line>", "<indent>", "args", "=", "[", "datetime", "(", "*", "args", ")", "]", "<dedent>", "if", "(", "len", "(", "args", ")", "==", "2", ")", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "args", ".", "pop", "(", ")", ")", ")", "<dedent>", "if", "(", "len", "(", "args", ")", "==", "1", ")", ":", "<new_line>", "<indent>", "arg", "=", "args", ".", "pop", "(", ")", "<new_line>", "if", "hasattr", "(", "arg", ",", "'__int__'", ")", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "int", "(", "arg", ")", ")", "<new_line>", "if", "hasattr", "(", "arg", ",", "'tz'", ")", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "arg", ".", "tz", ")", "<dedent>", "<dedent>", "elif", "isinstance", "(", "arg", ",", "basestring", ")", ":", "<new_line>", "<indent>", "parts", "=", "arg", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "<new_line>", "if", "(", "(", "len", "(", "parts", ")", ">", "1", ")", "and", "parts", "[", "(", "-", "1", ")", "]", ".", "startswith", "(", "'+'", ")", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "parts", "[", "(", "-", "1", ")", "]", "[", "1", ":", "]", ")", ")", "<new_line>", "arg", "=", "' '", ".", "join", "(", "parts", "[", ":", "(", "-", "1", ")", "]", ")", "<dedent>", "except", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "utc", "=", "(", "arg", ".", "endswith", "(", "'Z'", ")", "or", "arg", ".", "endswith", "(", "'+00:00'", ")", ")", "<new_line>", "arg", "=", "parser", ".", "parse", "(", "arg", ")", "<new_line>", "if", "arg", ".", "tzinfo", ":", "<new_line>", "<indent>", "if", "utc", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "pytz", ".", "utc", ")", "<new_line>", "arg", "=", "arg", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "elif", "isinstance", "(", "arg", ".", "tzinfo", ",", "tzlocal", ")", ":", "<new_line>", "<indent>", "arg", "=", "arg", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "avoid_localize", "=", "True", "<new_line>", "arg", "=", "arg", ".", "astimezone", "(", "pytz", ".", "utc", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "<dedent>", "<dedent>", "if", "(", "type", "(", "arg", ")", "==", "datetime", ")", ":", "<new_line>", "<indent>", "naive_dt", "=", "arg", "<new_line>", "if", "naive_dt", ".", "tzinfo", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "str", "(", "naive_dt", ".", "tzinfo", ")", ")", ")", "<new_line>", "naive_dt", "=", "naive_dt", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "<dedent>", "<dedent>", "if", "(", "len", "(", "tzs", ")", ">", "1", ")", ":", "<new_line>", "<indent>", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different timezone!  I can't possibly resolve that!  (timezones implied = %s)\"", "%", "tzs", ")", ")", "<dedent>", "self", ".", "tz", "=", "(", "(", "len", "(", "tzs", ")", "and", "tzs", ".", "pop", "(", ")", ")", "or", "pytz", ".", "utc", ")", "<new_line>", "if", "naive_dt", ":", "<new_line>", "<indent>", "if", "avoid_localize", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "naive_dt", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "self", ".", "tz", ".", "localize", "(", "naive_dt", ")", ".", "astimezone", "(", "pytz", ".", "utc", ")", ")", ")", "<dedent>", "<dedent>", "if", "(", "len", "(", "uss", ")", "==", "0", ")", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "datetime", ".", "utcnow", "(", ")", ")", ")", "<dedent>", "if", "(", "len", "(", "uss", ")", ">", "1", ")", ":", "<new_line>", "<indent>", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different time!  I can't possibly resolve that!  (micro times implied = %s)\"", "%", "uss", ")", ")", "<dedent>", "self", ".", "us", "=", "uss", ".", "pop", "(", ")", "<new_line>", "if", "(", "len", "(", "args", ")", ">", "0", ")", ":", "<new_line>", "<indent>", "raise", "TimeConstructionError", "(", "'Unexpected constructor arguments'", ")", "<dedent>", "<dedent>", "@", "property", "def", "ms", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "MILLI_MICROS", ")", "<dedent>", "epoch_milliseconds", "=", "epoch_millis", "=", "milliseconds", "=", "millis", "=", "ms", "<new_line>", "@", "property", "def", "s", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "SECOND_MICROS", ")", "<dedent>", "epoch_seconds", "=", "epoch_secs", "=", "seconds", "=", "secs", "=", "s", "<new_line>", "@", "property", "def", "m", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "MINUTE_MICROS", ")", "<dedent>", "epoch_minutes", "=", "epoch_mins", "=", "minutes", "=", "mins", "=", "m", "<new_line>", "@", "property", "def", "micros", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "us", "<dedent>", "epoch_microseconds", "=", "epoch_micros", "=", "microseconds", "=", "micros", "<new_line>", "@", "property", "def", "tz_name", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "tz", ".", "zone", "<dedent>", "@", "property", "def", "tz_abbr", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "tz", ".", "_tzname", "<dedent>", "def", "set_tz"], 0]
[["<dedent>", "except", ":", "<new_line>", "<indent>", "pass", "<dedent>", "<dedent>", "utc", "=", "(", "arg", ".", "endswith", "(", "'Z'", ")", "or", "arg", ".", "endswith", "(", "'+00:00'", ")", ")", "<new_line>", "arg", "=", "parser", ".", "parse", "(", "arg", ")", "<new_line>", "if", "arg", ".", "tzinfo", ":", "<new_line>", "<indent>", "if", "utc", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "pytz", ".", "utc", ")", "<new_line>", "arg", "=", "arg", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "elif", "isinstance", "(", "arg", ".", "tzinfo", ",", "tzlocal", ")", ":", "<new_line>", "<indent>", "arg", "=", "arg", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "avoid_localize", "=", "True", "<new_line>", "arg", "=", "arg", ".", "astimezone", "(", "pytz", ".", "utc", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "<dedent>", "<dedent>", "if", "(", "type", "(", "arg", ")", "==", "datetime", ")", ":", "<new_line>", "<indent>", "naive_dt", "=", "arg", "<new_line>", "if", "naive_dt", ".", "tzinfo", ":", "<new_line>", "<indent>", "tzs", ".", "add", "(", "SaneTime", ".", "to_timezone", "(", "str", "(", "naive_dt", ".", "tzinfo", ")", ")", ")", "<new_line>", "naive_dt", "=", "naive_dt", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "<dedent>", "<dedent>", "if", "(", "len", "(", "tzs", ")", ">", "1", ")", ":", "<new_line>", "<indent>", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different timezone!  I can't possibly resolve that!  (timezones implied = %s)\"", "%", "tzs", ")", ")", "<dedent>", "self", ".", "tz", "=", "(", "(", "len", "(", "tzs", ")", "and", "tzs", ".", "pop", "(", ")", ")", "or", "pytz", ".", "utc", ")", "<new_line>", "if", "naive_dt", ":", "<new_line>", "<indent>", "if", "avoid_localize", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "naive_dt", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "self", ".", "tz", ".", "localize", "(", "naive_dt", ")", ".", "astimezone", "(", "pytz", ".", "utc", ")", ")", ")", "<dedent>", "<dedent>", "if", "(", "len", "(", "uss", ")", "==", "0", ")", ":", "<new_line>", "<indent>", "uss", ".", "add", "(", "SaneTime", ".", "utc_datetime_to_us", "(", "datetime", ".", "utcnow", "(", ")", ")", ")", "<dedent>", "if", "(", "len", "(", "uss", ")", ">", "1", ")", ":", "<new_line>", "<indent>", "raise", "TimeConstructionError", "(", "(", "\"constructor arguments seem to specify more than one different time!  I can't possibly resolve that!  (micro times implied = %s)\"", "%", "uss", ")", ")", "<dedent>", "self", ".", "us", "=", "uss", ".", "pop", "(", ")", "<new_line>", "if", "(", "len", "(", "args", ")", ">", "0", ")", ":", "<new_line>", "<indent>", "raise", "TimeConstructionError", "(", "'Unexpected constructor arguments'", ")", "<dedent>", "<dedent>", "@", "property", "def", "ms", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "MILLI_MICROS", ")", "<dedent>", "epoch_milliseconds", "=", "epoch_millis", "=", "milliseconds", "=", "millis", "=", "ms", "<new_line>", "@", "property", "def", "s", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "SECOND_MICROS", ")", "<dedent>", "epoch_seconds", "=", "epoch_secs", "=", "seconds", "=", "secs", "=", "s", "<new_line>", "@", "property", "def", "m", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "MINUTE_MICROS", ")", "<dedent>", "epoch_minutes", "=", "epoch_mins", "=", "minutes", "=", "mins", "=", "m", "<new_line>", "@", "property", "def", "micros", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "us", "<dedent>", "epoch_microseconds", "=", "epoch_micros", "=", "microseconds", "=", "micros", "<new_line>", "@", "property", "def", "tz_name", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "tz", ".", "zone", "<dedent>", "@", "property", "def", "tz_abbr", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "tz", ".", "_tzname", "<dedent>", "def", "set_tz", "(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "self", ".", "tz", "=", "self", ".", "__class__", ".", "to_timezone", "(", "tz", ")", "return", "self", "<dedent>", "def", "with_tz", "(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "tz", ")", "<dedent>", "@", "property", "def", "_tuple", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "<dedent>", "def", "strftime", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "datetime", ".", "strftime", "(", "*", "args", ",", "**", "kwargs", ")", "<dedent>", "def", "__cmp__", "(", "self", ",", "other", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "other", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "other", "=", "SaneTime", "(", "other", ")", "<dedent>", "return", "cmp", "(", "self", ".", "us", ",", "int", "(", "other", ")", ")", "<dedent>", "def", "__hash__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "us", ".", "__hash__", "(", ")", "<dedent>", "def", "__add__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "operand", "=", "SaneTime", "(", "operand", ")", "<dedent>", "return", "self", ".", "__class__", "(", "(", "self", ".", "us", "+", "int", "(", "operand", ")", ")", ",", "tz", "=", "self", ".", "tz", ")", "<dedent>", "def", "__sub__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "operand", "=", "SaneTime", "(", "operand", ")", "<dedent>", "if", "isinstance", "(", "operand", ",", "SaneTime", ")", ":", "<new_line>", "<indent>", "return", "SaneDelta", "(", "(", "self", ".", "us", "-", "int", "(", "operand", ")", ")", ")", "<dedent>", "return", "self", ".", "__add__", "(", "(", "-", "int", "(", "operand", ")", ")", ")", "<dedent>", "def", "__mul__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "*", "int", "(", "operand", ")", ")", "<dedent>", "def", "__div__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "int", "(", "operand", ")", ")", "<dedent>", "def", "__int__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "int", "(", "self", ".", "us", ")", "<dedent>", "def", "__long__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "long", "(", "self", ".", "us", ")", "<dedent>", "def", "__repr__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "'SaneTime(%s,%s)'", "%", "(", "self", ".", "us", ",", "repr", "(", "self", ".", "tz", ")", ")", ")", "<dedent>", "def", "__str__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "unicode", "(", "self", ")", ".", "encode", "(", "'utf-8'", ")", "<dedent>", "def", "__unicode__", "(", "self", ")", ":", "<new_line>", "<indent>", "dt", "=", "self", ".", "datetime", "<new_line>", "micros", "=", "(", "(", "'.%06d'", "%", "dt", ".", "microsecond", ")", "if", "dt", ".", "microsecond", "else", "''", ")", "<new_line>", "time", "=", "(", "(", "' %02d:%02d:%02d%s'", "%", "(", "dt", ".", "hour", ",", "dt", ".", "minute", ",", "dt", ".", "second", ",", "micros", ")", ")", "if", "(", "dt", ".", "microsecond", "or", "dt", ".", "second", "or", "dt", ".", "minute", "or", "dt", ".", "hour", ")", "else", "''", ")", "<new_line>", "return", "(", "'%04d-%02d-%02d%s +%s'", "%", "(", "dt", ".", "year", ",", "dt", ".", "month", ",", "dt", ".", "day", ",", "time", ",", "dt", ".", "tzinfo", ".", "zone", ")", ")"], 500]
[["(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "self", ".", "tz", "=", "self", ".", "__class__", ".", "to_timezone", "(", "tz", ")", "return", "self", "<dedent>", "def", "with_tz", "(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "tz", ")", "<dedent>", "@", "property", "def", "_tuple", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "<dedent>", "def", "strftime", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "datetime", ".", "strftime", "(", "*", "args", ",", "**", "kwargs", ")", "<dedent>", "def", "__cmp__", "(", "self", ",", "other", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "other", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "other", "=", "SaneTime", "(", "other", ")", "<dedent>", "return", "cmp", "(", "self", ".", "us", ",", "int", "(", "other", ")", ")", "<dedent>", "def", "__hash__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "us", ".", "__hash__", "(", ")", "<dedent>", "def", "__add__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "operand", "=", "SaneTime", "(", "operand", ")", "<dedent>", "return", "self", ".", "__class__", "(", "(", "self", ".", "us", "+", "int", "(", "operand", ")", ")", ",", "tz", "=", "self", ".", "tz", ")", "<dedent>", "def", "__sub__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "operand", "=", "SaneTime", "(", "operand", ")", "<dedent>", "if", "isinstance", "(", "operand", ",", "SaneTime", ")", ":", "<new_line>", "<indent>", "return", "SaneDelta", "(", "(", "self", ".", "us", "-", "int", "(", "operand", ")", ")", ")", "<dedent>", "return", "self", ".", "__add__", "(", "(", "-", "int", "(", "operand", ")", ")", ")", "<dedent>", "def", "__mul__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "*", "int", "(", "operand", ")", ")", "<dedent>", "def", "__div__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "int", "(", "operand", ")", ")", "<dedent>", "def", "__int__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "int", "(", "self", ".", "us", ")", "<dedent>", "def", "__long__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "long", "(", "self", ".", "us", ")", "<dedent>", "def", "__repr__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "'SaneTime(%s,%s)'", "%", "(", "self", ".", "us", ",", "repr", "(", "self", ".", "tz", ")", ")", ")", "<dedent>", "def", "__str__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "unicode", "(", "self", ")", ".", "encode", "(", "'utf-8'", ")", "<dedent>", "def", "__unicode__", "(", "self", ")", ":", "<new_line>", "<indent>", "dt", "=", "self", ".", "datetime", "<new_line>", "micros", "=", "(", "(", "'.%06d'", "%", "dt", ".", "microsecond", ")", "if", "dt", ".", "microsecond", "else", "''", ")", "<new_line>", "time", "=", "(", "(", "' %02d:%02d:%02d%s'", "%", "(", "dt", ".", "hour", ",", "dt", ".", "minute", ",", "dt", ".", "second", ",", "micros", ")", ")", "if", "(", "dt", ".", "microsecond", "or", "dt", ".", "second", "or", "dt", ".", "minute", "or", "dt", ".", "hour", ")", "else", "''", ")", "<new_line>", "return", "(", "'%04d-%02d-%02d%s +%s'", "%", "(", "dt", ".", "year", ",", "dt", ".", "month", ",", "dt", ".", "day", ",", "time", ",", "dt", ".", "tzinfo", ".", "zone", ")", ")", "<dedent>", "def", "clone", "(", "self", ")", ":", "<new_line>", "<indent>", "' cloning stuff '", "<new_line>", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "<dedent>", "@", "property", "def", "ny_str", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "' a ny string '", "<new_line>", "return", "self", ".", "ny_ndt", ".", "strftime", "(", "'%I:%M:%S%p %m/%d/%Y'", ")", "<dedent>", "@", "property", "def", "utc_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "SaneTime", ".", "us_to_utc_datetime", "(", "self", ".", "us", ")", "<dedent>", "utc_dt", "=", "utc_datetime", "<new_line>", "@", "property", "def", "utc_naive_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "utc_datetime", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "utc_ndt", "=", "utc_naive_datetime", "<new_line>", "def", "to_timezoned_datetime", "(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "utc_datetime", ".", "astimezone", "(", "SaneTime", ".", "to_timezone", "(", "tz", ")", ")", "<dedent>", "def", "to_timezoned_naive_datetime", "(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_datetime", "(", "tz", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "@", "property", "def", "datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_datetime", "(", "self", ".", "tz", ")", "<dedent>", "dt", "=", "datetime", "<new_line>", "@", "property", "def", "naive_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_naive_datetime", "(", "self", ".", "tz", ")", "<dedent>", "ndt", "=", "naive_datetime", "<new_line>", "@", "property", "def", "ny_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_datetime", "(", "'America/New_York'", ")", "<dedent>", "ny_dt", "=", "ny_datetime", "<new_line>", "@", "property", "def", "ny_naive_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_naive_datetime", "(", "'America/New_York'", ")", "<dedent>", "ny_ndt", "=", "ny_naive_datetime", "<new_line>", "@", "property", "def", "year", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "year", "<dedent>", "@", "property", "def", "month", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "month", "<dedent>", "@", "property", "def", "day", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "day", "<dedent>", "@", "property", "def", "hour", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "hour", "<dedent>", "@", "property", "def", "minute", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "minute", "<dedent>", "@", "property", "def", "second", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "second", "<dedent>", "@", "property", "def", "microsecond", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "microsecond", "<dedent>", "@", "classmethod", "def", "utc_datetime_to_us", "(", "<new_line>", "kls", ",", "dt", ")", ":", "<new_line>", "<indent>", "return", "(", "(", "calendar", ".", "timegm", "(", "dt", ".", "timetuple", "(", ")", ")", "*", "(", "1000", "**", "2", ")", ")", "+", "dt", ".", "microsecond", ")", "<dedent>", "@", "classmethod", "def", "us_to_utc_datetime", "(", "<new_line>", "kls", ",", "us", ")", ":", "<new_line>", "<indent>", "return", "pytz", ".", "utc", ".", "localize", "(", "datetime", ".", "utcfromtimestamp", "(", "(", "us", "/", "(", "10", "**", "6", ")", ")", ")", ")", ".", "replace", "(", "microsecond", "=", "(", "us", "%", "(", "10", "**", "6", ")", ")", ")", "<dedent>", "@", "classmethod", "def", "to_timezone", "(", "<new_line>", "kls", ",", "tz", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "isinstance", "(", "tz", ",", "basestring", ")", ")", ":", "<new_line>", "<indent>", "return", "tz", "<dedent>", "return", "pytz", ".", "timezone", "(", "tz", ")", "<dedent>", "<dedent>"], 500]
[[",", "**", "kwargs", ")", "<dedent>", "def", "__cmp__", "(", "self", ",", "other", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "other", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "other", "=", "SaneTime", "(", "other", ")", "<dedent>", "return", "cmp", "(", "self", ".", "us", ",", "int", "(", "other", ")", ")", "<dedent>", "def", "__hash__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "us", ".", "__hash__", "(", ")", "<dedent>", "def", "__add__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "operand", "=", "SaneTime", "(", "operand", ")", "<dedent>", "return", "self", ".", "__class__", "(", "(", "self", ".", "us", "+", "int", "(", "operand", ")", ")", ",", "tz", "=", "self", ".", "tz", ")", "<dedent>", "def", "__sub__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "hasattr", "(", "operand", ",", "'__int__'", ")", ")", ":", "<new_line>", "<indent>", "operand", "=", "SaneTime", "(", "operand", ")", "<dedent>", "if", "isinstance", "(", "operand", ",", "SaneTime", ")", ":", "<new_line>", "<indent>", "return", "SaneDelta", "(", "(", "self", ".", "us", "-", "int", "(", "operand", ")", ")", ")", "<dedent>", "return", "self", ".", "__add__", "(", "(", "-", "int", "(", "operand", ")", ")", ")", "<dedent>", "def", "__mul__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "*", "int", "(", "operand", ")", ")", "<dedent>", "def", "__div__", "(", "self", ",", "operand", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "us", "/", "int", "(", "operand", ")", ")", "<dedent>", "def", "__int__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "int", "(", "self", ".", "us", ")", "<dedent>", "def", "__long__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "long", "(", "self", ".", "us", ")", "<dedent>", "def", "__repr__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "'SaneTime(%s,%s)'", "%", "(", "self", ".", "us", ",", "repr", "(", "self", ".", "tz", ")", ")", ")", "<dedent>", "def", "__str__", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "unicode", "(", "self", ")", ".", "encode", "(", "'utf-8'", ")", "<dedent>", "def", "__unicode__", "(", "self", ")", ":", "<new_line>", "<indent>", "dt", "=", "self", ".", "datetime", "<new_line>", "micros", "=", "(", "(", "'.%06d'", "%", "dt", ".", "microsecond", ")", "if", "dt", ".", "microsecond", "else", "''", ")", "<new_line>", "time", "=", "(", "(", "' %02d:%02d:%02d%s'", "%", "(", "dt", ".", "hour", ",", "dt", ".", "minute", ",", "dt", ".", "second", ",", "micros", ")", ")", "if", "(", "dt", ".", "microsecond", "or", "dt", ".", "second", "or", "dt", ".", "minute", "or", "dt", ".", "hour", ")", "else", "''", ")", "<new_line>", "return", "(", "'%04d-%02d-%02d%s +%s'", "%", "(", "dt", ".", "year", ",", "dt", ".", "month", ",", "dt", ".", "day", ",", "time", ",", "dt", ".", "tzinfo", ".", "zone", ")", ")", "<dedent>", "def", "clone", "(", "self", ")", ":", "<new_line>", "<indent>", "' cloning stuff '", "<new_line>", "return", "self", ".", "__class__", "(", "self", ".", "us", ",", "self", ".", "tz", ")", "<dedent>", "@", "property", "def", "ny_str", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "' a ny string '", "<new_line>", "return", "self", ".", "ny_ndt", ".", "strftime", "(", "'%I:%M:%S%p %m/%d/%Y'", ")", "<dedent>", "@", "property", "def", "utc_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "SaneTime", ".", "us_to_utc_datetime", "(", "self", ".", "us", ")", "<dedent>", "utc_dt", "=", "utc_datetime", "<new_line>", "@", "property", "def", "utc_naive_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "utc_datetime", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "utc_ndt", "=", "utc_naive_datetime", "<new_line>", "def", "to_timezoned_datetime", "(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "utc_datetime", ".", "astimezone", "(", "SaneTime", ".", "to_timezone", "(", "tz", ")", ")", "<dedent>", "def", "to_timezoned_naive_datetime", "(", "self", ",", "tz", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_datetime", "(", "tz", ")", ".", "replace", "(", "tzinfo", "=", "None", ")", "<dedent>", "@", "property", "def", "datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_datetime", "(", "self", ".", "tz", ")", "<dedent>", "dt", "=", "datetime", "<new_line>", "@", "property", "def", "naive_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_naive_datetime", "(", "self", ".", "tz", ")", "<dedent>", "ndt", "=", "naive_datetime", "<new_line>", "@", "property", "def", "ny_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_datetime", "(", "'America/New_York'", ")", "<dedent>", "ny_dt", "=", "ny_datetime", "<new_line>", "@", "property", "def", "ny_naive_datetime", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "to_timezoned_naive_datetime", "(", "'America/New_York'", ")", "<dedent>", "ny_ndt", "=", "ny_naive_datetime", "<new_line>", "@", "property", "def", "year", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "year", "<dedent>", "@", "property", "def", "month", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "month", "<dedent>", "@", "property", "def", "day", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "day", "<dedent>", "@", "property", "def", "hour", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "hour", "<dedent>", "@", "property", "def", "minute", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "minute", "<dedent>", "@", "property", "def", "second", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "second", "<dedent>", "@", "property", "def", "microsecond", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "dt", ".", "microsecond", "<dedent>", "@", "classmethod", "def", "utc_datetime_to_us", "(", "<new_line>", "kls", ",", "dt", ")", ":", "<new_line>", "<indent>", "return", "(", "(", "calendar", ".", "timegm", "(", "dt", ".", "timetuple", "(", ")", ")", "*", "(", "1000", "**", "2", ")", ")", "+", "dt", ".", "microsecond", ")", "<dedent>", "@", "classmethod", "def", "us_to_utc_datetime", "(", "<new_line>", "kls", ",", "us", ")", ":", "<new_line>", "<indent>", "return", "pytz", ".", "utc", ".", "localize", "(", "datetime", ".", "utcfromtimestamp", "(", "(", "us", "/", "(", "10", "**", "6", ")", ")", ")", ")", ".", "replace", "(", "microsecond", "=", "(", "us", "%", "(", "10", "**", "6", ")", ")", ")", "<dedent>", "@", "classmethod", "def", "to_timezone", "(", "<new_line>", "kls", ",", "tz", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "isinstance", "(", "tz", ",", "basestring", ")", ")", ":", "<new_line>", "<indent>", "return", "tz", "<dedent>", "return", "pytz", ".", "timezone", "(", "tz", ")", "<dedent>", "<dedent>", "def", "ntime", "(", "*", "args", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "if", "args", ":", "<new_line>", "<indent>", "if", "(", "args", "[", "0", "]", "is", "None", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "elif", "kwargs", ":", "<new_line>", "<indent>", "if", "(", "None", "in", "[", "v", "for", "(", "k", ",", "v", ")", "in", "kwargs", ".", "iteritems", "(", ")", "if", "(", "k", "!=", "'tz'", ")", "]", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "<dedent>", "return", "SaneTime", "(", "*", "args", ",", "**", "kwargs", ")", "<dedent>", "time", "=", "sanetime", "=", "SaneTime", "<new_line>", "nsanetime", "=", "ntime"], 910]
[["'\\nFrom ericflo (https://gist.github.com/629508)\\n\\njQuery templates use constructs like:\\n\\n    {{if condition}} print something{{/if}}\\n\\nThis, of course, completely screws up Django templates,\\nbecause Django thinks {{ and }} mean something.\\n\\nWrap {% verbatim %} and {% endverbatim %} around those\\nblocks of jQuery templates and this will try its best\\nto output the contents with no changes.\\n'", "<new_line>", "from", "django", "import", "template", "<new_line>", "register", "=", "template", ".", "Library", "(", ")", "<new_line>", "class", "VerbatimNode", "(", "template", ".", "Node", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "text", ")", ":", "<new_line>", "<indent>", "self", ".", "text", "=", "text", "<dedent>", "def", "render", "(", "self", ",", "context", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "text", "<dedent>", "<dedent>", "@", "register", ".", "tag", "def", "verbatim", "(", "<new_line>", "parser", ",", "token", ")", ":", "<new_line>", "<indent>", "text", "=", "[", "]", "<new_line>", "while", "1", ":", "<new_line>", "<indent>", "token", "=", "parser", ".", "tokens", ".", "pop", "(", "0", ")", "<new_line>", "if", "(", "token", ".", "contents", "==", "'endverbatim'", ")", ":", "<new_line>", "<indent>", "break", "<dedent>", "if", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_VAR", ")", ":", "<new_line>", "<indent>", "text", ".", "append", "(", "'{{'", ")", "<dedent>", "elif", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_BLOCK", ")", ":", "<new_line>", "<indent>", "text", ".", "append", "(", "'{%'", ")", "<dedent>", "text", ".", "append", "(", "token", ".", "contents", ")", "<new_line>", "if", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_VAR", ")", ":", "<new_line>", "<indent>", "text", ".", "append", "(", "'}}'", ")", "<dedent>", "elif", "(", "token", ".", "token_type", "==", "template", ".", "TOKEN_BLOCK", ")", ":", "<new_line>", "<indent>", "text", ".", "append", "(", "'%}'", ")", "<dedent>", "<dedent>", "return", "VerbatimNode", "(", "''", ".", "join", "(", "text", ")", ")", "<dedent>"], 0]
[["from", "django.shortcuts", "import", "render_to_response", "<new_line>", "from", "django.template", "import", "RequestContext", "<new_line>", "import", "pdb"], 0]
[["from", "werkzeug.utils", "import", "cached_property", "<new_line>", "from", "base", "import", "db", ",", "Base", "<new_line>", "from", "cluster", "import", "Cluster", "<new_line>", "class", "Proxy", "(", "Base", ")", ":", "<new_line>", "<indent>", "__tablename__", "=", "'proxy'", "<new_line>", "host", "=", "db", ".", "Column", "(", "db", ".", "String", "(", "255", ")", ",", "nullable", "=", "False", ")", "<new_line>", "port", "=", "db", ".", "Column", "(", "db", ".", "Integer", ",", "nullable", "=", "False", ")", "<new_line>", "eru_container_id", "=", "db", ".", "Column", "(", "db", ".", "String", "(", "64", ")", ",", "index", "=", "True", ")", "<new_line>", "cluster_id", "=", "db", ".", "Column", "(", "db", ".", "ForeignKey", "(", "Cluster", ".", "id", ")", ",", "index", "=", "True", ")", "<new_line>", "suppress_alert", "=", "db", ".", "Column", "(", "db", ".", "Integer", ",", "nullable", "=", "False", ",", "default", "=", "1", ")", "<new_line>", "__table_args__", "=", "(", "db", ".", "Index", "(", "'address'", ",", "'host'", ",", "'port'", ",", "unique", "=", "True", ")", ",", ")", "<new_line>", "@", "cached_property", "def", "eru_deployed", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "(", "self", ".", "eru_container_id", "is not", "None", ")", "<dedent>", "@", "cached_property", "def", "eru_info", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "import", "eru_utils", "<new_line>", "if", "(", "(", "eru_utils", ".", "eru_client", "is", "None", ")", "or", "(", "not", "self", ".", "eru_deployed", ")", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "return", "eru_utils", ".", "eru_client", ".", "get_container", "(", "self", ".", "eru_container_id", ")", "<dedent>", "@", "cached_property", "def", "cluster", "(", "<new_line>", "self", ")", ":", "<new_line>", "<indent>", "return", "Cluster", ".", "query", ".", "get", "(", "self", ".", "cluster_id", ")", "<dedent>", "<dedent>", "def", "get_by_host_port", "(", "host", ",", "port", ")", ":", "<new_line>", "<indent>", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "<new_line>", "(", "Proxy", ".", "host", "==", "host", ")", ",", "(", "Proxy", ".", "port", "==", "port", ")", ")", ".", "first", "(", ")", "<dedent>", "def", "del_by_host_port", "(", "host", ",", "port", ")", ":", "<new_line>", "<indent>", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "<new_line>", "(", "Proxy", ".", "host", "==", "host", ")", ",", "(", "Proxy", ".", "port", "==", "port", ")", ")", ".", "delete", "(", ")", "<dedent>", "def", "get_or_create", "(", "host", ",", "port", ",", "cluster_id", "=", "None", ")", ":", "<new_line>", "<indent>", "p", "=", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "<new_line>", "(", "Proxy", ".", "host", "==", "host", ")", ",", "(", "Proxy", ".", "port", "==", "port", ")", ")", ".", "first", "(", ")", "<new_line>", "if", "(", "p", "is", "None", ")", ":", "<new_line>", "<indent>", "p", "=", "Proxy", "(", "host", "=", "host", ",", "port", "=", "port", ",", "cluster_id", "=", "cluster_id", ")", "<new_line>", "db", ".", "session", ".", "add", "(", "p", ")", "<new_line>", "db", ".", "session", ".", "flush", "(", ")", "<dedent>", "return", "p", "<dedent>", "def", "create_eru_instance", "(", "host", ",", "port", ",", "cluster_id", ",", "eru_container_id", ")", ":", "<new_line>", "<indent>", "node", "=", "Proxy", "(", "host", "=", "host", ",", "port", "=", "port", ",", "eru_container_id", "=", "eru_container_id", ",", "cluster_id", "=", "<new_line>", "cluster_id", ")", "<new_line>", "db", ".", "session", ".", "add", "(", "node", ")", "<new_line>", "db", ".", "session", ".", "flush", "(", ")", "<new_line>", "return", "node", "<dedent>", "def", "delete_eru_instance", "(", "eru_container_id", ")", ":", "<new_line>", "<indent>", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "<new_line>", "(", "Proxy", ".", "eru_container_id", "==", "eru_container_id", ")", ")", ".", "delete", "(", ")", "<dedent>", "def", "get_eru_by_container_id", "(", "eru_container_id", ")", ":", "<new_line>", "<indent>", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "<new_line>", "(", "Proxy", ".", "eru_container_id", "==", "eru_container_id", ")", ")", ".", "first", "(", ")", "<dedent>", "def", "list_all", "(", ")", ":", "<new_line>", "<indent>", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "all", "(", ")", "<dedent>", "def", "list_eru_proxies", "(", "offset", ",", "limit", ")", ":", "<new_line>", "<indent>", "return", "db", ".", "session", ".", "query", "(", "Proxy", ")", ".", "filter", "(", "<new_line>", "(", "Proxy", ".", "eru_container_id", "!=", "None", ")", ")", ".", "order_by", "(", "<new_line>", "Proxy", ".", "id", ".", "desc", "(", ")", ")", ".", "offset", "(", "offset", ")", ".", "limit", "(", "limit", ")", ".", "all", "(", ")", "<dedent>", "def", "list_ip", "(", ")", ":", "<new_line>", "<indent>", "return", "db", ".", "session", ".", "query", "(", "Proxy", ".", "host", ",", "Proxy", ".", "port", ")", ".", "all", "(", ")", "<dedent>"], 0]
[["' This module handles everything related to the tracker behaviour. '", "<new_line>", "import", "json", "<new_line>", "import", "time", "<new_line>", "import", "urllib2", "<new_line>", "import", "logging", "<new_line>", "from", "view_controls.view", "import", "DrawingTool", ",", "Event", "<new_line>", "from", "game_objects.item", "import", "Item", "<new_line>", "from", "game_objects.state", "import", "TrackerState", ",", "TrackerStateEncoder", "<new_line>", "from", "log_parser", "import", "LogParser", "<new_line>", "from", "options", "import", "Options", "<new_line>", "class", "IsaacTracker", "(", "object", ")", ":", "<new_line>", "<indent>", "' The main class of the program '", "<new_line>", "def", "__init__", "(", "self", ",", "logging_level", "=", "logging", ".", "INFO", ",", "read_timer", "=", "1", ")", ":", "<new_line>", "<indent>", "self", ".", "read_timer", "=", "read_timer", "<new_line>", "self", ".", "file_prefix", "=", "'../'", "<new_line>", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "'tracker'", ")", "<new_line>", "self", ".", "log", ".", "addHandler", "(", "logging", ".", "FileHandler", "(", "(", "self", ".", "file_prefix", "+", "'tracker_log.txt'", ")", ",", "mode", "=", "'w'", ")", ")", "<new_line>", "self", ".", "log", ".", "setLevel", "(", "logging_level", ")", "<new_line>", "with", "open", "(", "(", "self", ".", "file_prefix", "+", "'items.json'", ")", ",", "'r'", ")", "as", "items_file", ":", "<new_line>", "<indent>", "Item", ".", "items_info", "=", "json", ".", "load", "(", "items_file", ")", "<dedent>", "with", "open", "(", "(", "self", ".", "file_prefix", "+", "'version.txt'", ")", ",", "'r'", ")", "as", "f", ":", "<new_line>", "<indent>", "self", ".", "tracker_version", "=", "f", ".", "read", "(", ")", "<dedent>", "Options", "(", ")", ".", "load_options", "(", "(", "self", ".", "file_prefix", "+", "'options.json'", ")", ")", "<dedent>", "def", "__del__", "(", "self", ")", ":", "<new_line>", "<indent>", "Options", "(", ")", ".", "save_options", "(", "(", "self", ".", "file_prefix", "+", "'options.json'", ")", ")", "<dedent>", "def", "check_for_update", "(", "self", ")", ":", "<new_line>", "<indent>", "' Returns text to put in the title bar '", "<new_line>", "try", ":", "<new_line>", "<indent>", "latest", "=", "'https://api.github.com/repos/Hyphen-ated/RebirthItemTracker/releases/latest'", "<new_line>", "github_info_json", "=", "urllib2", ".", "urlopen", "(", "latest", ")", ".", "read", "(", ")", "<new_line>", "info", "=", "json", ".", "loads", "(", "github_info_json", ")", "<new_line>", "latest_version", "=", "info", "[", "'name'", "]", "<new_line>", "title_text", "=", "(", "' v'", "+", "self", ".", "tracker_version", ")", "<new_line>", "if", "(", "latest_version", "!=", "self", ".", "tracker_version", ")", ":", "<new_line>", "<indent>", "title_text", "+", "=", "' (new version available)'", "<dedent>", "return", "title_text", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "self", ".", "log", ".", "debug", "(", "(", "'Failed to find update info: '", "+", "e", ".", "message", ")", ")", "<dedent>", "return", "''", "<dedent>", "def", "run", "(", "self", ")", ":", "<new_line>", "<indent>", "' The main routine which controls everything '", "<new_line>", "update_notifier", "=", "self", ".", "check_for_update", "(", ")", "<new_line>", "framecount", "=", "0", "<new_line>", "drawing_tool", "=", "DrawingTool", "(", "self", ".", "file_prefix", ")", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ")", "<new_line>", "parser", "=", "LogParser", "(", "self", ".", "file_prefix", ",", "self", ".", "tracker_version", ")", "<new_line>", "opt", "=", "Options", "(", ")", "<new_line>", "log", "=", "logging", ".", "getLogger", "(", "'tracker'", ")", "<new_line>", "event_result", "=", "None", "<new_line>", "state", "=", "None", "<new_line>", "read_from_server", "=", "opt", ".", "read_from_server", "<new_line>", "write_to_server", "=", "opt", ".", "write_to_server", "<new_line>", "state_version", "=", "(", "-", "1", ")", "<new_line>", "twitch_username", "=", "None", "<new_line>", "new_states_queue", "=", "[", "]", "<new_line>", "screen_error_message", "=", "None", "<new_line>", "while", "(", "event_result", "!=", "Event", ".", "DONE", ")", ":", "<new_line>", "<indent>", "event_result", "=", "drawing_tool", ".", "handle_events", "(", ")", "<new_line>", "if", "(", "(", "opt", ".", "read_from_server", "!=", "read_from_server", ")", "or", "<new_line>", "(", "opt", ".", "twitch_name", "!=", "twitch_username", ")", ")", ":", "<new_line>", "<indent>", "twitch_username", "=", "opt", ".", "twitch_name", "<new_line>", "read_from_server", "=", "opt", ".", "read_from_server", "<new_line>", "new_states_queue", "=", "[", "]", "<new_line>", "if", "read_from_server", ":", "<new_line>", "<indent>", "state_version", "=", "(", "-", "1", ")", "<new_line>", "state", "=", "None", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ")", "<dedent>", "<dedent>", "if", "(", "opt", ".", "write_to_server", "and", "(", "opt", ".", "write_to_server", "!=", "write_to_server", ")", ")", ":", "<new_line>", "<indent>", "write_to_server", "=", "True", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "uploading", "=", "True", ")", "<dedent>", "if", "(", "not", "opt", ".", "write_to_server", ")", ":", "<new_line>", "<indent>", "write_to_server", "=", "False", "<dedent>", "if", "opt", ".", "read_from_server", ":", "<new_line>", "<indent>", "update_timer", "=", "2", "<dedent>", "else", ":", "<new_line>", "<indent>", "update_timer", "=", "self", ".", "read_timer", "<dedent>", "if", "(", "event_result", "==", "Event", ".", "OPTIONS_UPDATE", ")", ":", "<new_line>", "<indent>", "framecount", "=", "0", "<new_line>", "screen_error_message", "=", "None", "<new_line>", "if", "(", "state", "is not", "None", ")", ":", "<new_line>", "<indent>", "state", ".", "modified", "=", "True", "<dedent>", "<dedent>", "if", "(", "(", "framecount", "%", "int", "(", "(", "Options", "(", ")", ".", "framerate_limit", "*", "update_timer", ")", ")", ")", "==", "0", ")", ":", "<new_line>", "<indent>", "if", "opt", ".", "read_from_server", ":", "<new_line>", "<indent>", "base_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/user/'", ")", "+", "opt", ".", "twitch_name", ")", "<new_line>", "json_dict", "=", "None", "<new_line>", "try", ":", "<new_line>", "<indent>", "json_version", "=", "urllib2", ".", "urlopen", "(", "(", "base_url", "+", "'/version'", ")", ")", ".", "read", "(", ")", "<new_line>", "if", "(", "int", "(", "json_version", ")", ">", "state_version", ")", ":", "<new_line>", "<indent>", "json_state", "=", "urllib2", ".", "urlopen", "(", "base_url", ")", ".", "read", "(", ")", "<new_line>", "json_dict", "=", "json", ".", "loads", "(", "json_state", ")", "<new_line>", "new_state", "=", "TrackerState", ".", "from_json", "(", "json_dict", ")", "<new_line>", "if", "(", "new_state", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "<dedent>", "state_version", "=", "int", "(", "json_version", ")", "<new_line>", "new_states_queue", ".", "append", "(", "(", "state_version", ",", "new_state", ")", ")", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ",", "read_delay", "=", "opt", ".", "read_delay", ")", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "state", "=", "None", "<new_line>", "log", ".", "error", "(", "\"Couldn't load state from server\"", ")", "<new_line>", "import", "traceback", "<new_line>", "log", ".", "error", "(", "traceback", ".", "format_exc", "(", ")", ")", "<new_line>", "if", "(", "json_dict", "is not", "None", ")", ":", "<new_line>", "<indent>", "their_version", "=", "''", "<new_line>", "if", "(", "'tracker_version'", "in", "json_dict", ")", ":", "<new_line>", "<indent>", "their_version", "=", "json_dict", "[", "'tracker_version'", "]", "<dedent>", "else", ":", "<new_line>", "<indent>", "their_version", "=", "'0.10-beta1'", "<dedent>", "if", "(", "their_version", "!=", "self", ".", "tracker_version", ")", ":", "<new_line>", "<indent>", "screen_error_message", "=", "(", "(", "(", "'They are using tracker version '", "+", "their_version", ")", "+", "' but you have '", ")", "+", "self", ".", "tracker_version", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "force_draw", "=", "(", "state", "and", "state", ".", "modified", ")", "<new_line>", "state", "=", "parser", ".", "parse", "(", ")", "<new_line>", "if", "force_draw", ":", "<new_line>", "<indent>", "state", ".", "modified", "=", "True", "<dedent>", "if", "(", "write_to_server", "and", "(", "not", "opt", ".", "trackerserver_authkey", ")", ")", ":", "<new_line>", "<indent>", "screen_error_message", "=", "'Your authkey is blank. Get a new authkey in the options menu and paste it into the authkey text field.'", "<dedent>", "if", "(", "(", "state", "is not", "None", ")", "and", "write_to_server", "and", "state", ".", "modified", "and", "(", "screen_error_message", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "opener", "=", "urllib2", ".", "build_opener", "(", "urllib2", ".", "HTTPHandler", ")", "<new_line>", "put_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/update/'", ")", "+"], 0]
[["=", "None", "<new_line>", "read_from_server", "=", "opt", ".", "read_from_server", "<new_line>", "write_to_server", "=", "opt", ".", "write_to_server", "<new_line>", "state_version", "=", "(", "-", "1", ")", "<new_line>", "twitch_username", "=", "None", "<new_line>", "new_states_queue", "=", "[", "]", "<new_line>", "screen_error_message", "=", "None", "<new_line>", "while", "(", "event_result", "!=", "Event", ".", "DONE", ")", ":", "<new_line>", "<indent>", "event_result", "=", "drawing_tool", ".", "handle_events", "(", ")", "<new_line>", "if", "(", "(", "opt", ".", "read_from_server", "!=", "read_from_server", ")", "or", "<new_line>", "(", "opt", ".", "twitch_name", "!=", "twitch_username", ")", ")", ":", "<new_line>", "<indent>", "twitch_username", "=", "opt", ".", "twitch_name", "<new_line>", "read_from_server", "=", "opt", ".", "read_from_server", "<new_line>", "new_states_queue", "=", "[", "]", "<new_line>", "if", "read_from_server", ":", "<new_line>", "<indent>", "state_version", "=", "(", "-", "1", ")", "<new_line>", "state", "=", "None", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ")", "<dedent>", "<dedent>", "if", "(", "opt", ".", "write_to_server", "and", "(", "opt", ".", "write_to_server", "!=", "write_to_server", ")", ")", ":", "<new_line>", "<indent>", "write_to_server", "=", "True", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "uploading", "=", "True", ")", "<dedent>", "if", "(", "not", "opt", ".", "write_to_server", ")", ":", "<new_line>", "<indent>", "write_to_server", "=", "False", "<dedent>", "if", "opt", ".", "read_from_server", ":", "<new_line>", "<indent>", "update_timer", "=", "2", "<dedent>", "else", ":", "<new_line>", "<indent>", "update_timer", "=", "self", ".", "read_timer", "<dedent>", "if", "(", "event_result", "==", "Event", ".", "OPTIONS_UPDATE", ")", ":", "<new_line>", "<indent>", "framecount", "=", "0", "<new_line>", "screen_error_message", "=", "None", "<new_line>", "if", "(", "state", "is not", "None", ")", ":", "<new_line>", "<indent>", "state", ".", "modified", "=", "True", "<dedent>", "<dedent>", "if", "(", "(", "framecount", "%", "int", "(", "(", "Options", "(", ")", ".", "framerate_limit", "*", "update_timer", ")", ")", ")", "==", "0", ")", ":", "<new_line>", "<indent>", "if", "opt", ".", "read_from_server", ":", "<new_line>", "<indent>", "base_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/user/'", ")", "+", "opt", ".", "twitch_name", ")", "<new_line>", "json_dict", "=", "None", "<new_line>", "try", ":", "<new_line>", "<indent>", "json_version", "=", "urllib2", ".", "urlopen", "(", "(", "base_url", "+", "'/version'", ")", ")", ".", "read", "(", ")", "<new_line>", "if", "(", "int", "(", "json_version", ")", ">", "state_version", ")", ":", "<new_line>", "<indent>", "json_state", "=", "urllib2", ".", "urlopen", "(", "base_url", ")", ".", "read", "(", ")", "<new_line>", "json_dict", "=", "json", ".", "loads", "(", "json_state", ")", "<new_line>", "new_state", "=", "TrackerState", ".", "from_json", "(", "json_dict", ")", "<new_line>", "if", "(", "new_state", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "Exception", "<dedent>", "state_version", "=", "int", "(", "json_version", ")", "<new_line>", "new_states_queue", ".", "append", "(", "(", "state_version", ",", "new_state", ")", ")", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ",", "read_delay", "=", "opt", ".", "read_delay", ")", "<dedent>", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "state", "=", "None", "<new_line>", "log", ".", "error", "(", "\"Couldn't load state from server\"", ")", "<new_line>", "import", "traceback", "<new_line>", "log", ".", "error", "(", "traceback", ".", "format_exc", "(", ")", ")", "<new_line>", "if", "(", "json_dict", "is not", "None", ")", ":", "<new_line>", "<indent>", "their_version", "=", "''", "<new_line>", "if", "(", "'tracker_version'", "in", "json_dict", ")", ":", "<new_line>", "<indent>", "their_version", "=", "json_dict", "[", "'tracker_version'", "]", "<dedent>", "else", ":", "<new_line>", "<indent>", "their_version", "=", "'0.10-beta1'", "<dedent>", "if", "(", "their_version", "!=", "self", ".", "tracker_version", ")", ":", "<new_line>", "<indent>", "screen_error_message", "=", "(", "(", "(", "'They are using tracker version '", "+", "their_version", ")", "+", "' but you have '", ")", "+", "self", ".", "tracker_version", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "else", ":", "<new_line>", "<indent>", "force_draw", "=", "(", "state", "and", "state", ".", "modified", ")", "<new_line>", "state", "=", "parser", ".", "parse", "(", ")", "<new_line>", "if", "force_draw", ":", "<new_line>", "<indent>", "state", ".", "modified", "=", "True", "<dedent>", "if", "(", "write_to_server", "and", "(", "not", "opt", ".", "trackerserver_authkey", ")", ")", ":", "<new_line>", "<indent>", "screen_error_message", "=", "'Your authkey is blank. Get a new authkey in the options menu and paste it into the authkey text field.'", "<dedent>", "if", "(", "(", "state", "is not", "None", ")", "and", "write_to_server", "and", "state", ".", "modified", "and", "(", "screen_error_message", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "opener", "=", "urllib2", ".", "build_opener", "(", "urllib2", ".", "HTTPHandler", ")", "<new_line>", "put_url", "=", "(", "(", "opt", ".", "trackerserver_url", "+", "'/tracker/api/update/'", ")", "+", "opt", ".", "trackerserver_authkey", ")", "<new_line>", "json_string", "=", "json", ".", "dumps", "(", "state", ",", "cls", "=", "TrackerStateEncoder", ",", "sort_keys", "=", "True", ")", "<new_line>", "request", "=", "urllib2", ".", "Request", "(", "put_url", ",", "data", "=", "<new_line>", "json_string", ")", "<new_line>", "request", ".", "add_header", "(", "'Content-Type'", ",", "'application/json'", ")", "<new_line>", "request", ".", "get_method", "=", "(", "lambda", ":", "'PUT'", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "result", "=", "opener", ".", "open", "(", "request", ")", "<new_line>", "result_json", "=", "json", ".", "loads", "(", "result", ".", "read", "(", ")", ")", "<new_line>", "updated_user", "=", "result_json", "[", "'updated_user'", "]", "<new_line>", "if", "(", "updated_user", "is", "None", ")", ":", "<new_line>", "<indent>", "screen_error_message", "=", "\"The server didn't recognize you. Try getting a new authkey in the options menu.\"", "<dedent>", "else", ":", "<new_line>", "<indent>", "screen_error_message", "=", "None", "<dedent>", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "import", "traceback", "<new_line>", "errmsg", "=", "traceback", ".", "format_exc", "(", ")", "<new_line>", "log", ".", "error", "(", "\"ERROR: Couldn't send item info to server\"", ")", "<new_line>", "log", ".", "error", "(", "errmsg", ")", "<new_line>", "screen_error_message", "=", "\"ERROR: Couldn't send item info to server, check tracker_log.txt\"", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "if", "(", "len", "(", "new_states_queue", ")", ">", "0", ")", ":", "<new_line>", "<indent>", "(", "state_timestamp", ",", "new_state", ")", "=", "new_states_queue", "[", "0", "]", "<new_line>", "current_timestamp", "=", "int", "(", "time", ".", "time", "(", ")", ")", "<new_line>", "if", "(", "(", "(", "current_timestamp", "-", "state_timestamp", ")", ">=", "opt", ".", "read_delay", ")", "or", "(", "state", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "state", "=", "new_state", "<new_line>", "new_states_queue", ".", "pop", "(", "0", ")", "<new_line>", "drawing_tool", ".", "set_window_title", "(", "update_notifier", ",", "watching_player", "=", "twitch_username", ",", "updates_queued", "=", "len", "(", "new_states_queue", ")", ",", "read_delay", "=", "opt", ".", "read_delay", ")", "<dedent>", "<dedent>", "if", "(", "(", "state", "is", "None", ")", "and", "(", "screen_error_message", "is", "None", ")", ")", ":", "<new_line>", "<indent>", "if", "read_from_server", ":", "<new_line>", "<indent>", "screen_error_message", "=", "'Unable to read state from server. Please verify your options setup and tracker_log.txt'", "<dedent>", "else", ":", "<new_line>", "<indent>", "screen_error_message", "=", "'log.txt not found. Put the RebirthItemTracker folder inside the isaac folder, next to log.txt'", "<dedent>", "<dedent>", "if", "(", "screen_error_message", "is not", "None", ")", ":", "<new_line>", "<indent>", "drawing_tool", ".", "write_error_message", "(", "screen_error_message", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "drawing_tool", ".", "draw_state", "(", "state", ")", "<dedent>", "drawing_tool", ".", "tick", "(", ")", "<new_line>", "framecount", "+", "=", "1", "<dedent>", "drawing_tool", ".", "save_window_position", "(", ")", "<dedent>", "<dedent>", "def", "main", "(", ")", ":", "<new_line>", "<indent>", "' Main '", "<new_line>", "try", ":", "<new_line>", "<indent>", "rt", "=", "IsaacTracker", "(", ")", "<new_line>", "rt", ".", "run", "(", ")", "<dedent>", "except", "Exception", ":", "<new_line>", "<indent>", "import", "traceback", "<new_line>", "errmsg", "=", "traceback", ".", "format_exc", "(", ")", "<new_line>", "print", "(", "errmsg", ")", "<new_line>", "logging", ".", "getLogger", "(", "'tracker'", ")", ".", "error", "(", "errmsg", ")", "<dedent>", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "main", "(", ")", "<dedent>"], 606]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "<new_line>", "from", "collections", "import", "OrderedDict", "<new_line>", "from", "brainstorm.layers.base_layer", "import", "Layer", "<new_line>", "from", "brainstorm.structure.buffer_structure", "import", "BufferStructure", ",", "StructureTemplate", "<new_line>", "from", "brainstorm.structure.construction", "import", "ConstructionWrapper", "<new_line>", "from", "brainstorm.utils", "import", "flatten_all_but_last", "<new_line>", "def", "BatchNorm", "(", "name", "=", "None", ",", "decay", "=", "0.9", ",", "epsilon", "=", "1e-05", ")", ":", "<new_line>", "<indent>", "'Create a BatchNormalization layer.\\n\\n    This layer implements batch normalization over the last (right-most)\\n    dimension. Thus, it can be use with both fully connected and convolutional\\n    layers (but only with data in NHWC format).\\n    '", "<new_line>", "return", "ConstructionWrapper", ".", "create", "(", "BatchNormLayerImpl", ",", "name", "=", "<new_line>", "name", ",", "decay", "=", "<new_line>", "decay", ",", "epsilon", "=", "<new_line>", "epsilon", ")", "<dedent>", "class", "BatchNormLayerImpl", "(", "Layer", ")", ":", "<new_line>", "<indent>", "expected_inputs", "=", "{", "'default'", ":", "StructureTemplate", "(", "'T'", ",", "'B'", ",", "'...'", ")", "}", "<new_line>", "expected_kwargs", "=", "{", "'decay'", ",", "'epsilon'", "}", "<new_line>", "def", "setup", "(", "self", ",", "kwargs", ",", "in_shapes", ")", ":", "<new_line>", "<indent>", "self", ".", "epsilon", "=", "kwargs", ".", "get", "(", "'epsilon'", ",", "1e-05", ")", "<new_line>", "self", ".", "decay", "=", "kwargs", ".", "get", "(", "'decay'", ",", "0.9", ")", "<new_line>", "assert", "(", "0.0", "<=", "self", ".", "decay", "<=", "1.0", ")", ",", "'Decay must be between 0 and 1.'", "<new_line>", "outputs", "=", "OrderedDict", "(", ")", "<new_line>", "outputs", "[", "'default'", "]", "=", "in_shapes", "[", "'default'", "]", "<new_line>", "parameters", "=", "OrderedDict", "(", ")", "<new_line>", "buf", "=", "BufferStructure", "(", "self", ".", "in_shapes", "[", "'default'", "]", ".", "feature_shape", "[", "(", "-", "1", ")", "]", ")", "<new_line>", "parameters", "[", "'gamma'", "]", "=", "buf", "<new_line>", "parameters", "[", "'beta'", "]", "=", "buf", "<new_line>", "parameters", "[", "'mu'", "]", "=", "buf", "<new_line>", "parameters", "[", "'sigma'", "]", "=", "buf", "<new_line>", "internals", "=", "OrderedDict", "(", ")", "<new_line>", "internals", "[", "'sigma_b'", "]", "=", "buf", "<new_line>", "internals", "[", "'centered'", "]", "=", "self", ".", "in_shapes", "[", "'default'", "]", "<new_line>", "internals", "[", "'x_hat'", "]", "=", "self", ".", "in_shapes", "[", "'default'", "]", "<new_line>", "return", "(", "outputs", ",", "parameters", ",", "internals", ")", "<dedent>", "def", "forward_pass", "(", "self", ",", "buffers", ",", "training_pass", "=", "True", ")", ":", "<new_line>", "<indent>", "_h", "=", "self", ".", "handler", "<new_line>", "(", "sigma_b", ",", "centered", ",", "x_hat", ")", "=", "buffers", ".", "internals", "<new_line>", "(", "gamma", ",", "beta", ",", "mu", ",", "sigma", ")", "=", "buffers", ".", "parameters", "<new_line>", "inputs", "=", "flatten_all_but_last", "(", "buffers", ".", "inputs", ".", "default", ")", "<new_line>", "centered", "=", "flatten_all_but_last", "(", "centered", ")", "<new_line>", "x_hat", "=", "flatten_all_but_last", "(", "x_hat", ")", "<new_line>", "out", "=", "flatten_all_but_last", "(", "buffers", ".", "outputs", ".", "default", ")", "<new_line>", "m", "=", "inputs", ".", "shape", "[", "0", "]", "<new_line>", "if", "training_pass", ":", "<new_line>", "<indent>", "mu_b", "=", "sigma_b", "<new_line>", "_h", ".", "sum_t", "(", "inputs", ",", "0", ",", "mu_b", ")", "<new_line>", "_h", ".", "mult_st", "(", "(", "(", "-", "1.0", ")", "/", "m", ")", ",", "mu_b", ",", "mu_b", ")", "<new_line>", "_h", ".", "mult_st", "(", "self", ".", "decay", ",", "mu", ",", "mu", ")", "<new_line>", "_h", ".", "mult_add_st", "(", "(", "1.0", "-", "self", ".", "decay", ")", ",", "mu_b", ",", "mu", ")", "<new_line>", "mu", "=", "mu_b", "<dedent>", "_h", ".", "add_mv", "(", "inputs", ",", "mu", ".", "reshape", "(", "(", "1", ",", "mu", ".", "size", ")", ")", ",", "centered", ")", "<new_line>", "if", "training_pass", ":", "<new_line>", "<indent>", "sigma2", "=", "sigma_b", "<new_line>", "centered2", "=", "x_hat", "<new_line>", "_h", ".", "mult_tt", "(", "centered", ",", "centered", ",", "centered2", ")", "<new_line>", "_h", ".", "sum_t", "(", "centered2", ",", "0", ",", "sigma2", ")", "<new_line>", "_h", ".", "mult_st", "(", "(", "1.0", "/", "m", ")", ",", "sigma2", ",", "sigma2", ")", "<new_line>", "_h", ".", "add_st", "(", "self", ".", "epsilon", ",", "sigma2", ",", "sigma2", ")", "<new_line>", "_h", ".", "sqrt_t", "(", "sigma2", ",", "sigma_b", ")", "<new_line>", "_h", ".", "mult_st", "(", "self", ".", "decay", ",", "sigma", ",", "sigma", ")", "<new_line>", "_h", ".", "mult_add_st", "(", "(", "1.0", "-", "self", ".", "decay", ")", ",", "sigma_b", ",", "sigma", ")", "<new_line>", "sigma", "=", "sigma_b", "<dedent>", "_h", ".", "divide_mv", "(", "centered", ",", "sigma", ".", "reshape", "(", "(", "1", ",", "sigma", ".", "size", ")", ")", ",", "x_hat", ")", "<new_line>", "_h", ".", "mult_mv", "(", "x_hat", ",", "gamma", ".", "reshape", "(", "(", "1", ",", "gamma", ".", "size", ")", ")", ",", "out", ")", "<new_line>", "_h", ".", "add_mv", "(", "out", ",", "beta", ".", "reshape", "(", "(", "1", ",", "beta", ".", "size", ")", ")", ",", "out", ")", "<dedent>", "def", "backward_pass", "(", "self", ",", "buffers", ")", ":", "<new_line>", "<indent>", "_h", "=", "self", ".", "handler", "<new_line>", "(", "sigma_b", ",", "centered", ",", "x_hat", ")", "=", "buffers", ".", "internals", "<new_line>", "gamma", "=", "buffers", ".", "parameters", ".", "gamma", "<new_line>", "dgamma", "=", "buffers", ".", "gradients", ".", "gamma", "<new_line>", "dbeta", "=", "buffers", ".", "gradients", ".", "beta", "<new_line>", "x_hat", "=", "flatten_all_but_last", "(", "x_hat", ")", "<new_line>", "outdeltas", "=", "flatten_all_but_last", "(", "buffers", ".", "output_deltas", ".", "default", ")", "<new_line>", "indeltas", "=", "flatten_all_but_last", "(", "buffers", ".", "input_deltas", ".", "default", ")", "<new_line>", "m", "=", "outdeltas", ".", "shape", "[", "0", "]", "<new_line>", "big_tmp", "=", "_h", ".", "allocate", "(", "x_hat", ".", "shape", ")", "<new_line>", "small_tmp", "=", "_h", ".", "allocate", "(", "gamma", ".", "shape", ")", "<new_line>", "tmp", "=", "big_tmp", "<new_line>", "dgamma_tmp", "=", "small_tmp", "<new_line>", "_h", ".", "mult_tt", "(", "outdeltas", ",", "x_hat", ",", "tmp", ")", "<new_line>", "_h", ".", "sum_t", "(", "tmp", ",", "axis", "=", "0", ",", "out", "=", "dgamma_tmp", ")", "<new_line>", "_h", ".", "add_tt", "(", "dgamma_tmp", ",", "dgamma", ",", "dgamma", ")", "<new_line>", "_h", ".", "mult_st", "(", "(", "1", "/", "m", ")", ",", "dgamma_tmp", ",", "dgamma_tmp", ")", "<new_line>", "term1", "=", "big_tmp", "<new_line>", "_h", ".", "mult_mv", "(", "x_hat", ",", "dgamma_tmp", ".", "reshape", "(", "(", "1", ",", "gamma", ".", "size", ")", ")", ",", "term1", ")", "<new_line>", "dbeta_tmp", "=", "small_tmp", "<new_line>", "_h", ".", "sum_t", "(", "outdeltas", ",", "axis", "=", "0", ",", "out", "=", "dbeta_tmp", ")", "<new_line>", "_h", ".", "add_tt", "(", "dbeta_tmp", ",", "dbeta", ",", "dbeta", ")", "<new_line>", "_h", ".", "mult_st", "(", "(", "1", "/", "m", ")", ",", "dbeta_tmp", ",", "dbeta_tmp", ")", "<new_line>", "term2", "=", "big_tmp", "<new_line>", "term3", "=", "big_tmp", "<new_line>", "_h", ".", "subtract_tt", "(", "outdeltas", ",", "term1", ",", "term2", ")", "<new_line>", "_h", ".", "subtract_mv", "(", "term2", ",", "dbeta_tmp", ".", "reshape", "(", "(", "1", ",", "dbeta", ".", "size", ")", ")", ",", "term3", ")", "<new_line>", "coeff", "=", "small_tmp", "<new_line>", "_h", ".", "divide_tt", "(", "gamma", ",", "sigma_b", ",", "coeff", ")", "<new_line>", "term4", "=", "big_tmp", "<new_line>", "_h", ".", "mult_mv", "(", "term3", ",", "coeff", ".", "reshape", "(", "(", "1", ",", "coeff", ".", "size", ")", ")", ",", "term4", ")", "<new_line>", "_h", ".", "add_tt", "(", "term4", ",", "indeltas", ",", "indeltas", ")", "<dedent>", "<dedent>"], 0]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "<new_line>", "from", "collections", "import", "OrderedDict", "<new_line>", "import", "numpy", "as", "np", "<new_line>", "from", "brainstorm.describable", "import", "Describable", "<new_line>", "class", "Scorer", "(", "Describable", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "out_name", "=", "''", ",", "targets_name", "=", "'targets'", ",", "mask_name", "=", "''", ",", "<new_line>", "name", "=", "None", ")", ":", "<new_line>", "<indent>", "self", ".", "out_name", "=", "out_name", "<new_line>", "self", ".", "targets_name", "=", "targets_name", "<new_line>", "self", ".", "mask_name", "=", "mask_name", "<new_line>", "self", ".", "__name__", "=", "(", "name", "if", "(", "name", "is not", "None", ")", "else", "self", ".", "__class__", ".", "__name__", ")", "<dedent>", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "<new_line>", "<indent>", "pass", "<dedent>", "@", "staticmethod", "def", "aggregate", "(", "<new_line>", "errors", ")", ":", "<new_line>", "<indent>", "errors", "=", "np", ".", "array", "(", "errors", ")", "<new_line>", "assert", "(", "(", "errors", ".", "ndim", "==", "2", ")", "and", "(", "errors", ".", "shape", "[", "1", "]", "==", "2", ")", ")", "<new_line>", "return", "(", "np", ".", "sum", "(", "errors", "[", ":", ",", "1", "]", ")", "/", "np", ".", "sum", "(", "errors", "[", ":", ",", "0", "]", ")", ")", "<dedent>", "<dedent>", "def", "gather_losses_and_scores", "(", "net", ",", "scorers", ",", "scores", ",", "out_name", "=", "''", ",", "<new_line>", "targets_name", "=", "'targets'", ",", "mask_name", "=", "''", ")", ":", "<new_line>", "<indent>", "ls", "=", "net", ".", "get_loss_values", "(", ")", "<new_line>", "for", "(", "name", ",", "loss", ")", "in", "ls", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "scores", "[", "name", "]", ".", "append", "(", "(", "net", ".", "_buffer_manager", ".", "batch_size", ",", "loss", ")", ")", "<dedent>", "for", "sc", "in", "scorers", ":", "<new_line>", "<indent>", "name", "=", "sc", ".", "__name__", "<new_line>", "predicted", "=", "net", ".", "get", "(", "(", "sc", ".", "out_name", "or", "out_name", "or", "net", ".", "output_name", ")", ")", "<new_line>", "true_labels", "=", "(", "net", ".", "get_input", "(", "sc", ".", "targets_name", ")", "if", "sc", ".", "targets_name", "else", "<new_line>", "net", ".", "get_input", "(", "targets_name", ")", ")", "<new_line>", "mask", "=", "(", "net", ".", "get_input", "(", "sc", ".", "mask_name", ")", "if", "sc", ".", "mask_name", "else", "<new_line>", "(", "net", ".", "get_input", "(", "mask_name", ")", "if", "mask_name", "else", "None", ")", ")", "<new_line>", "predicted", "=", "_flatten_all_but_last", "(", "predicted", ")", "<new_line>", "true_labels", "=", "_flatten_all_but_last", "(", "true_labels", ")", "<new_line>", "mask", "=", "_flatten_all_but_last", "(", "mask", ")", "<new_line>", "weight", "=", "(", "mask", ".", "sum", "(", ")", "if", "(", "mask", "is not", "None", ")", "else", "predicted", ".", "shape", "[", "0", "]", ")", "<new_line>", "scores", "[", "name", "]", ".", "append", "(", "(", "weight", ",", "sc", "(", "true_labels", ",", "predicted", ",", "mask", ")", ")", ")", "<dedent>", "<dedent>", "def", "aggregate_losses_and_scores", "(", "scores", ",", "net", ",", "scorers", ")", ":", "<new_line>", "<indent>", "results", "=", "OrderedDict", "(", ")", "<new_line>", "for", "name", "in", "net", ".", "get_loss_values", "(", ")", ":", "<new_line>", "<indent>", "results", "[", "name", "]", "=", "_weighted_average", "(", "scores", "[", "name", "]", ")", "<dedent>", "for", "sc", "in", "scorers", ":", "<new_line>", "<indent>", "results", "[", "sc", ".", "__name__", "]", "=", "sc", ".", "aggregate", "(", "scores", "[", "sc", ".", "__name__", "]", ")", "<dedent>", "return", "results", "<dedent>", "class", "Accuracy", "(", "Scorer", ")", ":", "<new_line>", "<indent>", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "<new_line>", "<indent>", "if", "(", "predicted", ".", "shape", "[", "1", "]", ">", "1", ")", ":", "<new_line>", "<indent>", "predicted", "=", "predicted", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "(", "-", "1", ")", ",", "1", ")", "<dedent>", "correct", "=", "(", "predicted", "==", "true_labels", ")", ".", "astype", "(", "np", ".", "float", ")", "<new_line>", "if", "(", "mask", "is not", "None", ")", ":", "<new_line>", "<indent>", "correct", "*", "=", "mask", "<dedent>", "return", "np", ".", "sum", "(", "correct", ")", "<dedent>", "<dedent>", "class", "Hamming", "(", "Scorer", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "threshold", "=", "0.5", ",", "out_name", "=", "''", ",", "targets_name", "=", "'targets'", ",", "<new_line>", "mask_name", "=", "''", ",", "name", "=", "None", ")", ":", "<new_line>", "<indent>", "super", "(", "Hamming", ",", "self", ")", ".", "__init__", "(", "out_name", ",", "targets_name", ",", "mask_name", ",", "name", ")", "<new_line>", "self", ".", "threshold", "=", "threshold", "<dedent>", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "<new_line>", "<indent>", "correct", "=", "np", ".", "logical_xor", "(", "(", "predicted", "<", "self", ".", "threshold", ")", ",", "<new_line>", "true_labels", ")", ".", "astype", "(", "np", ".", "float", ")", "<new_line>", "if", "(", "mask", "is not", "None", ")", ":", "<new_line>", "<indent>", "correct", "*", "=", "mask", "<dedent>", "return", "(", "np", ".", "sum", "(", "correct", ")", "/", "true_labels", ".", "shape", "[", "1", "]", ")", "<dedent>", "<dedent>", "class", "MeanSquaredError", "(", "Scorer", ")", ":", "<new_line>", "<indent>", "def", "__call__", "(", "self", ",", "true_labels", ",", "predicted", ",", "mask", "=", "None", ")", ":", "<new_line>", "<indent>", "errors", "=", "(", "(", "true_labels", "-", "predicted", ")", "**", "2", ")", "<new_line>", "if", "(", "mask", "is not", "None", ")", ":", "<new_line>", "<indent>", "errors", "*", "=", "mask", "<dedent>", "return", "(", "0.5", "*", "np", ".", "sum", "(", "errors", ")", ")", "<dedent>", "<dedent>", "def", "_flatten_all_but_last", "(", "a", ")", ":", "<new_line>", "<indent>", "if", "(", "a", "is", "None", ")", ":", "<new_line>", "<indent>", "return", "None", "<dedent>", "return", "a", ".", "reshape", "(", "(", "-", "1", ")", ",", "a", ".", "shape", "[", "(", "-", "1", ")", "]", ")", "<dedent>", "def", "_weighted_average", "(", "errors", ")", ":", "<new_line>", "<indent>", "errors", "=", "np", ".", "array", "(", "errors", ")", "<new_line>", "assert", "(", "(", "errors", ".", "ndim", "==", "2", ")", "and", "(", "errors", ".", "shape", "[", "1", "]", "==", "2", ")", ")", "<new_line>", "return", "np", ".", "sum", "(", "(", "(", "errors", "[", ":", ",", "1", "]", "*", "errors", "[", ":", ",", "0", "]", ")", "/", "np", ".", "sum", "(", "errors", "[", ":", ",", "0", "]", ")", ")", ")", "<dedent>"], 0]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "<new_line>", "import", "pytest", "<new_line>", "import", "six", "<new_line>", "from", "brainstorm.training.schedules", "import", "Exponential", ",", "Linear", ",", "MultiStep", "<new_line>", "def", "test_linear", "(", ")", ":", "<new_line>", "<indent>", "sch", "=", "Linear", "(", "initial_value", "=", "1.0", ",", "final_value", "=", "0.5", ",", "num_changes", "=", "5", ")", "<new_line>", "epochs", "=", "(", "(", "(", "(", "(", "[", "0", "]", "*", "2", ")", "+", "(", "[", "1", "]", "*", "2", ")", ")", "+", "(", "[", "2", "]", "*", "2", ")", ")", "+", "(", "[", "3", "]", "*", "2", ")", ")", "+", "(", "[", "4", "]", "*", "2", ")", ")", "<new_line>", "updates", "=", "range", "(", "10", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'epoch'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "0.9", ",", "0.9", ",", "0.8", ",", "0.8", ",", "0.7", ",", "0.7", ",", "0.6", ",", "0.6", "]", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "[", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ",", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "3", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "1.0", ",", "0.9", ",", "0.9", ",", "0.9", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.7", "]", ")", "<dedent>", "def", "test_exponential", "(", ")", ":", "<new_line>", "<indent>", "sch", "=", "Exponential", "(", "initial_value", "=", "1.0", ",", "factor", "=", "0.99", ",", "minimum", "=", "0.97", ")", "<new_line>", "epochs", "=", "(", "(", "(", "[", "0", "]", "*", "4", ")", "+", "(", "[", "1", "]", "*", "4", ")", ")", "+", "(", "[", "2", "]", "*", "4", ")", ")", "<new_line>", "updates", "=", "range", "(", "12", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'epoch'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "(", "(", "(", "[", "1.0", "]", "*", "4", ")", "+", "(", "[", "0.99", "]", "*", "4", ")", ")", "+", "(", "[", "(", "0.99", "*", "0.99", ")", "]", "*", "4", ")", ")", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "(", "[", "(", "1.0", "*", "(", "0.99", "**", "x", ")", ")", "for", "x", "in", "range", "(", "4", ")", "]", "+", "(", "[", "0.97", "]", "*", "8", ")", ")", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "3", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "(", "(", "(", "(", "[", "1.0", "]", "*", "3", ")", "+", "(", "[", "0.99", "]", "*", "3", ")", ")", "+", "(", "[", "0.9801", "]", "*", "3", ")", ")", "+", "(", "[", "(", "0.99", "**", "3", ")", "]", "*", "3", ")", ")", ")", "<dedent>", "def", "test_multistep", "(", ")", ":", "<new_line>", "<indent>", "sch", "=", "MultiStep", "(", "initial_value", "=", "1.0", ",", "steps", "=", "[", "3", ",", "5", ",", "8", "]", ",", "values", "=", "<new_line>", "[", "0.1", ",", "0.01", ",", "0.001", "]", ")", "<new_line>", "epochs", "=", "(", "(", "(", "(", "(", "[", "0", "]", "*", "2", ")", "+", "(", "[", "1", "]", "*", "2", ")", ")", "+", "(", "[", "2", "]", "*", "2", ")", ")", "+", "(", "[", "3", "]", "*", "2", ")", ")", "+", "(", "[", "4", "]", "*", "2", ")", ")", "<new_line>", "updates", "=", "range", "(", "10", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'epoch'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", "]", ")", "<new_line>", "values", "=", "[", "sch", "(", "epoch", ",", "update", ",", "'update'", ",", "1", ",", "None", ",", "None", ",", "None", ")", "for", "<new_line>", "(", "epoch", ",", "update", ")", "in", "six", ".", "moves", ".", "zip", "(", "epochs", ",", "updates", ")", "]", "<new_line>", "assert", "(", "values", "==", "[", "1.0", ",", "1.0", ",", "1.0", ",", "0.1", ",", "0.1", ",", "0.01", ",", "0.01", ",", "0.01", ",", "0.001", ",", "0.001", "]", ")", "<new_line>", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "<new_line>", "<indent>", "_", "=", "sch", "(", "0", ",", "0", ",", "'update'", ",", "3", ",", "None", ",", "None", ",", "None", ")", "<dedent>", "<dedent>"], 0]
[["import", "os", "<new_line>", "import", "sys", "<new_line>", "try", ":", "<new_line>", "<indent>", "from", "unittest.mock", "import", "MagicMock", "<dedent>", "except", "ImportError", ":", "<new_line>", "<indent>", "from", "mock", "import", "Mock", "as", "MagicMock", "<dedent>", "class", "Mock", "(", "MagicMock", ")", ":", "<new_line>", "<indent>", "@", "classmethod", "def", "__getattr__", "(", "<new_line>", "cls", ",", "name", ")", ":", "<new_line>", "<indent>", "return", "Mock", "(", ")", "<dedent>", "<dedent>", "MOCK_MODULES", "=", "[", "'h5py'", ",", "'brainstorm.handlers._cpuop'", "]", "<new_line>", "sys", ".", "modules", ".", "update", "(", "(", "(", "mod_name", ",", "Mock", "(", ")", ")", "for", "mod_name", "in", "MOCK_MODULES", ")", ")", "<new_line>", "cwd", "=", "os", ".", "getcwd", "(", ")", "<new_line>", "parent", "=", "os", ".", "path", ".", "dirname", "(", "cwd", ")", "<new_line>", "sys", ".", "path", ".", "insert", "(", "0", ",", "parent", ")", "<new_line>", "import", "brainstorm", "<new_line>", "extensions", "=", "[", "'sphinx.ext.autodoc'", ",", "'sphinx.ext.viewcode'", ",", "<new_line>", "'sphinx.ext.napoleon'", "]", "<new_line>", "templates_path", "=", "[", "'_templates'", "]", "<new_line>", "source_suffix", "=", "'.rst'", "<new_line>", "master_doc", "=", "'index'", "<new_line>", "project", "=", "'brainstorm'", "<new_line>", "copyright", "=", "'2015, IDSIA'", "<new_line>", "version", "=", "brainstorm", ".", "__version__", "<new_line>", "release", "=", "brainstorm", ".", "__version__", "<new_line>", "exclude_patterns", "=", "[", "'_build'", "]", "<new_line>", "pygments_style", "=", "'sphinx'", "<new_line>", "on_rtd", "=", "(", "os", ".", "environ", ".", "get", "(", "'READTHEDOCS'", ",", "None", ")", "==", "'True'", ")", "<new_line>", "if", "(", "not", "on_rtd", ")", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "import", "sphinx_rtd_theme", "<new_line>", "html_theme", "=", "'sphinx_rtd_theme'", "<new_line>", "html_theme_path", "=", "[", "sphinx_rtd_theme", ".", "get_html_theme_path", "(", ")", "]", "<dedent>", "except", "ImportError", ":", "<new_line>", "<indent>", "html_theme", "=", "'alabaster'", "<dedent>", "<dedent>", "html_static_path", "=", "[", "'_static'", "]", "<new_line>", "htmlhelp_basename", "=", "'brainstormdoc'", "<new_line>", "latex_elements", "=", "{", "}", "<new_line>", "latex_documents", "=", "[", "<new_line>", "(", "'index'", ",", "'brainstorm.tex'", ",", "'brainstorm Documentation'", ",", "<new_line>", "'Klaus Greff'", ",", "'manual'", ")", "]", "<new_line>", "man_pages", "=", "[", "<new_line>", "(", "'index'", ",", "'brainstorm'", ",", "'brainstorm Documentation'", ",", "<new_line>", "[", "'Klaus Greff'", "]", ",", "1", ")", "]", "<new_line>", "texinfo_documents", "=", "[", "<new_line>", "(", "'index'", ",", "'brainstorm'", ",", "'brainstorm Documentation'", ",", "<new_line>", "'Klaus Greff'", ",", "'brainstorm'", ",", "'One line description of project.'", ",", "<new_line>", "'Miscellaneous'", ")", "]"], 0]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "<new_line>", "from", "sacred.utils", "import", "iter_prefixes", ",", "join_paths", "<new_line>", "class", "ConfigSummary", "(", "dict", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "added", "=", "(", ")", ",", "modified", "=", "(", ")", ",", "typechanged", "=", "(", ")", ",", "<new_line>", "ignored_fallbacks", "=", "(", ")", ")", ":", "<new_line>", "<indent>", "super", "(", "ConfigSummary", ",", "self", ")", ".", "__init__", "(", ")", "<new_line>", "self", ".", "added", "=", "set", "(", "added", ")", "<new_line>", "self", ".", "modified", "=", "set", "(", "modified", ")", "<new_line>", "self", ".", "typechanged", "=", "dict", "(", "typechanged", ")", "<new_line>", "self", ".", "ignored_fallbacks", "=", "set", "(", "ignored_fallbacks", ")", "<new_line>", "self", ".", "ensure_coherence", "(", ")", "<dedent>", "def", "update_from", "(", "self", ",", "config_mod", ",", "path", "=", "''", ")", ":", "<new_line>", "<indent>", "added", "=", "config_mod", ".", "added", "<new_line>", "updated", "=", "config_mod", ".", "modified", "<new_line>", "typechanged", "=", "config_mod", ".", "typechanged", "<new_line>", "self", ".", "added", "&", "=", "{", "join_paths", "(", "path", ",", "a", ")", "for", "a", "in", "added", "}", "<new_line>", "self", ".", "modified", "|", "=", "{", "join_paths", "(", "path", ",", "u", ")", "for", "u", "in", "updated", "}", "<new_line>", "self", ".", "typechanged", ".", "update", "(", "{", "join_paths", "(", "path", ",", "k", ")", ":", "v", "for", "<new_line>", "(", "k", ",", "v", ")", "in", "typechanged", ".", "items", "(", ")", "}", ")", "<new_line>", "self", ".", "ensure_coherence", "(", ")", "<dedent>", "def", "update_add", "(", "self", ",", "config_mod", ",", "path", "=", "''", ")", ":", "<new_line>", "<indent>", "added", "=", "config_mod", ".", "added", "<new_line>", "updated", "=", "config_mod", ".", "modified", "<new_line>", "typechanged", "=", "config_mod", ".", "typechanged", "<new_line>", "self", ".", "added", "|", "=", "{", "join_paths", "(", "path", ",", "a", ")", "for", "a", "in", "added", "}", "<new_line>", "self", ".", "modified", "|", "=", "{", "join_paths", "(", "path", ",", "u", ")", "for", "u", "in", "updated", "}", "<new_line>", "self", ".", "typechanged", ".", "update", "(", "{", "join_paths", "(", "path", ",", "k", ")", ":", "v", "for", "<new_line>", "(", "k", ",", "v", ")", "in", "typechanged", ".", "items", "(", ")", "}", ")", "<new_line>", "self", ".", "ensure_coherence", "(", ")", "<dedent>", "def", "ensure_coherence", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "modified", "|", "=", "{", "p", "for", "a", "in", "self", ".", "added", "for", "p", "in", "iter_prefixes", "(", "a", ")", "}", "<new_line>", "self", ".", "modified", "|", "=", "{", "p", "for", "u", "in", "self", ".", "modified", "for", "p", "in", "iter_prefixes", "(", "u", ")", "}", "<new_line>", "self", ".", "modified", "|", "=", "{", "p", "for", "t", "in", "self", ".", "typechanged", "for", "<new_line>", "p", "in", "iter_prefixes", "(", "t", ")", "}", "<new_line>", "self", ".", "added", "-", "=", "set", "(", "self", ".", "typechanged", ".", "keys", "(", ")", ")", "<new_line>", "self", ".", "modified", "-", "=", "set", "(", "self", ".", "typechanged", ".", "keys", "(", ")", ")", "<new_line>", "self", ".", "modified", "-", "=", "self", ".", "added", "<dedent>", "<dedent>"], 0]
[["from", "__future__", "import", "division", ",", "print_function", ",", "unicode_literals", "<new_line>", "import", "pytest", "<new_line>", "import", "sacred.optional", "as", "opt", "<new_line>", "from", "sacred.config", "import", "ConfigDict", "<new_line>", "from", "sacred.config.custom_containers", "import", "DogmaticDict", ",", "DogmaticList", "<new_line>", "@", "pytest", ".", "fixture", "def", "conf_dict", "(", ")", ":", "<new_line>", "<indent>", "cfg", "=", "ConfigDict", "(", "{", "<new_line>", "'a'", ":", "1", ",", "<new_line>", "'b'", ":", "2.0", ",", "<new_line>", "'c'", ":", "True", ",", "<new_line>", "'d'", ":", "'string'", ",", "<new_line>", "'e'", ":", "[", "1", ",", "2", ",", "3", "]", ",", "<new_line>", "'f'", ":", "{", "'a'", ":", "'b'", ",", "'c'", ":", "'d'", "}", "}", ")", "<new_line>", "return", "cfg", "<dedent>", "def", "test_config_dict_returns_dict", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "assert", "isinstance", "(", "conf_dict", "(", ")", ",", "dict", ")", "<dedent>", "def", "test_config_dict_result_contains_keys", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", ",", "'e'", ",", "'f'", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'a'", "]", "==", "1", ")", "<new_line>", "assert", "(", "cfg", "[", "'b'", "]", "==", "2.0", ")", "<new_line>", "assert", "cfg", "[", "'c'", "]", "<new_line>", "assert", "(", "cfg", "[", "'d'", "]", "==", "'string'", ")", "<new_line>", "assert", "(", "cfg", "[", "'e'", "]", "==", "[", "1", ",", "2", ",", "3", "]", ")", "<new_line>", "assert", "(", "cfg", "[", "'f'", "]", "==", "{", "'a'", ":", "'b'", ",", "'c'", ":", "'d'", "}", ")", "<dedent>", "def", "test_fixing_values", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "assert", "(", "conf_dict", "(", "{", "'a'", ":", "100", "}", ")", "[", "'a'", "]", "==", "100", ")", "<dedent>", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'key'", ",", "[", "'_underscore'", ",", "'white space'", ",", "12", ",", "'12'", ",", "'$f'", "]", ")", "def", "test_config_dict_raises_on_invalid_keys", "(", "<new_line>", "key", ")", ":", "<new_line>", "<indent>", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "<new_line>", "<indent>", "ConfigDict", "(", "{", "key", ":", "True", "}", ")", "<dedent>", "<dedent>", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'value'", ",", "[", "(", "lambda", "x", ":", "x", ")", ",", "pytest", ",", "test_fixing_values", "]", ")", "def", "test_config_dict_raises_on_invalid_values", "(", "<new_line>", "value", ")", ":", "<new_line>", "<indent>", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "<new_line>", "<indent>", "ConfigDict", "(", "{", "'invalid'", ":", "value", "}", ")", "<dedent>", "<dedent>", "def", "test_fixing_nested_dicts", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'f'", ":", "{", "'c'", ":", "'t'", "}", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'f'", "]", "[", "'a'", "]", "==", "'b'", ")", "<new_line>", "assert", "(", "cfg", "[", "'f'", "]", "[", "'c'", "]", "==", "'t'", ")", "<dedent>", "def", "test_adding_values", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'g'", ":", "23", ",", "'h'", ":", "{", "'i'", ":", "10", "}", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'g'", "]", "==", "23", ")", "<new_line>", "assert", "(", "cfg", "[", "'h'", "]", "==", "{", "'i'", ":", "10", "}", ")", "<new_line>", "assert", "(", "cfg", ".", "added", "==", "{", "'g'", ",", "'h'", ",", "'h.i'", "}", ")", "<dedent>", "def", "test_typechange", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'a'", ":", "'bar'", ",", "'b'", ":", "'foo'", ",", "'c'", ":", "1", "}", ")", "<new_line>", "assert", "(", "cfg", ".", "typechanged", "==", "{", "'a'", ":", "(", "int", ",", "type", "(", "'bar'", ")", ")", ",", "<new_line>", "'b'", ":", "(", "float", ",", "type", "(", "'foo'", ")", ")", ",", "<new_line>", "'c'", ":", "(", "bool", ",", "int", ")", "}", ")", "<dedent>", "def", "test_nested_typechange", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'f'", ":", "{", "'a'", ":", "10", "}", "}", ")", "<new_line>", "assert", "(", "cfg", ".", "typechanged", "==", "{", "'f.a'", ":", "(", "type", "(", "'a'", ")", ",", "int", ")", "}", ")", "<dedent>", "def", "is_dogmatic", "(", "a", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "a", ",", "(", "DogmaticDict", ",", "DogmaticList", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "isinstance", "(", "a", ",", "dict", ")", ":", "<new_line>", "<indent>", "return", "any", "(", "(", "is_dogmatic", "(", "v", ")", "for", "v", "in", "a", ".", "values", "(", ")", ")", ")", "<dedent>", "elif", "isinstance", "(", "a", ",", "(", "list", ",", "tuple", ")", ")", ":", "<new_line>", "<indent>", "return", "any", "(", "(", "is_dogmatic", "(", "v", ")", "for", "v", "in", "a", ")", ")", "<dedent>", "<dedent>", "def", "test_result_of_conf_dict_is_not_dogmatic", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'e'", ":", "[", "1", ",", "1", ",", "1", "]", "}", ")", "<new_line>", "assert", "(", "not", "is_dogmatic", "(", "cfg", ")", ")", "<dedent>", "@", "pytest", ".", "mark", ".", "skipif", "(", "(", "not", "opt", ".", "has_numpy", ")", ",", "reason", "=", "'requires numpy'", ")", "def", "test_conf_scope_handles_numpy_bools", "(", ")", ":", "<new_line>", "<indent>", "cfg", "=", "ConfigDict", "(", "{", "<new_line>", "'a'", ":", "opt", ".", "np", ".", "bool_", "(", "1", ")", "}", ")", "<new_line>", "assert", "(", "'a'", "in", "cfg", "(", ")", ")", "<new_line>", "assert", "cfg", "(", ")", "[", "'a'", "]", "<dedent>", "def", "test_conf_scope_contains_presets", "(", ")", ":", "<new_line>", "<indent>", "conf_dict", "=", "ConfigDict", "(", "{", "<new_line>", "'answer'", ":", "42", "}", ")", "<new_line>", "cfg", "=", "conf_dict", "(", "preset", "=", "{", "'a'", ":", "21", ",", "'unrelated'", ":", "True", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'a'", ",", "'answer'", ",", "'unrelated'", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'a'", "]", "==", "21", ")", "<new_line>", "assert", "(", "cfg", "[", "'answer'", "]", "==", "42", ")", "<new_line>", "assert", "(", "cfg", "[", "'unrelated'", "]", "is", "True", ")", "<dedent>", "def", "test_conf_scope_does_not_contain_fallback", "(", ")", ":", "<new_line>", "<indent>", "config_dict", "=", "ConfigDict", "(", "{", "<new_line>", "'answer'", ":", "42", "}", ")", "<new_line>", "cfg", "=", "config_dict", "(", "fallback", "=", "{", "'a'", ":", "21", ",", "'b'", ":", "10", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'answer'", "}", ")", "<dedent>", "def", "test_fixed_subentry_of_preset", "(", ")", ":", "<new_line>", "<indent>", "config_dict", "=", "ConfigDict", "(", "{", "}", ")", "<new_line>", "cfg", "=", "config_dict", "(", "preset", "=", "{", "'d'", ":", "{", "'a'", ":", "1", ",", "'b'", ":", "2", "}", "}", ",", "fixed", "=", "{", "'d'", ":", "{", "'a'", ":", "10", "}", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'d'", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", "[", "'d'", "]", ".", "keys", "(", ")", ")", "==", "{", "'a'", ",", "'b'", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'d'", "]", "[", "'a'", "]", "==", "10", ")", "<new_line>", "assert", "(", "cfg", "[", "'d'", "]", "[", "'b'", "]", "==", "2"], 0]
[["import", "division", ",", "print_function", ",", "unicode_literals", "<new_line>", "import", "pytest", "<new_line>", "import", "sacred.optional", "as", "opt", "<new_line>", "from", "sacred.config", "import", "ConfigDict", "<new_line>", "from", "sacred.config.custom_containers", "import", "DogmaticDict", ",", "DogmaticList", "<new_line>", "@", "pytest", ".", "fixture", "def", "conf_dict", "(", ")", ":", "<new_line>", "<indent>", "cfg", "=", "ConfigDict", "(", "{", "<new_line>", "'a'", ":", "1", ",", "<new_line>", "'b'", ":", "2.0", ",", "<new_line>", "'c'", ":", "True", ",", "<new_line>", "'d'", ":", "'string'", ",", "<new_line>", "'e'", ":", "[", "1", ",", "2", ",", "3", "]", ",", "<new_line>", "'f'", ":", "{", "'a'", ":", "'b'", ",", "'c'", ":", "'d'", "}", "}", ")", "<new_line>", "return", "cfg", "<dedent>", "def", "test_config_dict_returns_dict", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "assert", "isinstance", "(", "conf_dict", "(", ")", ",", "dict", ")", "<dedent>", "def", "test_config_dict_result_contains_keys", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", ",", "'e'", ",", "'f'", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'a'", "]", "==", "1", ")", "<new_line>", "assert", "(", "cfg", "[", "'b'", "]", "==", "2.0", ")", "<new_line>", "assert", "cfg", "[", "'c'", "]", "<new_line>", "assert", "(", "cfg", "[", "'d'", "]", "==", "'string'", ")", "<new_line>", "assert", "(", "cfg", "[", "'e'", "]", "==", "[", "1", ",", "2", ",", "3", "]", ")", "<new_line>", "assert", "(", "cfg", "[", "'f'", "]", "==", "{", "'a'", ":", "'b'", ",", "'c'", ":", "'d'", "}", ")", "<dedent>", "def", "test_fixing_values", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "assert", "(", "conf_dict", "(", "{", "'a'", ":", "100", "}", ")", "[", "'a'", "]", "==", "100", ")", "<dedent>", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'key'", ",", "[", "'_underscore'", ",", "'white space'", ",", "12", ",", "'12'", ",", "'$f'", "]", ")", "def", "test_config_dict_raises_on_invalid_keys", "(", "<new_line>", "key", ")", ":", "<new_line>", "<indent>", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "<new_line>", "<indent>", "ConfigDict", "(", "{", "key", ":", "True", "}", ")", "<dedent>", "<dedent>", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'value'", ",", "[", "(", "lambda", "x", ":", "x", ")", ",", "pytest", ",", "test_fixing_values", "]", ")", "def", "test_config_dict_raises_on_invalid_values", "(", "<new_line>", "value", ")", ":", "<new_line>", "<indent>", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "<new_line>", "<indent>", "ConfigDict", "(", "{", "'invalid'", ":", "value", "}", ")", "<dedent>", "<dedent>", "def", "test_fixing_nested_dicts", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'f'", ":", "{", "'c'", ":", "'t'", "}", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'f'", "]", "[", "'a'", "]", "==", "'b'", ")", "<new_line>", "assert", "(", "cfg", "[", "'f'", "]", "[", "'c'", "]", "==", "'t'", ")", "<dedent>", "def", "test_adding_values", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'g'", ":", "23", ",", "'h'", ":", "{", "'i'", ":", "10", "}", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'g'", "]", "==", "23", ")", "<new_line>", "assert", "(", "cfg", "[", "'h'", "]", "==", "{", "'i'", ":", "10", "}", ")", "<new_line>", "assert", "(", "cfg", ".", "added", "==", "{", "'g'", ",", "'h'", ",", "'h.i'", "}", ")", "<dedent>", "def", "test_typechange", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'a'", ":", "'bar'", ",", "'b'", ":", "'foo'", ",", "'c'", ":", "1", "}", ")", "<new_line>", "assert", "(", "cfg", ".", "typechanged", "==", "{", "'a'", ":", "(", "int", ",", "type", "(", "'bar'", ")", ")", ",", "<new_line>", "'b'", ":", "(", "float", ",", "type", "(", "'foo'", ")", ")", ",", "<new_line>", "'c'", ":", "(", "bool", ",", "int", ")", "}", ")", "<dedent>", "def", "test_nested_typechange", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'f'", ":", "{", "'a'", ":", "10", "}", "}", ")", "<new_line>", "assert", "(", "cfg", ".", "typechanged", "==", "{", "'f.a'", ":", "(", "type", "(", "'a'", ")", ",", "int", ")", "}", ")", "<dedent>", "def", "is_dogmatic", "(", "a", ")", ":", "<new_line>", "<indent>", "if", "isinstance", "(", "a", ",", "(", "DogmaticDict", ",", "DogmaticList", ")", ")", ":", "<new_line>", "<indent>", "return", "True", "<dedent>", "elif", "isinstance", "(", "a", ",", "dict", ")", ":", "<new_line>", "<indent>", "return", "any", "(", "(", "is_dogmatic", "(", "v", ")", "for", "v", "in", "a", ".", "values", "(", ")", ")", ")", "<dedent>", "elif", "isinstance", "(", "a", ",", "(", "list", ",", "tuple", ")", ")", ":", "<new_line>", "<indent>", "return", "any", "(", "(", "is_dogmatic", "(", "v", ")", "for", "v", "in", "a", ")", ")", "<dedent>", "<dedent>", "def", "test_result_of_conf_dict_is_not_dogmatic", "(", "conf_dict", ")", ":", "<new_line>", "<indent>", "cfg", "=", "conf_dict", "(", "{", "'e'", ":", "[", "1", ",", "1", ",", "1", "]", "}", ")", "<new_line>", "assert", "(", "not", "is_dogmatic", "(", "cfg", ")", ")", "<dedent>", "@", "pytest", ".", "mark", ".", "skipif", "(", "(", "not", "opt", ".", "has_numpy", ")", ",", "reason", "=", "'requires numpy'", ")", "def", "test_conf_scope_handles_numpy_bools", "(", ")", ":", "<new_line>", "<indent>", "cfg", "=", "ConfigDict", "(", "{", "<new_line>", "'a'", ":", "opt", ".", "np", ".", "bool_", "(", "1", ")", "}", ")", "<new_line>", "assert", "(", "'a'", "in", "cfg", "(", ")", ")", "<new_line>", "assert", "cfg", "(", ")", "[", "'a'", "]", "<dedent>", "def", "test_conf_scope_contains_presets", "(", ")", ":", "<new_line>", "<indent>", "conf_dict", "=", "ConfigDict", "(", "{", "<new_line>", "'answer'", ":", "42", "}", ")", "<new_line>", "cfg", "=", "conf_dict", "(", "preset", "=", "{", "'a'", ":", "21", ",", "'unrelated'", ":", "True", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'a'", ",", "'answer'", ",", "'unrelated'", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'a'", "]", "==", "21", ")", "<new_line>", "assert", "(", "cfg", "[", "'answer'", "]", "==", "42", ")", "<new_line>", "assert", "(", "cfg", "[", "'unrelated'", "]", "is", "True", ")", "<dedent>", "def", "test_conf_scope_does_not_contain_fallback", "(", ")", ":", "<new_line>", "<indent>", "config_dict", "=", "ConfigDict", "(", "{", "<new_line>", "'answer'", ":", "42", "}", ")", "<new_line>", "cfg", "=", "config_dict", "(", "fallback", "=", "{", "'a'", ":", "21", ",", "'b'", ":", "10", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'answer'", "}", ")", "<dedent>", "def", "test_fixed_subentry_of_preset", "(", ")", ":", "<new_line>", "<indent>", "config_dict", "=", "ConfigDict", "(", "{", "}", ")", "<new_line>", "cfg", "=", "config_dict", "(", "preset", "=", "{", "'d'", ":", "{", "'a'", ":", "1", ",", "'b'", ":", "2", "}", "}", ",", "fixed", "=", "{", "'d'", ":", "{", "'a'", ":", "10", "}", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", ".", "keys", "(", ")", ")", "==", "{", "'d'", "}", ")", "<new_line>", "assert", "(", "set", "(", "cfg", "[", "'d'", "]", ".", "keys", "(", ")", ")", "==", "{", "'a'", ",", "'b'", "}", ")", "<new_line>", "assert", "(", "cfg", "[", "'d'", "]", "[", "'a'", "]", "==", "10", ")", "<new_line>", "assert", "(", "cfg", "[", "'d'", "]", "[", "'b'", "]", "==", "2", ")", "<dedent>"], 998]
[["class", "PID", "(", "object", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ")", ":", "<new_line>", "<indent>", "'initizes value for the PID'", "<new_line>", "self", ".", "kd", "=", "0", "<new_line>", "self", ".", "ki", "=", "0", "<new_line>", "self", ".", "kp", "=", "1", "<new_line>", "self", ".", "previous_error", "=", "0", "<new_line>", "self", ".", "integral_error", "=", "0", "<dedent>", "def", "set_k_values", "(", "self", ",", "kp", ",", "kd", ",", "ki", ")", ":", "<new_line>", "<indent>", "self", ".", "kp", "=", "kp", "<new_line>", "self", ".", "ki", "=", "ki", "<new_line>", "self", ".", "kd", "=", "kd", "<dedent>", "def", "clear_error", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "previous_error", "=", "0", "<new_line>", "self", ".", "integeral_error", "=", "0", "<dedent>", "def", "pid", "(", "self", ",", "target", ",", "process_var", ",", "timestep", ")", ":", "<new_line>", "<indent>", "current_error", "=", "(", "target", "-", "process_var", ")", "<new_line>", "p_error", "=", "(", "self", ".", "kp", "*", "current_error", ")", "<new_line>", "d_error", "=", "<new_line>", "(", "<new_line>", "(", "self", ".", "kd", "*", "(", "current_error", "-", "self", ".", "previous_error", ")", ")", "/", "<new_line>", "timestep", ")", "<new_line>", "self", ".", "integral_error", "=", "(", "(", "<new_line>", "(", "current_error", "+", "self", ".", "previous_error", ")", "/", "2", ")", "+", "<new_line>", "self", ".", "integral_error", ")", "<new_line>", "i_error", "=", "(", "self", ".", "ki", "*", "self", ".", "integral_error", ")", "<new_line>", "total_error", "=", "(", "(", "p_error", "+", "d_error", ")", "+", "i_error", ")", "<new_line>", "self", ".", "previous_error", "=", "current_error", "<new_line>", "return", "total_error", "<dedent>", "<dedent>"], 0]
[["'Test cases for servo abstraction class.'", "<new_line>", "from", "random", "import", "randint", "<new_line>", "from", "os", "import", "path", "<new_line>", "import", "bot.lib.lib", "as", "lib", "<new_line>", "import", "bot.hardware.servo", "as", "s_mod", "<new_line>", "import", "tests.test_bot", "as", "test_bot", "<new_line>", "class", "TestPosition", "(", "test_bot", ".", "TestBot", ")", ":", "<new_line>", "<indent>", "'Test setting and checking the position of a servo.'", "<new_line>", "def", "setUp", "(", "self", ")", ":", "<new_line>", "<indent>", "'Setup test hardware files and build servo object.'", "<new_line>", "super", "(", "TestPosition", ",", "self", ")", ".", "setUp", "(", ")", "<new_line>", "config", "=", "(", "path", ".", "dirname", "(", "path", ".", "realpath", "(", "__file__", ")", ")", "+", "'/test_config.yaml'", ")", "<new_line>", "self", ".", "config", "=", "lib", ".", "get_config", "(", "config", ")", "<new_line>", "self", ".", "pwm_num", "=", "self", ".", "config", "[", "'test_servo'", "]", "<new_line>", "self", ".", "setup_pwm", "(", "self", ".", "pwm_num", ",", "'1\\n'", ",", "'150\\n'", ",", "'200\\n'", ",", "'0\\n'", ")", "<new_line>", "self", ".", "servo", "=", "s_mod", ".", "Servo", "(", "self", ".", "pwm_num", ")", "<dedent>", "def", "tearDown", "(", "self", ")", ":", "<new_line>", "<indent>", "'Restore testing flag state in config file.'", "<new_line>", "super", "(", "TestPosition", ",", "self", ")", ".", "tearDown", "(", ")", "<dedent>", "def", "test_0", "(", "self", ")", ":", "<new_line>", "<indent>", "'Test setting servo position to max in zero direction.'", "<new_line>", "self", ".", "servo", ".", "position", "=", "0", "<new_line>", "assert", "(", "self", ".", "servo", ".", "position", "==", "0", ")", ",", "self", ".", "servo", ".", "position", "<dedent>", "def", "test_180", "(", "self", ")", ":", "<new_line>", "<indent>", "'Test setting servo position to max in 180 direction.'", "<new_line>", "self", ".", "servo", ".", "position", "=", "180", "<new_line>", "assert", "(", "self", ".", "servo", ".", "position", "==", "180", ")", ",", "self", ".", "servo", ".", "position", "<dedent>", "def", "test_middle", "(", "self", ")", ":", "<new_line>", "<indent>", "'Test the servo at middle position.'", "<new_line>", "self", ".", "servo", ".", "position", "=", "90", "<new_line>", "assert", "(", "self", ".", "servo", ".", "position", "==", "90", ")", ",", "self", ".", "servo", ".", "position", "<dedent>", "def", "test_series", "(", "self", ")", ":", "<new_line>", "<indent>", "'Test a series of positions.'", "<new_line>", "for", "position", "in", "range", "(", "0", ",", "180", ",", "18", ")", ":", "<new_line>", "<indent>", "self", ".", "servo", ".", "position", "=", "position", "<new_line>", "assert", "(", "self", ".", "servo", ".", "position", "==", "position", ")", ",", "self", ".", "servo", ".", "position", "<dedent>", "<dedent>", "def", "test_manually_confirm", "(", "self", ")", ":", "<new_line>", "<indent>", "'Test a series of random positions, read simulated HW to confirm.'", "<new_line>", "for", "i", "in", "range", "(", "10", ")", ":", "<new_line>", "<indent>", "test_pos", "=", "randint", "(", "0", ",", "180", ")", "<new_line>", "self", ".", "servo", ".", "position", "=", "test_pos", "<new_line>", "cur_pwm", "=", "self", ".", "get_pwm", "(", "self", ".", "pwm_num", ")", "<new_line>", "duty", "=", "int", "(", "cur_pwm", "[", "'duty_ns'", "]", ")", "<new_line>", "read_pos", "=", "int", "(", "round", "(", "(", "(", "(", "duty", "-", "580000", ")", "/", "2320000.0", ")", "*", "180", ")", ")", ")", "<new_line>", "assert", "(", "read_pos", "==", "test_pos", ")", ",", "'{} != {}'", ".", "format", "(", "read_pos", ",", "test_pos", ")", "<dedent>", "<dedent>", "def", "test_over_max", "(", "self", ")", ":", "<new_line>", "<indent>", "'Test position over max position. Should use maximum.'", "<new_line>", "self", ".", "servo", ".", "position", "=", "181", "<new_line>", "assert", "(", "self", ".", "servo", ".", "position", "==", "180", ")", ",", "<new_line>", "'Actual: {}'", ".", "format", "(", "self", ".", "servo", ".", "position", ")", "<dedent>", "def", "test_under_min", "(", "self", ")", ":", "<new_line>", "<indent>", "'Test position under minimum position. Should use minimum.'", "<new_line>", "self", ".", "servo", ".", "position", "=", "(", "-", "1", ")", "<new_line>", "assert", "(", "self", ".", "servo", ".", "position", "==", "0", ")", ",", "<new_line>", "'Actual: {}'", ".", "format", "(", "self", ".", "servo", ".", "position", ")", "<dedent>", "<dedent>"], 0]
[["from", "django.contrib.syndication.views", "import", "Feed", "as", "SyndicationFeed", "<new_line>", "from", "django.core.urlresolvers", "import", "reverse", "<new_line>", "from", "django.conf", "import", "settings", "<new_line>", "from", "lifestream.models", "import", "Lifestream", ",", "Item", "<new_line>", "class", "RecentItemsFeed", "(", "SyndicationFeed", ")", ":", "<new_line>", "<indent>", "title", "=", "'Recent Items'", "<new_line>", "description", "=", "'Recent Lifestream Items'", "<new_line>", "def", "link", "(", "self", ",", "obj", ")", ":", "<new_line>", "<indent>", "return", "reverse", "(", "'lifestream_main_page'", ",", "kwargs", "=", "{", "<new_line>", "'lifestream_slug'", ":", "obj", ".", "slug", "}", ")", "<dedent>", "def", "get_object", "(", "self", ",", "bits", ")", ":", "<new_line>", "<indent>", "return", "Lifestream", ".", "objects", ".", "get", "(", "slug", "=", "bits", "[", "0", "]", ")", "<dedent>", "def", "items", "(", "self", ",", "obj", ")", ":", "<new_line>", "<indent>", "return", "Item", ".", "objects", ".", "published", "(", ")", ".", "filter", "(", "feed__lifestream", "=", "<new_line>", "obj", ")", "[", ":", "10", "]", "<dedent>", "def", "item_pubdate", "(", "self", ",", "item", ")", ":", "<new_line>", "<indent>", "return", "item", ".", "date", "<dedent>", "def", "item_categories", "(", "self", ",", "item", ")", ":", "<new_line>", "<indent>", "def", "item_categories", "(", "self", ",", "item", ")", ":", "<new_line>", "<indent>", "if", "(", "'tagging'", "in", "settings", ".", "INSTALLED_APPS", ")", ":", "<new_line>", "<indent>", "return", "[", "tag", ".", "name", "for", "tag", "in", "item", ".", "tag_set", "]", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "[", "]", "<dedent>", "<dedent>", "<dedent>", "<dedent>"], 0]
[["'\\nA decorators related authentication.\\n\\n:Copyright: (c) 2009 Accense Technology, Inc.,\\n                     Ian Lewis <IanMLewis@gmail.com>\\n                     All rights reserved.\\n:license: BSD, see LICENSE for more details.\\n'", "<new_line>", "from", "functools", "import", "update_wrapper", "<new_line>", "from", "google.appengine.api", "import", "users", "<new_line>", "from", "werkzeug", "import", "redirect", "<new_line>", "from", "werkzeug.exceptions", "import", "Forbidden", "<new_line>", "from", "kay.utils", "import", "create_login_url", ",", "create_logout_url", "<new_line>", "from", "kay.utils.decorators", "import", "auto_adapt_to_methods", "<new_line>", "def", "login_required", "(", "func", ")", ":", "<new_line>", "<indent>", "def", "inner", "(", "request", ",", "*", "args", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "if", "request", ".", "user", ".", "is_anonymous", "(", ")", ":", "<new_line>", "<indent>", "if", "request", ".", "is_xhr", ":", "<new_line>", "<indent>", "return", "Forbidden", "(", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "return", "redirect", "(", "create_login_url", "(", "request", ".", "url", ")", ")", "<dedent>", "<dedent>", "return", "func", "(", "request", ",", "*", "args", ",", "**", "kwargs", ")", "<dedent>", "update_wrapper", "(", "inner", ",", "func", ")", "<new_line>", "return", "inner", "<dedent>", "login_required", "=", "auto_adapt_to_methods", "(", "login_required", ")", "<new_line>", "def", "admin_required", "(", "func", ")", ":", "<new_line>", "<indent>", "def", "inner", "(", "request", ",", "*", "args", ",", "**", "kwargs", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "request", ".", "user", ".", "is_admin", ")", ":", "<new_line>", "<indent>", "if", "request", ".", "user", ".", "is_anonymous", "(", ")", ":", "<new_line>", "<indent>", "return", "redirect", "(", "create_login_url", "(", "request", ".", "url", ")", ")", "<dedent>", "else", ":", "<new_line>", "<indent>", "raise", "Forbidden", "(", "description", "=", "<new_line>", "(", "'<p>You don\\'t have the permission to access the requested resource. It is either read-protected or not readable by the server.</p> Maybe you want <a href=\"%s\">logout</a>?'", "%", "<new_line>", "create_logout_url", "(", "request", ".", "url", ")", ")", ")", "<dedent>", "<dedent>", "return", "func", "(", "request", ",", "*", "args", ",", "**", "kwargs", ")", "<dedent>", "update_wrapper", "(", "inner", ",", "func", ")", "<new_line>", "return", "inner", "<dedent>", "admin_required", "=", "auto_adapt_to_methods", "(", "admin_required", ")"], 0]
[["'\\n    jinja2.tests\\n    ~~~~~~~~~~~~\\n\\n    Jinja test functions. Used with the \"is\" operator.\\n\\n    :copyright: (c) 2010 by the Jinja Team.\\n    :license: BSD, see LICENSE for more details.\\n'", "<new_line>", "import", "re", "<new_line>", "from", "jinja2.runtime", "import", "Undefined", "<new_line>", "__test__", "=", "False", "<new_line>", "number_re", "=", "re", ".", "compile", "(", "'^-?\\\\d+(\\\\.\\\\d+)?$'", ")", "<new_line>", "regex_type", "=", "type", "(", "number_re", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "test_callable", "=", "callable", "<dedent>", "except", "NameError", ":", "<new_line>", "<indent>", "def", "test_callable", "(", "x", ")", ":", "<new_line>", "<indent>", "return", "hasattr", "(", "x", ",", "'__call__'", ")", "<dedent>", "<dedent>", "def", "test_odd", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is odd.'", "<new_line>", "return", "(", "(", "value", "%", "2", ")", "==", "1", ")", "<dedent>", "def", "test_even", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is even.'", "<new_line>", "return", "(", "(", "value", "%", "2", ")", "==", "0", ")", "<dedent>", "def", "test_divisibleby", "(", "value", ",", "num", ")", ":", "<new_line>", "<indent>", "'Check if a variable is divisible by a number.'", "<new_line>", "return", "(", "(", "value", "%", "num", ")", "==", "0", ")", "<dedent>", "def", "test_defined", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is defined:\\n\\n    .. sourcecode:: jinja\\n\\n        {% if variable is defined %}\\n            value of variable: {{ variable }}\\n        {% else %}\\n            variable is not defined\\n        {% endif %}\\n\\n    See the :func:`default` filter for a simple way to set undefined\\n    variables.\\n    '", "<new_line>", "return", "(", "not", "isinstance", "(", "value", ",", "Undefined", ")", ")", "<dedent>", "def", "test_undefined", "(", "value", ")", ":", "<new_line>", "<indent>", "'Like :func:`defined` but the other way round.'", "<new_line>", "return", "isinstance", "(", "value", ",", "Undefined", ")", "<dedent>", "def", "test_none", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is none.'", "<new_line>", "return", "(", "value", "is", "None", ")", "<dedent>", "def", "test_lower", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is lowercased.'", "<new_line>", "return", "unicode", "(", "value", ")", ".", "islower", "(", ")", "<dedent>", "def", "test_upper", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is uppercased.'", "<new_line>", "return", "unicode", "(", "value", ")", ".", "isupper", "(", ")", "<dedent>", "def", "test_string", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the object is a string.'", "<new_line>", "return", "isinstance", "(", "value", ",", "basestring", ")", "<dedent>", "def", "test_number", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is a number.'", "<new_line>", "return", "isinstance", "(", "value", ",", "(", "int", ",", "long", ",", "float", ",", "complex", ")", ")", "<dedent>", "def", "test_sequence", "(", "value", ")", ":", "<new_line>", "<indent>", "'Return true if the variable is a sequence. Sequences are variables\\n    that are iterable.\\n    '", "<new_line>", "try", ":", "<new_line>", "<indent>", "len", "(", "value", ")", "<new_line>", "value", ".", "__getitem__", "<dedent>", "except", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "return", "True", "<dedent>", "def", "test_sameas", "(", "value", ",", "other", ")", ":", "<new_line>", "<indent>", "'Check if an object points to the same memory address than another\\n    object:\\n\\n    .. sourcecode:: jinja\\n\\n        {% if foo.attribute is sameas false %}\\n            the foo attribute really is the `False` singleton\\n        {% endif %}\\n    '", "<new_line>", "return", "(", "value", "is", "other", ")", "<dedent>", "def", "test_iterable", "(", "value", ")", ":", "<new_line>", "<indent>", "\"Check if it's possible to iterate over an object.\"", "<new_line>", "try", ":", "<new_line>", "<indent>", "iter", "(", "value", ")", "<dedent>", "except", "TypeError", ":", "<new_line>", "<indent>", "return", "False", "<dedent>", "return", "True", "<dedent>", "def", "test_escaped", "(", "value", ")", ":", "<new_line>", "<indent>", "'Check if the value is escaped.'", "<new_line>", "return", "hasattr", "(", "value", ",", "'__html__'", ")", "<dedent>", "TESTS", "=", "{", "<new_line>", "'odd'", ":", "test_odd", ",", "<new_line>", "'even'", ":", "test_even", ",", "<new_line>", "'divisibleby'", ":", "test_divisibleby", ",", "<new_line>", "'defined'", ":", "test_defined", ",", "<new_line>", "'undefined'", ":", "test_undefined", ",", "<new_line>", "'none'", ":", "test_none", ",", "<new_line>", "'lower'", ":", "test_lower", ",", "<new_line>", "'upper'", ":", "test_upper", ",", "<new_line>", "'string'", ":", "test_string", ",", "<new_line>", "'number'", ":", "test_number", ",", "<new_line>", "'sequence'", ":", "test_sequence", ",", "<new_line>", "'iterable'", ":", "test_iterable", ",", "<new_line>", "'callable'", ":", "test_callable", ",", "<new_line>", "'sameas'", ":", "test_sameas", ",", "<new_line>", "'escaped'", ":", "test_escaped", "}"], 0]
[["'\\nKay registration urls.\\n\\n:Copyright: (c) 2009 Takashi Matsuo <tmatsuo@candit.jp> All rights reserved.\\n:license: BSD, see LICENSE for more details.\\n'", "<new_line>", "from", "kay.routing", "import", "ViewGroup", ",", "Rule", "<new_line>", "view_groups", "=", "[", "<new_line>", "ViewGroup", "(", "<new_line>", "Rule", "(", "'/activate/<activation_key>'", ",", "endpoint", "=", "'activate'", ",", "view", "=", "<new_line>", "(", "'kay.registration.views.ActivateHandler'", ",", "(", ")", ",", "{", "}", ")", ")", ",", "<new_line>", "Rule", "(", "'/register'", ",", "endpoint", "=", "'register'", ",", "view", "=", "<new_line>", "(", "'kay.registration.views.RegisterHandler'", ",", "(", ")", ",", "{", "}", ")", ")", ",", "<new_line>", "Rule", "(", "'/registration_complete'", ",", "endpoint", "=", "'registration_complete'", ",", "view", "=", "<new_line>", "'kay.registration.views.registration_complete'", ")", ")", "]"], 0]
[["'\\nModels for Kay tests.\\n\\n:Copyright: (c) 2009 Accense Technology, Inc. All rights reserved.\\n:license: BSD, see LICENSE for more details.\\n'", "<new_line>", "from", "google.appengine.ext", "import", "db", "<new_line>", "from", "kay.utils.forms", "import", "ValidationError", "<new_line>", "from", "kay.utils.forms.modelform", "import", "ModelForm", "<new_line>", "class", "MaxLengthValidator", "(", "object", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "length", ")", ":", "<new_line>", "<indent>", "self", ".", "length", "=", "length", "<dedent>", "def", "__call__", "(", "self", ",", "val", ")", ":", "<new_line>", "<indent>", "if", "(", "len", "(", "val", ")", ">", "self", ".", "length", ")", ":", "<new_line>", "<indent>", "raise", "ValidationError", "(", "'Too long'", ")", "<dedent>", "return", "True", "<dedent>", "<dedent>", "class", "TestModel", "(", "db", ".", "Model", ")", ":", "<new_line>", "<indent>", "number", "=", "db", ".", "IntegerProperty", "(", "required", "=", "True", ")", "<new_line>", "data_field", "=", "db", ".", "StringProperty", "(", "required", "=", "True", ",", "validator", "=", "<new_line>", "MaxLengthValidator", "(", "20", ")", ")", "<new_line>", "is_active", "=", "db", ".", "BooleanProperty", "(", "required", "=", "True", ")", "<new_line>", "string_list_field", "=", "db", ".", "StringListProperty", "(", "required", "=", "True", ")", "<dedent>", "class", "TestModel2", "(", "db", ".", "Model", ")", ":", "<new_line>", "<indent>", "number", "=", "db", ".", "IntegerProperty", "(", "required", "=", "True", ")", "<new_line>", "data_field", "=", "db", ".", "StringProperty", "(", "required", "=", "True", ",", "validator", "=", "<new_line>", "MaxLengthValidator", "(", "20", ")", ")", "<new_line>", "is_active", "=", "db", ".", "BooleanProperty", "(", "required", "=", "True", ")", "<new_line>", "string_list_field", "=", "db", ".", "StringListProperty", "(", "required", "=", "True", ")", "<dedent>", "class", "TestModelForm", "(", "ModelForm", ")", ":", "<new_line>", "<indent>", "csrf_protected", "=", "False", "<new_line>", "class", "Meta", "(", ")", ":", "<new_line>", "<indent>", "model", "=", "TestModel", "<dedent>", "def", "__init__", "(", "self", ",", "instance", "=", "None", ",", "initial", "=", "None", ")", ":", "<new_line>", "<indent>", "super", "(", "TestModelForm", ",", "self", ")", ".", "__init__", "(", "instance", ",", "initial", ")", "<new_line>", "self", ".", "string_list_field", ".", "min_size", "=", "1", "<dedent>", "<dedent>", "class", "JsonTestModel", "(", "db", ".", "Model", ")", ":", "<new_line>", "<indent>", "s", "=", "db", ".", "StringProperty", "(", ")", "<new_line>", "i", "=", "db", ".", "IntegerProperty", "(", ")", "<new_line>", "b", "=", "db", ".", "BooleanProperty", "(", ")", "<new_line>", "l", "=", "db", ".", "StringListProperty", "(", ")", "<new_line>", "r", "=", "db", ".", "ReferenceProperty", "(", ")", "<dedent>", "class", "ModelFormTestModel", "(", "db", ".", "Model", ")", ":", "<new_line>", "<indent>", "s_name", "=", "db", ".", "StringProperty", "(", ")", "<new_line>", "zip_code", "=", "db", ".", "StringProperty", "(", ")", "<new_line>", "addr", "=", "db", ".", "StringProperty", "(", ")", "<dedent>", "class", "ModelFormTestForm", "(", "ModelForm", ")", ":", "<new_line>", "<indent>", "csrf_protected", "=", "False", "<new_line>", "class", "Meta", "(", ")", ":", "<new_line>", "<indent>", "model", "=", "ModelFormTestModel", "<new_line>", "fields", "=", "'s_name'", "<dedent>", "<dedent>", "class", "ValidationTestModel", "(", "db", ".", "Model", ")", ":", "<new_line>", "<indent>", "slist", "=", "db", ".", "StringListProperty", "(", ")", "<dedent>", "class", "ValidationTestForm", "(", "ModelForm", ")", ":", "<new_line>", "<indent>", "csrf_protected", "=", "False", "<new_line>", "class", "Meta", "(", ")", ":", "<new_line>", "<indent>", "model", "=", "ValidationTestModel", "<dedent>", "def", "context_validate", "(", "self", ",", "data", ")", ":", "<new_line>", "<indent>", "raise", "ValidationError", "(", "'Error!'", ")", "<dedent>", "<dedent>"], 0]
[["'\\nProblem Autogeneration Handler\\n'", "<new_line>", "import", "api", "<new_line>", "import", "random", "<new_line>", "import", "imp", "<new_line>", "import", "shutil", "<new_line>", "import", "os", "<new_line>", "from", "os", "import", "path", "<new_line>", "from", "functools", "import", "partial", "<new_line>", "from", "bson", "import", "json_util", "<new_line>", "from", "api.common", "import", "InternalException", ",", "SevereInternalException", "<new_line>", "log", "=", "api", ".", "logger", ".", "use", "(", "__name__", ")", "<new_line>", "modifiable_problem_fields", "=", "[", "'description'", "]", "<new_line>", "seed", "=", "''", "<new_line>", "def", "is_autogen_problem", "(", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Determines whether or not a problem is autogenerated.\\n\\n    Arg:\\n        pid: the problem id\\n    Returns:\\n        True or False whether or not the problem is autogenerated.\\n    '", "<new_line>", "return", "api", ".", "problem", ".", "get_problem", "(", "pid", "=", "pid", ")", ".", "get", "(", "'autogen'", ",", "False", ")", "<dedent>", "def", "get_metadata_path", "(", "pid", ",", "n", ")", ":", "<new_line>", "<indent>", "'\\n    Retrieve the path to the metadata file for a given problem instance.\\n\\n    Args:\\n        pid: the problem id\\n        n: the instance number\\n    Returns:\\n        The metadata file path.\\n    '", "<new_line>", "return", "path", ".", "join", "(", "get_instance_path", "(", "pid", ",", "n", "=", "n", ",", "public", "=", "False", ")", ",", "'metadata.json'", ")", "<dedent>", "def", "write_metadata", "(", "pid", ",", "n", ",", "data", ")", ":", "<new_line>", "<indent>", "\"\\n    Write an autogenerated problem's instance metadata.\\n    This includes any fields to be overwritten from\\n    the original problem object.\\n\\n    Args:\\n        pid: the problem id\\n        n: the instance number\\n        data: the metadata object\\n    \"", "<new_line>", "metadata_path", "=", "get_metadata_path", "(", "pid", ",", "n", ")", "<new_line>", "with", "open", "(", "metadata_path", ",", "'w'", ")", "as", "f", ":", "<new_line>", "<indent>", "f", ".", "write", "(", "json_util", ".", "dumps", "(", "data", ")", ")", "<dedent>", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "read_metadata", "(", "<new_line>", "pid", ",", "n", ")", ":", "<new_line>", "<indent>", "'\\n    Reads the metadata object for a given problem instance.\\n\\n    Args:\\n        pid: the problem id\\n        n: the problem instance\\n    Returns:\\n        The metadata object\\n    '", "<new_line>", "metadata_path", "=", "get_metadata_path", "(", "pid", ",", "n", ")", "<new_line>", "with", "open", "(", "metadata_path", ",", "'r'", ")", "as", "f", ":", "<new_line>", "<indent>", "return", "json_util", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "<dedent>", "<dedent>", "def", "build_problem_instances", "(", "pid", ",", "instances", ")", ":", "<new_line>", "<indent>", "'\\n    Build instances of an autogenerated problem.\\n    Required pre-competition operation for autogenerated problems\\n    to function correctly.\\n\\n    Args:\\n        pid: the problem pid\\n        instances: the number of instances to build\\n    '", "<new_line>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", "=", "pid", ")", "<new_line>", "if", "(", "not", "is_autogen_problem", "(", "pid", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'{} is not flagged as an autogenerated problem.'", ".", "format", "(", "problem", "[", "'name'", "]", ")", ")", "<dedent>", "previous_state", "=", "seed_generator", "(", "'INIT'", ",", "pid", ")", "<new_line>", "(", "instance_path", ",", "static_instance_path", ")", "=", "(", "get_instance_path", "(", "pid", ")", ",", "get_static_instance_path", "(", "pid", ")", ")", "<new_line>", "for", "autogen_path", "in", "[", "instance_path", ",", "static_instance_path", "]", ":", "<new_line>", "<indent>", "log", ".", "debug", "(", "\"Checking for existence of '%s'...\"", ",", "autogen_path", ")", "<new_line>", "if", "(", "not", "path", ".", "isdir", "(", "autogen_path", ")", ")", ":", "<new_line>", "<indent>", "log", ".", "debug", "(", "'Created directory.'", ")", "<new_line>", "os", ".", "makedirs", "(", "autogen_path", ")", "<dedent>", "<dedent>", "for", "n", "in", "range", "(", "instances", ")", ":", "<new_line>", "<indent>", "log", ".", "debug", "(", "'generating -> %s -> %s'", ",", "problem", "[", "'name'", "]", ",", "str", "(", "n", ")", ")", "<new_line>", "build", "=", "get_generator", "(", "pid", ")", ".", "generate", "(", "random", ",", "pid", ",", "api", ".", "autogen_tools", ",", "n", ")", "<new_line>", "autogen_instance_path", "=", "get_instance_path", "(", "pid", ",", "n", "=", "n", ")", "<new_line>", "file_type_paths", "=", "{", "<new_line>", "'resource_files'", ":", "{", "<new_line>", "'public'", ":", "get_instance_path", "(", "pid", ",", "n", "=", "n", ",", "public", "=", "True", ")", ",", "<new_line>", "'private'", ":", "get_instance_path", "(", "pid", ",", "n", "=", "n", ",", "public", "=", "False", ")", "}", ",", "<new_line>", "'static_files'", ":", "{", "<new_line>", "'public'", ":", "get_static_instance_path", "(", "pid", ",", "public", "=", "True", ")", ",", "<new_line>", "'private'", ":", "get_static_instance_path", "(", "pid", ",", "public", "=", "False", ")", "}", "}", "<new_line>", "for", "(", "_", ",", "file_types", ")", "in", "file_type_paths", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "for", "(", "_", ",", "autogen_path", ")", "in", "file_types", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "path", ".", "isdir", "(", "autogen_path", ")", ")", ":", "<new_line>", "<indent>", "os", ".", "makedirs", "(", "autogen_path", ")", "<dedent>", "<dedent>", "<dedent>", "problem_updates", "=", "build", ".", "get", "(", "'problem_updates'", ",", "None", ")", "<new_line>", "if", "(", "problem_updates", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Generator {} did not return a problem_update dict.'", ".", "format", "(", "problem", "[", "'generator'", "]", ")", ")", "<dedent>", "write_metadata", "(", "pid", ",", "n", ",", "problem_updates", ")", "<new_line>", "for", "(", "file_type", ",", "listings", ")", "in", "build", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "destination_type", "=", "file_type_paths", ".", "get", "(", "file_type", ",", "None", ")", "<new_line>", "if", "(", "destination_type", "is not", "None", ")", ":", "<new_line>", "<indent>", "for", "listing", "in", "listings", ":", "<new_line>", "<indent>", "destination", "=", "destination_type", ".", "get", "(", "listing", ",", "None", ")", "<new_line>", "if", "(", "destination", "is not", "None", ")", ":", "<new_line>", "<indent>", "files", "=", "listings", "[", "listing", "]", "<new_line>", "for", "(", "f", ",", "name", ")", "in", "files", ":", "<new_line>", "<indent>", "if", "path", ".", "isfile", "(", "f", ")", ":", "<new_line>", "<indent>", "shutil", ".", "copyfile", "(", "f", ",", "path", ".", "join", "(", "destination", ",", "name", ")", ")", "<dedent>", "elif", "path", ".", "isdir", "(", "f", ")", ":", "<new_line>", "<indent>", "shutil", ".", "copytree", "(", "f", ",", "autogen_instance_path", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "api", ".", "autogen_tools", ".", "clear_build_directories", "(", ")", "<new_line>", "log", ".", "debug", "(", "'done!'", ")", "<dedent>", "random", ".", "setstate", "(", "previous_state", ")", "<dedent>", "def", "get_generator_path", "(", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets a problem generator path.\\n\\n    Args:\\n        pid: the problem pid\\n    Returns:\\n        The path to the generator.\\n    '", "<new_line>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", "=", "pid", ")", "<new_line>", "if", "(", "not", "is_autogen_problem", "(", "pid", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'This problem is not autogenerated.'", ")", "<dedent>", "if", "(", "not", "problem", ".", "get", "(", "'generator'", ",", "False", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "\"Autogenerated problem '{}' does not have a generator.\"", ".", "format", "(", "problem", "[", "'name'", "]", ")", ")", "<dedent>", "return", "path", ".", "join", "(", "api", ".", "problem", ".", "grader_base_path", ",", "problem", "[", "'generator'", "]", ")", "<dedent>", "def", "get_generator", "(", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets a handle on a problem generator module.\\n\\n    Args:\\n        pid: the problem pid\\n    Returns:\\n        The loaded module\\n    '", "<new_line>", "generator_path", "=", "get_generator_path", "(", "pid", ")", "<new_line>", "if", "(", "not", "path", ".", "isfile", "(", "generator_path", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Could not find {}.'", ".", "format", "(", "generator_path", ")", ")", "<dedent>", "return", "imp", ".", "load_source", "(", "generator_path", "[", ":", "(", "-", "3", ")", "]", ",", "generator_path", ")", "<dedent>", "def", "get_seed", "(", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "\"\\n    Get the random generator seed.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The team's seed.\\n    \"", "<new_line>", "return", "(", "(", "seed", "+", "tid", ")", "+", "pid", ")", "<dedent>", "def", "seed_generator", "(", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "\"\\n    Sets python's random number generator.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The previous state of the random generator\\n    \"", "<new_line>", "previous_state", "=", "random", ".", "getstate", "(", ")", "<new_line>", "random", ".", "seed", "(", "get_seed", "(", "pid", ",", "tid", ")", ")", "<new_line>", "return", "previous_state", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "get_instance_number", "(", "<new_line>", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "'\\n    Maps the token to an instance number for a prolem.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The instance number\\n    '", "<new_line>", "previous_state", "=", "seed_generator", "(", "tid", ",", "pid", ")", "<new_line>", "total_instances", "=", "get_number_of_instances", "(", "pid", ")", "<new_line>", "if", "(", "total_instances", "==", "0", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'{} has no instances.'", ".", "format", "(", "pid", ")", ")", "<dedent>", "instance_number", "="], 0]
[["for", "(", "_", ",", "autogen_path", ")", "in", "file_types", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "path", ".", "isdir", "(", "autogen_path", ")", ")", ":", "<new_line>", "<indent>", "os", ".", "makedirs", "(", "autogen_path", ")", "<dedent>", "<dedent>", "<dedent>", "problem_updates", "=", "build", ".", "get", "(", "'problem_updates'", ",", "None", ")", "<new_line>", "if", "(", "problem_updates", "is", "None", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Generator {} did not return a problem_update dict.'", ".", "format", "(", "problem", "[", "'generator'", "]", ")", ")", "<dedent>", "write_metadata", "(", "pid", ",", "n", ",", "problem_updates", ")", "<new_line>", "for", "(", "file_type", ",", "listings", ")", "in", "build", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "destination_type", "=", "file_type_paths", ".", "get", "(", "file_type", ",", "None", ")", "<new_line>", "if", "(", "destination_type", "is not", "None", ")", ":", "<new_line>", "<indent>", "for", "listing", "in", "listings", ":", "<new_line>", "<indent>", "destination", "=", "destination_type", ".", "get", "(", "listing", ",", "None", ")", "<new_line>", "if", "(", "destination", "is not", "None", ")", ":", "<new_line>", "<indent>", "files", "=", "listings", "[", "listing", "]", "<new_line>", "for", "(", "f", ",", "name", ")", "in", "files", ":", "<new_line>", "<indent>", "if", "path", ".", "isfile", "(", "f", ")", ":", "<new_line>", "<indent>", "shutil", ".", "copyfile", "(", "f", ",", "path", ".", "join", "(", "destination", ",", "name", ")", ")", "<dedent>", "elif", "path", ".", "isdir", "(", "f", ")", ":", "<new_line>", "<indent>", "shutil", ".", "copytree", "(", "f", ",", "autogen_instance_path", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "api", ".", "autogen_tools", ".", "clear_build_directories", "(", ")", "<new_line>", "log", ".", "debug", "(", "'done!'", ")", "<dedent>", "random", ".", "setstate", "(", "previous_state", ")", "<dedent>", "def", "get_generator_path", "(", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets a problem generator path.\\n\\n    Args:\\n        pid: the problem pid\\n    Returns:\\n        The path to the generator.\\n    '", "<new_line>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", "=", "pid", ")", "<new_line>", "if", "(", "not", "is_autogen_problem", "(", "pid", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'This problem is not autogenerated.'", ")", "<dedent>", "if", "(", "not", "problem", ".", "get", "(", "'generator'", ",", "False", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "\"Autogenerated problem '{}' does not have a generator.\"", ".", "format", "(", "problem", "[", "'name'", "]", ")", ")", "<dedent>", "return", "path", ".", "join", "(", "api", ".", "problem", ".", "grader_base_path", ",", "problem", "[", "'generator'", "]", ")", "<dedent>", "def", "get_generator", "(", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets a handle on a problem generator module.\\n\\n    Args:\\n        pid: the problem pid\\n    Returns:\\n        The loaded module\\n    '", "<new_line>", "generator_path", "=", "get_generator_path", "(", "pid", ")", "<new_line>", "if", "(", "not", "path", ".", "isfile", "(", "generator_path", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Could not find {}.'", ".", "format", "(", "generator_path", ")", ")", "<dedent>", "return", "imp", ".", "load_source", "(", "generator_path", "[", ":", "(", "-", "3", ")", "]", ",", "generator_path", ")", "<dedent>", "def", "get_seed", "(", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "\"\\n    Get the random generator seed.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The team's seed.\\n    \"", "<new_line>", "return", "(", "(", "seed", "+", "tid", ")", "+", "pid", ")", "<dedent>", "def", "seed_generator", "(", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "\"\\n    Sets python's random number generator.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The previous state of the random generator\\n    \"", "<new_line>", "previous_state", "=", "random", ".", "getstate", "(", ")", "<new_line>", "random", ".", "seed", "(", "get_seed", "(", "pid", ",", "tid", ")", ")", "<new_line>", "return", "previous_state", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "get_instance_number", "(", "<new_line>", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "'\\n    Maps the token to an instance number for a prolem.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The instance number\\n    '", "<new_line>", "previous_state", "=", "seed_generator", "(", "tid", ",", "pid", ")", "<new_line>", "total_instances", "=", "get_number_of_instances", "(", "pid", ")", "<new_line>", "if", "(", "total_instances", "==", "0", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'{} has no instances.'", ".", "format", "(", "pid", ")", ")", "<dedent>", "instance_number", "=", "random", ".", "randint", "(", "0", ",", "(", "total_instances", "-", "1", ")", ")", "<new_line>", "random", ".", "setstate", "(", "previous_state", ")", "<new_line>", "return", "instance_number", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "get_number_of_instances", "(", "<new_line>", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets the number of active instances of a problem.\\n\\n    Args:\\n        pid: the problem id\\n    Returns:\\n        The number of instances.\\n    '", "<new_line>", "try", ":", "<new_line>", "<indent>", "return", "[", "dirname", ".", "isdigit", "(", ")", "for", "dirname", "in", "os", ".", "listdir", "(", "get_instance_path", "(", "pid", ",", "public", "=", "False", ")", ")", "]", ".", "count", "(", "True", ")", "<dedent>", "except", "FileNotFoundError", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Could not find problem instances.'", ")", "<dedent>", "<dedent>", "def", "get_static_instance_path", "(", "pid", ",", "public", "=", "True", ")", ":", "<new_line>", "<indent>", "'\\n    Gets the path to the static resources of a problem.\\n\\n    Args:\\n        pid: the problem id\\n    Returns:\\n        The path to the static resources of an autogen problem.\\n    '", "<new_line>", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "get_instance_path", "(", "pid", ",", "public", "=", "public", ")", ",", "'static'", ")", ")", "<dedent>", "def", "get_instance_path", "(", "pid", ",", "n", "=", "''", ",", "public", "=", "True", ")", ":", "<new_line>", "<indent>", "'\\n    Gets the path to a particular instance of a problem.\\n\\n    Args:\\n        pid: the problem id\\n        n: the instance number, defaults to base of instances\\n    Returns:\\n        The path to the particular instance.\\n    '", "<new_line>", "generator_path", "=", "get_generator_path", "(", "pid", ")", "<new_line>", "name", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", ")", "[", "'name'", "]", "<new_line>", "instance_path", "=", "path", ".", "join", "(", "path", ".", "dirname", "(", "generator_path", ")", ",", "'instances'", ",", "name", ",", "str", "(", "n", ")", ")", "<new_line>", "if", "public", ":", "<new_line>", "<indent>", "instance_path", "=", "path", ".", "join", "(", "instance_path", ",", "'public'", ")", "<dedent>", "return", "path", ".", "abspath", "(", "instance_path", ")", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "get_problem_instance", "(", "<new_line>", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "'\\n    Returns an instance of the autogenerated problem.\\n\\n    Args:\\n        problem: the problem document\\n        tid: the tid\\n    Returns:\\n        An instance of the problem object.\\n    '", "<new_line>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", "=", "pid", ")", "<new_line>", "n", "=", "get_instance_number", "(", "pid", ",", "tid", ")", "<new_line>", "metadata", "=", "read_metadata", "(", "pid", ",", "n", ")", "<new_line>", "if", "(", "not", "set", "(", "metadata", ")", ".", "issubset", "(", "modifiable_problem_fields", ")", ")", ":", "<new_line>", "<indent>", "invalid_keys", "=", "set", "(", "metadata", ")", ".", "difference", "(", "modifiable_problem_fields", ")", "<new_line>", "raise", "InternalException", "(", "\"{}'s instance attempted to modify these fields: {}\"", ".", "format", "(", "pid", ",", "invalid_keys", ")", ")", "<dedent>", "problem", ".", "update", "(", "metadata", ")", "<new_line>", "return", "problem", "<dedent>", "def", "grade_problem_instance", "(", "pid", ",", "tid", ",", "key", ")", ":", "<new_line>", "<indent>", "\"\\n    Grades an autogenerated problem. This will invoke\\n    the particular grader for the instance the team is mapped to.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n        key: the team's attempted solution\\n    Returns:\\n        A dict.\\n        correct: boolean\\n        points: number of points the problem is worth\\n        message: a message to be returned to the user\\n    \"", "<new_line>", "if", "(", "not", "is_autogen_problem", "(", "pid", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Problem is not autogenerated! {}'", ".", "format", "(", "pid", ")", ")", "<dedent>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", ")", "<new_line>", "n", "=", "get_instance_number", "(", "pid", ",", "tid", ")", "<new_line>", "grader_problem_instance", "=", "GraderProblemInstance", "(", "pid", ",", "tid", ",", "n", ")", "<new_line>", "grader", "=", "api", ".", "problem", ".", "get_grader", "(", "pid", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "(", "correct", ",", "message", ")", "=", "grader", ".", "grade", "(", "grader_problem_instance", ",", "key", ")", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "raise", "SevereInternalException", "(", "'Grader for {} is throwing exceptions.\\n{}'", ".", "format", "(", "pid", ",", "str", "(", "e", ")", ")", ")", "<dedent>", "return", "{", "<new_line>", "'correct'", ":", "correct", ",", "<new_line>", "'points'", ":", "problem", "[", "'score'", "]", ",", "<new_line>", "'message'", ":", "message", "}", "<dedent>", "class", "GraderProblemInstance", "(", "object", ")", ":", "<new_line>", "<indent>", "'\\n    Represents the instances of an autogenerated problem.\\n    '", "<new_line>", "def", "__init__", "(", "self", ",", "pid", ",", "tid", ",", "n", ")", ":", "<new_line>", "<indent>", "self", ".", "instance", "=", "n", "<new_line>", "self", "."], 500]
[["is", "None", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Generator {} did not return a problem_update dict.'", ".", "format", "(", "problem", "[", "'generator'", "]", ")", ")", "<dedent>", "write_metadata", "(", "pid", ",", "n", ",", "problem_updates", ")", "<new_line>", "for", "(", "file_type", ",", "listings", ")", "in", "build", ".", "items", "(", ")", ":", "<new_line>", "<indent>", "destination_type", "=", "file_type_paths", ".", "get", "(", "file_type", ",", "None", ")", "<new_line>", "if", "(", "destination_type", "is not", "None", ")", ":", "<new_line>", "<indent>", "for", "listing", "in", "listings", ":", "<new_line>", "<indent>", "destination", "=", "destination_type", ".", "get", "(", "listing", ",", "None", ")", "<new_line>", "if", "(", "destination", "is not", "None", ")", ":", "<new_line>", "<indent>", "files", "=", "listings", "[", "listing", "]", "<new_line>", "for", "(", "f", ",", "name", ")", "in", "files", ":", "<new_line>", "<indent>", "if", "path", ".", "isfile", "(", "f", ")", ":", "<new_line>", "<indent>", "shutil", ".", "copyfile", "(", "f", ",", "path", ".", "join", "(", "destination", ",", "name", ")", ")", "<dedent>", "elif", "path", ".", "isdir", "(", "f", ")", ":", "<new_line>", "<indent>", "shutil", ".", "copytree", "(", "f", ",", "autogen_instance_path", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "api", ".", "autogen_tools", ".", "clear_build_directories", "(", ")", "<new_line>", "log", ".", "debug", "(", "'done!'", ")", "<dedent>", "random", ".", "setstate", "(", "previous_state", ")", "<dedent>", "def", "get_generator_path", "(", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets a problem generator path.\\n\\n    Args:\\n        pid: the problem pid\\n    Returns:\\n        The path to the generator.\\n    '", "<new_line>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", "=", "pid", ")", "<new_line>", "if", "(", "not", "is_autogen_problem", "(", "pid", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'This problem is not autogenerated.'", ")", "<dedent>", "if", "(", "not", "problem", ".", "get", "(", "'generator'", ",", "False", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "\"Autogenerated problem '{}' does not have a generator.\"", ".", "format", "(", "problem", "[", "'name'", "]", ")", ")", "<dedent>", "return", "path", ".", "join", "(", "api", ".", "problem", ".", "grader_base_path", ",", "problem", "[", "'generator'", "]", ")", "<dedent>", "def", "get_generator", "(", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets a handle on a problem generator module.\\n\\n    Args:\\n        pid: the problem pid\\n    Returns:\\n        The loaded module\\n    '", "<new_line>", "generator_path", "=", "get_generator_path", "(", "pid", ")", "<new_line>", "if", "(", "not", "path", ".", "isfile", "(", "generator_path", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Could not find {}.'", ".", "format", "(", "generator_path", ")", ")", "<dedent>", "return", "imp", ".", "load_source", "(", "generator_path", "[", ":", "(", "-", "3", ")", "]", ",", "generator_path", ")", "<dedent>", "def", "get_seed", "(", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "\"\\n    Get the random generator seed.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The team's seed.\\n    \"", "<new_line>", "return", "(", "(", "seed", "+", "tid", ")", "+", "pid", ")", "<dedent>", "def", "seed_generator", "(", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "\"\\n    Sets python's random number generator.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The previous state of the random generator\\n    \"", "<new_line>", "previous_state", "=", "random", ".", "getstate", "(", ")", "<new_line>", "random", ".", "seed", "(", "get_seed", "(", "pid", ",", "tid", ")", ")", "<new_line>", "return", "previous_state", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "get_instance_number", "(", "<new_line>", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "'\\n    Maps the token to an instance number for a prolem.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n    Returns:\\n        The instance number\\n    '", "<new_line>", "previous_state", "=", "seed_generator", "(", "tid", ",", "pid", ")", "<new_line>", "total_instances", "=", "get_number_of_instances", "(", "pid", ")", "<new_line>", "if", "(", "total_instances", "==", "0", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'{} has no instances.'", ".", "format", "(", "pid", ")", ")", "<dedent>", "instance_number", "=", "random", ".", "randint", "(", "0", ",", "(", "total_instances", "-", "1", ")", ")", "<new_line>", "random", ".", "setstate", "(", "previous_state", ")", "<new_line>", "return", "instance_number", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "get_number_of_instances", "(", "<new_line>", "pid", ")", ":", "<new_line>", "<indent>", "'\\n    Gets the number of active instances of a problem.\\n\\n    Args:\\n        pid: the problem id\\n    Returns:\\n        The number of instances.\\n    '", "<new_line>", "try", ":", "<new_line>", "<indent>", "return", "[", "dirname", ".", "isdigit", "(", ")", "for", "dirname", "in", "os", ".", "listdir", "(", "get_instance_path", "(", "pid", ",", "public", "=", "False", ")", ")", "]", ".", "count", "(", "True", ")", "<dedent>", "except", "FileNotFoundError", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Could not find problem instances.'", ")", "<dedent>", "<dedent>", "def", "get_static_instance_path", "(", "pid", ",", "public", "=", "True", ")", ":", "<new_line>", "<indent>", "'\\n    Gets the path to the static resources of a problem.\\n\\n    Args:\\n        pid: the problem id\\n    Returns:\\n        The path to the static resources of an autogen problem.\\n    '", "<new_line>", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "get_instance_path", "(", "pid", ",", "public", "=", "public", ")", ",", "'static'", ")", ")", "<dedent>", "def", "get_instance_path", "(", "pid", ",", "n", "=", "''", ",", "public", "=", "True", ")", ":", "<new_line>", "<indent>", "'\\n    Gets the path to a particular instance of a problem.\\n\\n    Args:\\n        pid: the problem id\\n        n: the instance number, defaults to base of instances\\n    Returns:\\n        The path to the particular instance.\\n    '", "<new_line>", "generator_path", "=", "get_generator_path", "(", "pid", ")", "<new_line>", "name", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", ")", "[", "'name'", "]", "<new_line>", "instance_path", "=", "path", ".", "join", "(", "path", ".", "dirname", "(", "generator_path", ")", ",", "'instances'", ",", "name", ",", "str", "(", "n", ")", ")", "<new_line>", "if", "public", ":", "<new_line>", "<indent>", "instance_path", "=", "path", ".", "join", "(", "instance_path", ",", "'public'", ")", "<dedent>", "return", "path", ".", "abspath", "(", "instance_path", ")", "<dedent>", "@", "api", ".", "cache", ".", "memoize", "(", "timeout", "=", "120", ",", "fast", "=", "True", ")", "def", "get_problem_instance", "(", "<new_line>", "pid", ",", "tid", ")", ":", "<new_line>", "<indent>", "'\\n    Returns an instance of the autogenerated problem.\\n\\n    Args:\\n        problem: the problem document\\n        tid: the tid\\n    Returns:\\n        An instance of the problem object.\\n    '", "<new_line>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", "=", "pid", ")", "<new_line>", "n", "=", "get_instance_number", "(", "pid", ",", "tid", ")", "<new_line>", "metadata", "=", "read_metadata", "(", "pid", ",", "n", ")", "<new_line>", "if", "(", "not", "set", "(", "metadata", ")", ".", "issubset", "(", "modifiable_problem_fields", ")", ")", ":", "<new_line>", "<indent>", "invalid_keys", "=", "set", "(", "metadata", ")", ".", "difference", "(", "modifiable_problem_fields", ")", "<new_line>", "raise", "InternalException", "(", "\"{}'s instance attempted to modify these fields: {}\"", ".", "format", "(", "pid", ",", "invalid_keys", ")", ")", "<dedent>", "problem", ".", "update", "(", "metadata", ")", "<new_line>", "return", "problem", "<dedent>", "def", "grade_problem_instance", "(", "pid", ",", "tid", ",", "key", ")", ":", "<new_line>", "<indent>", "\"\\n    Grades an autogenerated problem. This will invoke\\n    the particular grader for the instance the team is mapped to.\\n\\n    Args:\\n        pid: the problem id\\n        tid: the team id\\n        key: the team's attempted solution\\n    Returns:\\n        A dict.\\n        correct: boolean\\n        points: number of points the problem is worth\\n        message: a message to be returned to the user\\n    \"", "<new_line>", "if", "(", "not", "is_autogen_problem", "(", "pid", ")", ")", ":", "<new_line>", "<indent>", "raise", "InternalException", "(", "'Problem is not autogenerated! {}'", ".", "format", "(", "pid", ")", ")", "<dedent>", "problem", "=", "api", ".", "problem", ".", "get_problem", "(", "pid", ")", "<new_line>", "n", "=", "get_instance_number", "(", "pid", ",", "tid", ")", "<new_line>", "grader_problem_instance", "=", "GraderProblemInstance", "(", "pid", ",", "tid", ",", "n", ")", "<new_line>", "grader", "=", "api", ".", "problem", ".", "get_grader", "(", "pid", ")", "<new_line>", "try", ":", "<new_line>", "<indent>", "(", "correct", ",", "message", ")", "=", "grader", ".", "grade", "(", "grader_problem_instance", ",", "key", ")", "<dedent>", "except", "Exception", "as", "e", ":", "<new_line>", "<indent>", "raise", "SevereInternalException", "(", "'Grader for {} is throwing exceptions.\\n{}'", ".", "format", "(", "pid", ",", "str", "(", "e", ")", ")", ")", "<dedent>", "return", "{", "<new_line>", "'correct'", ":", "correct", ",", "<new_line>", "'points'", ":", "problem", "[", "'score'", "]", ",", "<new_line>", "'message'", ":", "message", "}", "<dedent>", "class", "GraderProblemInstance", "(", "object", ")", ":", "<new_line>", "<indent>", "'\\n    Represents the instances of an autogenerated problem.\\n    '", "<new_line>", "def", "__init__", "(", "self", ",", "pid", ",", "tid", ",", "n", ")", ":", "<new_line>", "<indent>", "self", ".", "instance", "=", "n", "<new_line>", "self", ".", "get_instance_path", "=", "partial", "(", "get_instance_path", ",", "pid", ",", "n", "=", "n", ")", "<new_line>", "self", ".", "seed_generator", "=", "partial", "(", "seed_generator", ",", "pid", ",", "tid", ")", "<new_line>", "self", ".", "write_metadata", "=", "partial", "(", "write_metadata", ",", "pid", ",", "n", ")", "<new_line>", "self", ".", "read_metadata", "=", "partial", "(", "read_metadata", ",", "pid", ")", "<dedent>", "<dedent>"], 949]
[["'\\nGenerator example.\\n'", "<new_line>", "def", "generate", "(", "random", ",", "pid", ",", "tools", ",", "n", ")", ":", "<new_line>", "<indent>", "'\\n    Generate an instance of the problem\\n\\n    Needs to return a list of files to copy to particular instance.\\n    '", "<new_line>", "f", "=", "open", "(", "'/tmp/key'", ",", "'w'", ")", "<new_line>", "k", "=", "str", "(", "random", ".", "randint", "(", "0", ",", "1000", ")", ")", "<new_line>", "f", ".", "write", "(", "k", ")", "<new_line>", "f", ".", "close", "(", ")", "<new_line>", "return", "{", "<new_line>", "'resource_files'", ":", "{", "<new_line>", "'public'", ":", "[", "(", "'/tmp/key'", ",", "'public_key'", ")", "]", ",", "<new_line>", "'private'", ":", "[", "(", "'/tmp/key'", ",", "'private_key'", ")", "]", "}", ",", "<new_line>", "'static_files'", ":", "{", "<new_line>", "'public'", ":", "[", "(", "'/tmp/key'", ",", "'public_static'", ")", "]", ",", "<new_line>", "'private'", ":", "[", "(", "'/tmp/key'", ",", "'private_static'", ")", "]", "}", ",", "<new_line>", "'problem_updates'", ":", "{", "<new_line>", "'description'", ":", "(", "(", "'The answer is not '", "+", "k", ")", "+", "'. ;)'", ")", "}", "}", "<dedent>"], 0]
[["import", "IECore", "<new_line>", "import", "GafferUI", "<new_line>", "import", "GafferScene", "<new_line>", "import", "GafferSceneUI", "<new_line>", "import", "os", "<new_line>", "scriptNode", "=", "script", "<new_line>", "scriptWindow", "=", "GafferUI", ".", "ScriptWindow", ".", "acquire", "(", "script", ")", "<new_line>", "layout", "=", "eval", "(", "\"GafferUI.CompoundEditor( scriptNode, children = ( GafferUI.SplitContainer.Orientation.Horizontal, 0.495974, ( ( GafferUI.SplitContainer.Orientation.Vertical, 0.529083, ( {'tabs': (GafferUI.Viewer( scriptNode ),), 'tabsVisible': True, 'currentTab': 0, 'pinned': [False]}, ( GafferUI.SplitContainer.Orientation.Vertical, 0.918072, ( {'tabs': (GafferUI.NodeGraph( scriptNode ),), 'tabsVisible': True, 'currentTab': 0, 'pinned': [None]}, {'tabs': (GafferUI.Timeline( scriptNode ),), 'tabsVisible': False, 'currentTab': 0, 'pinned': [None]} ) ) ) ), ( GafferUI.SplitContainer.Orientation.Horizontal, 0.494105, ( ( GafferUI.SplitContainer.Orientation.Vertical, 0.651007, ( {'tabs': (GafferUI.NodeEditor( scriptNode ),), 'tabsVisible': True, 'currentTab': 0, 'pinned': [False]}, {'tabs': (GafferSceneUI.SceneInspector( scriptNode ),), 'tabsVisible': True, 'currentTab': 0, 'pinned': [False]} ) ), {'tabs': (GafferSceneUI.SceneHierarchy( scriptNode ),), 'tabsVisible': True, 'currentTab': 0, 'pinned': [False]} ) ) ) ) )\"", ")", "<new_line>", "scriptWindow", ".", "setLayout", "(", "layout", ")", "<new_line>", "scriptWindow", ".", "_Widget__qtWidget", ".", "resize", "(", "995", ",", "500", ")", "<new_line>", "for", "nodeName", "in", "[", "'Group5'", "]", ":", "<new_line>", "<indent>", "script", ".", "selection", "(", ")", ".", "add", "(", "script", ".", "descendant", "(", "nodeName", ")", ")", "<dedent>", "script", ".", "context", "(", ")", "[", "'ui:scene:expandedPaths'", "]", "=", "GafferScene", ".", "PathMatcherData", "(", "GafferScene", ".", "PathMatcher", "(", "[", "'/'", ",", "'/group'", ",", "'/group/group'", ",", "'/group/group/plane'", ",", "'/group/group/sphere'", ",", "'/group/group1'", ",", "'/group/group1/group'", ",", "'/group/group1/group/plane'", ",", "'/group/group1/group/sphere'", ",", "'/group/group1/group1'", ",", "'/group/group1/group1/group'", ",", "'/group/group1/group1/text'", ",", "'/group/group2'", ",", "'/group/group2/group'", ",", "'/group/group2/group/plane'", ",", "'/group/group2/group/sphere'", "]", ")", ")", "<new_line>", "script", ".", "context", "(", ")", "[", "'ui:scene:selectedPaths'", "]", "=", "IECore", ".", "StringVectorData", "(", "[", "'/group/group2/group/sphere'", "]", ")"], 0]
[["import", "os", "<new_line>", "import", "glob", "<new_line>", "import", "IECore", "<new_line>", "class", "convertAnimCache", "(", "IECore", ".", "Op", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ")", ":", "<new_line>", "<indent>", "IECore", ".", "Op", ".", "__init__", "(", "self", ",", "'Converts animation caches from an old skool format to a nice new one.'", ",", "IECore", ".", "FileSequenceParameter", "(", "'result'", ",", "''", ")", ")", "<new_line>", "self", ".", "parameters", "(", ")", ".", "addParameters", "(", "<new_line>", "[", "<new_line>", "IECore", ".", "FileSequenceParameter", "(", "<new_line>", "'inputSequence'", ",", "<new_line>", "'The animation sequence to convert.'", ",", "defaultValue", "=", "<new_line>", "''", ",", "allowEmptyString", "=", "<new_line>", "False", ",", "check", "=", "<new_line>", "IECore", ".", "FileSequenceParameter", ".", "CheckType", ".", "MustExist", ",", "extensions", "=", "<new_line>", "'fio'", ")", ",", "<new_line>", "IECore", ".", "FileSequenceParameter", "(", "<new_line>", "'outputSequence'", ",", "<new_line>", "'The animation sequence to create'", ",", "defaultValue", "=", "<new_line>", "''", ",", "allowEmptyString", "=", "<new_line>", "False", ",", "extensions", "=", "<new_line>", "'fio'", ")", "]", ")", "<dedent>", "def", "doOperation", "(", "self", ",", "args", ")", ":", "<new_line>", "<indent>", "src", "=", "self", ".", "parameters", "(", ")", "[", "'inputSequence'", "]", ".", "getFileSequenceValue", "(", ")", "<new_line>", "dst", "=", "self", ".", "parameters", "(", ")", "[", "'outputSequence'", "]", ".", "getFileSequenceValue", "(", ")", "<new_line>", "if", "isinstance", "(", "dst", ".", "frameList", ",", "IECore", ".", "EmptyFrameList", ")", ":", "<new_line>", "<indent>", "dst", ".", "frameList", "=", "src", ".", "frameList", "<dedent>", "for", "(", "sf", ",", "df", ")", "in", "zip", "(", "src", ".", "fileNames", "(", ")", ",", "dst", ".", "fileNames", "(", ")", ")", ":", "<new_line>", "<indent>", "sc", "=", "IECore", ".", "AttributeCache", "(", "sf", ",", "IECore", ".", "IndexedIOOpenMode", ".", "Read", ")", "<new_line>", "dc", "=", "IECore", ".", "AttributeCache", "(", "df", ",", "IECore", ".", "IndexedIOOpenMode", ".", "Write", ")", "<new_line>", "combinedBound", "=", "IECore", ".", "Box3f", "(", ")", "<new_line>", "for", "objectName", "in", "sc", ".", "objects", "(", ")", ":", "<new_line>", "<indent>", "p", "=", "b", "=", "None", "<new_line>", "with", "IECore", ".", "IgnoredExceptions", "(", "Exception", ")", ":", "<new_line>", "<indent>", "p", "=", "sc", ".", "read", "(", "objectName", ",", "'vertCache.P'", ")", "<new_line>", "b", "=", "sc", ".", "read", "(", "objectName", ",", "'vertCache.boundingBox'", ")", "<dedent>", "if", "(", "(", "p", "is not", "None", ")", "and", "(", "b", "is not", "None", ")", ")", ":", "<new_line>", "<indent>", "combinedBound", ".", "extendBy", "(", "b", ".", "value", ")", "<new_line>", "dc", ".", "write", "(", "(", "'-'", "+", "objectName", ")", ",", "'primVar:P'", ",", "p", ")", "<new_line>", "dc", ".", "write", "(", "(", "'-'", "+", "objectName", ")", ",", "'bound'", ",", "b", ")", "<dedent>", "<dedent>", "dc", ".", "write", "(", "'-'", ",", "'bound'", ",", "IECore", ".", "Box3fData", "(", "combinedBound", ")", ")", "<dedent>", "return", "args", "[", "'outputSequence'", "]", ".", "value", "<dedent>", "<dedent>", "IECore", ".", "registerRunTimeTyped", "(", "convertAnimCache", ")"], 0]
[["import", "os", "<new_line>", "import", "unittest", "<new_line>", "import", "subprocess32", "as", "subprocess", "<new_line>", "import", "IECore", "<new_line>", "import", "Gaffer", "<new_line>", "import", "GafferTest", "<new_line>", "import", "GafferScene", "<new_line>", "import", "GafferAppleseed", "<new_line>", "import", "GafferAppleseedTest", "<new_line>", "class", "AppleseedRenderTest", "(", "GafferTest", ".", "TestCase", ")", ":", "<new_line>", "<indent>", "def", "setUp", "(", "self", ")", ":", "<new_line>", "<indent>", "GafferTest", ".", "TestCase", ".", "setUp", "(", "self", ")", "<new_line>", "self", ".", "__scriptFileName", "=", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.gfr'", ")", "<dedent>", "def", "testExecute", "(", "self", ")", ":", "<new_line>", "<indent>", "s", "=", "Gaffer", ".", "ScriptNode", "(", ")", "<new_line>", "s", "[", "'plane'", "]", "=", "GafferScene", ".", "Plane", "(", ")", "<new_line>", "s", "[", "'render'", "]", "=", "GafferAppleseed", ".", "AppleseedRender", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'mode'", "]", ".", "setValue", "(", "'generate'", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'plane'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'expression'", "]", "=", "Gaffer", ".", "Expression", "(", ")", "<new_line>", "s", "[", "'expression'", "]", ".", "setExpression", "(", "(", "(", "\"parent['render']['fileName'] = '\"", "+", "self", ".", "temporaryDirectory", "(", ")", ")", "+", "\"/test.%d.appleseed' % int( context['frame'] )\"", ")", ")", "<new_line>", "s", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "__scriptFileName", ")", "<new_line>", "s", ".", "save", "(", ")", "<new_line>", "p", "=", "subprocess", ".", "Popen", "(", "<new_line>", "(", "(", "'gaffer execute '", "+", "self", ".", "__scriptFileName", ")", "+", "' -frames 1-3'", ")", ",", "shell", "=", "<new_line>", "True", ",", "stderr", "=", "<new_line>", "subprocess", ".", "PIPE", ")", "<new_line>", "p", ".", "wait", "(", ")", "<new_line>", "self", ".", "failIf", "(", "p", ".", "returncode", ")", "<new_line>", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "<new_line>", "<indent>", "self", ".", "failUnless", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "(", "'/test.%d.appleseed'", "%", "i", ")", ")", ")", ")", "<dedent>", "<dedent>", "def", "testWaitForImage", "(", "self", ")", ":", "<new_line>", "<indent>", "s", "=", "Gaffer", ".", "ScriptNode", "(", ")", "<new_line>", "s", "[", "'plane'", "]", "=", "GafferScene", ".", "Plane", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", "=", "GafferScene", ".", "Outputs", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", ".", "addOutput", "(", "<new_line>", "'beauty'", ",", "<new_line>", "IECore", ".", "Display", "(", "<new_line>", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.exr'", ")", ",", "<new_line>", "'exr'", ",", "<new_line>", "'rgba'", ",", "<new_line>", "{", "}", ")", ")", "<new_line>", "s", "[", "'outputs'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'plane'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "=", "GafferAppleseed", ".", "AppleseedRender", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'outputs'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'verbosity'", "]", ".", "setValue", "(", "'fatal'", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'fileName'", "]", ".", "setValue", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.appleseed'", ")", ")", "<new_line>", "s", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "__scriptFileName", ")", "<new_line>", "s", ".", "save", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'task'", "]", ".", "execute", "(", ")", "<new_line>", "self", ".", "failUnless", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.exr'", ")", ")", ")", "<dedent>", "def", "testExecuteWithStringSubstitutions", "(", "self", ")", ":", "<new_line>", "<indent>", "s", "=", "Gaffer", ".", "ScriptNode", "(", ")", "<new_line>", "s", "[", "'plane'", "]", "=", "GafferScene", ".", "Plane", "(", ")", "<new_line>", "s", "[", "'render'", "]", "=", "GafferAppleseed", ".", "AppleseedRender", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'mode'", "]", ".", "setValue", "(", "'generate'", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'plane'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'fileName'", "]", ".", "setValue", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.####.appleseed'", ")", ")", "<new_line>", "s", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "__scriptFileName", ")", "<new_line>", "s", ".", "save", "(", ")", "<new_line>", "p", "=", "subprocess", ".", "Popen", "(", "<new_line>", "(", "(", "'gaffer execute '", "+", "self", ".", "__scriptFileName", ")", "+", "' -frames 1-3'", ")", ",", "shell", "=", "<new_line>", "True", ",", "stderr", "=", "<new_line>", "subprocess", ".", "PIPE", ")", "<new_line>", "p", ".", "wait", "(", ")", "<new_line>", "self", ".", "failIf", "(", "p", ".", "returncode", ")", "<new_line>", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "<new_line>", "<indent>", "self", ".", "failUnless", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "(", "'/test.%04d.appleseed'", "%", "i", ")", ")", ")", ")", "<dedent>", "<dedent>", "def", "testImageOutput", "(", "self", ")", ":", "<new_line>", "<indent>", "s", "=", "Gaffer", ".", "ScriptNode", "(", ")", "<new_line>", "s", "[", "'plane'", "]", "=", "GafferScene", ".", "Plane", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", "=", "GafferScene", ".", "Outputs", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", ".", "addOutput", "(", "<new_line>", "'beauty'", ",", "<new_line>", "IECore", ".", "Display", "(", "<new_line>", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.####.exr'", ")", ",", "<new_line>", "'exr'", ",", "<new_line>", "'rgba'", ",", "<new_line>", "{", "}", ")", ")", "<new_line>", "s", "[", "'outputs'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'plane'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "=", "GafferAppleseed", ".", "AppleseedRender", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'outputs'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'verbosity'", "]", ".", "setValue", "(", "'fatal'", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'fileName'", "]", ".", "setValue", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.####.appleseed'", ")", ")", "<new_line>", "s", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "__scriptFileName", ")", "<new_line>", "s", ".", "save", "(", ")", "<new_line>", "c", "=", "Gaffer", ".", "Context", "(", ")", "<new_line>", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "<new_line>", "<indent>", "c", ".", "setFrame", "(", "i", ")", "<new_line>", "with", "c", ":", "<new_line>", "<indent>", "s", "[", "'render'", "]", "[", "'task'", "]", ".", "execute", "(", ")", "<dedent>", "<dedent>", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "<new_line>", "<indent>", "self", ".", "failUnless", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "(", "'/test.%04d.exr'", "%", "i", ")", ")", ")", ")", "<dedent>", "<dedent>", "def", "testTypeNamePrefixes", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "assertTypeNamesArePrefixed", "(", "GafferAppleseed", ")", "<new_line>", "self", ".", "assertTypeNamesArePrefixed", "(", "GafferAppleseedTest", ")", "<dedent>", "def", "testDefaultNames", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "assertDefaultNamesAreCorrect", "(", "GafferAppleseed", ")", "<new_line>", "self", ".", "assertDefaultNamesAreCorrect", "(", "GafferAppleseedTest", ")", "<dedent>", "def", "testNodesConstructWithDefaultValues", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "assertNodesConstructWithDefaultValues", "("], 0]
[[".", "ScriptNode", "(", ")", "<new_line>", "s", "[", "'plane'", "]", "=", "GafferScene", ".", "Plane", "(", ")", "<new_line>", "s", "[", "'render'", "]", "=", "GafferAppleseed", ".", "AppleseedRender", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'mode'", "]", ".", "setValue", "(", "'generate'", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'plane'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'fileName'", "]", ".", "setValue", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.####.appleseed'", ")", ")", "<new_line>", "s", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "__scriptFileName", ")", "<new_line>", "s", ".", "save", "(", ")", "<new_line>", "p", "=", "subprocess", ".", "Popen", "(", "<new_line>", "(", "(", "'gaffer execute '", "+", "self", ".", "__scriptFileName", ")", "+", "' -frames 1-3'", ")", ",", "shell", "=", "<new_line>", "True", ",", "stderr", "=", "<new_line>", "subprocess", ".", "PIPE", ")", "<new_line>", "p", ".", "wait", "(", ")", "<new_line>", "self", ".", "failIf", "(", "p", ".", "returncode", ")", "<new_line>", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "<new_line>", "<indent>", "self", ".", "failUnless", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "(", "'/test.%04d.appleseed'", "%", "i", ")", ")", ")", ")", "<dedent>", "<dedent>", "def", "testImageOutput", "(", "self", ")", ":", "<new_line>", "<indent>", "s", "=", "Gaffer", ".", "ScriptNode", "(", ")", "<new_line>", "s", "[", "'plane'", "]", "=", "GafferScene", ".", "Plane", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", "=", "GafferScene", ".", "Outputs", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", ".", "addOutput", "(", "<new_line>", "'beauty'", ",", "<new_line>", "IECore", ".", "Display", "(", "<new_line>", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.####.exr'", ")", ",", "<new_line>", "'exr'", ",", "<new_line>", "'rgba'", ",", "<new_line>", "{", "}", ")", ")", "<new_line>", "s", "[", "'outputs'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'plane'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "=", "GafferAppleseed", ".", "AppleseedRender", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'outputs'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'verbosity'", "]", ".", "setValue", "(", "'fatal'", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'fileName'", "]", ".", "setValue", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/test.####.appleseed'", ")", ")", "<new_line>", "s", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "__scriptFileName", ")", "<new_line>", "s", ".", "save", "(", ")", "<new_line>", "c", "=", "Gaffer", ".", "Context", "(", ")", "<new_line>", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "<new_line>", "<indent>", "c", ".", "setFrame", "(", "i", ")", "<new_line>", "with", "c", ":", "<new_line>", "<indent>", "s", "[", "'render'", "]", "[", "'task'", "]", ".", "execute", "(", ")", "<dedent>", "<dedent>", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "<new_line>", "<indent>", "self", ".", "failUnless", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "(", "'/test.%04d.exr'", "%", "i", ")", ")", ")", ")", "<dedent>", "<dedent>", "def", "testTypeNamePrefixes", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "assertTypeNamesArePrefixed", "(", "GafferAppleseed", ")", "<new_line>", "self", ".", "assertTypeNamesArePrefixed", "(", "GafferAppleseedTest", ")", "<dedent>", "def", "testDefaultNames", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "assertDefaultNamesAreCorrect", "(", "GafferAppleseed", ")", "<new_line>", "self", ".", "assertDefaultNamesAreCorrect", "(", "GafferAppleseedTest", ")", "<dedent>", "def", "testNodesConstructWithDefaultValues", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "assertNodesConstructWithDefaultValues", "(", "GafferAppleseed", ")", "<new_line>", "self", ".", "assertNodesConstructWithDefaultValues", "(", "GafferAppleseedTest", ")", "<dedent>", "def", "testDirectoryCreation", "(", "self", ")", ":", "<new_line>", "<indent>", "s", "=", "Gaffer", ".", "ScriptNode", "(", ")", "<new_line>", "s", "[", "'variables'", "]", ".", "addMember", "(", "'renderDirectory'", ",", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/renderTests'", ")", ")", "<new_line>", "s", "[", "'variables'", "]", ".", "addMember", "(", "'appleseedDirectory'", ",", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/appleseedTests'", ")", ")", "<new_line>", "s", "[", "'plane'", "]", "=", "GafferScene", ".", "Plane", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", "=", "GafferScene", ".", "Outputs", "(", ")", "<new_line>", "s", "[", "'outputs'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'plane'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'outputs'", "]", ".", "addOutput", "(", "<new_line>", "'beauty'", ",", "<new_line>", "IECore", ".", "Display", "(", "<new_line>", "'$renderDirectory/test.####.exr'", ",", "<new_line>", "'exr'", ",", "<new_line>", "'rgba'", ",", "<new_line>", "{", "}", ")", ")", "<new_line>", "s", "[", "'render'", "]", "=", "GafferAppleseed", ".", "AppleseedRender", "(", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'in'", "]", ".", "setInput", "(", "s", "[", "'outputs'", "]", "[", "'out'", "]", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'fileName'", "]", ".", "setValue", "(", "'$appleseedDirectory/test.####.appleseed'", ")", "<new_line>", "s", "[", "'render'", "]", "[", "'mode'", "]", ".", "setValue", "(", "'generate'", ")", "<new_line>", "self", ".", "assertFalse", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/renderTests'", ")", ")", ")", "<new_line>", "self", ".", "assertFalse", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/appleseedTests'", ")", ")", ")", "<new_line>", "self", ".", "assertFalse", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/appleseedTests/test.0001.appleseed'", ")", ")", ")", "<new_line>", "self", ".", "assertFalse", "(", "os", ".", "path", ".", "exists", "(", "self", ".", "__scriptFileName", ")", ")", "<new_line>", "s", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "__scriptFileName", ")", "<new_line>", "s", ".", "save", "(", ")", "<new_line>", "with", "s", ".", "context", "(", ")", ":", "<new_line>", "<indent>", "s", "[", "'render'", "]", "[", "'task'", "]", ".", "execute", "(", ")", "<dedent>", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/renderTests'", ")", ")", ")", "<new_line>", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/appleseedTests'", ")", ")", ")", "<new_line>", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/appleseedTests/test.0001.appleseed'", ")", ")", ")", "<new_line>", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "self", ".", "__scriptFileName", ")", ")", "<new_line>", "with", "s", ".", "context", "(", ")", ":", "<new_line>", "<indent>", "s", "[", "'render'", "]", "[", "'task'", "]", ".", "execute", "(", ")", "<dedent>", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/renderTests'", ")", ")", ")", "<new_line>", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/appleseedTests'", ")", ")", ")", "<new_line>", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "(", "self", ".", "temporaryDirectory", "(", ")", "+", "'/appleseedTests/test.0001.appleseed'", ")", ")", ")", "<dedent>", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "unittest", ".", "main", "(", ")", "<dedent>"], 501]
[["import", "GafferUITest", "<new_line>", "import", "GafferScene", "<new_line>", "import", "GafferSceneUI", "<new_line>", "import", "GafferArnold", "<new_line>", "import", "GafferArnoldUI", "<new_line>", "class", "DocumentationTest", "(", "GafferUITest", ".", "TestCase", ")", ":", "<new_line>", "<indent>", "def", "test", "(", "self", ")", ":", "<new_line>", "<indent>", "self", ".", "maxDiff", "=", "None", "<new_line>", "self", ".", "assertNodesAreDocumented", "(", "<new_line>", "GafferArnold", ",", "additionalTerminalPlugTypes", "=", "<new_line>", "(", "GafferScene", ".", "ScenePlug", ",", ")", ")", "<dedent>", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "unittest", ".", "main", "(", ")", "<dedent>"], 0]
[["import", "IECore", "<new_line>", "class", "parameterChangedCallback", "(", "IECore", ".", "Parameterised", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ")", ":", "<new_line>", "<indent>", "IECore", ".", "Parameterised", ".", "__init__", "(", "self", ",", "''", ")", "<new_line>", "self", ".", "parameters", "(", ")", ".", "addParameters", "(", "<new_line>", "[", "<new_line>", "IECore", ".", "IntParameter", "(", "<new_line>", "'driver'", ",", "<new_line>", "''", ",", "<new_line>", "0", ")", ",", "<new_line>", "IECore", ".", "IntParameter", "(", "<new_line>", "'driven'", ",", "<new_line>", "''", ",", "<new_line>", "0", ")", "]", ")", "<new_line>", "self", ".", "changes", "=", "[", "]", "<dedent>", "def", "parameterChanged", "(", "self", ",", "parameter", ")", ":", "<new_line>", "<indent>", "self", ".", "changes", ".", "append", "(", "(", "parameter", ",", "str", "(", "parameter", ".", "getValue", "(", ")", ")", ")", ")", "<new_line>", "if", "parameter", ".", "isSame", "(", "self", ".", "parameters", "(", ")", "[", "'driver'", "]", ")", ":", "<new_line>", "<indent>", "self", ".", "parameters", "(", ")", "[", "'driven'", "]", ".", "setNumericValue", "(", "(", "self", ".", "parameters", "(", ")", "[", "'driver'", "]", ".", "getNumericValue", "(", ")", "*", "5", ")", ")", "<dedent>", "<dedent>", "<dedent>", "IECore", ".", "registerRunTimeTyped", "(", "parameterChangedCallback", ")"], 0]
[["import", "GafferUI", "<new_line>", "import", "GafferCortexUI", "<new_line>", "class", "ToolParameterValueWidget", "(", "GafferCortexUI", ".", "ParameterValueWidget", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "parameterHandler", ",", "parenting", "=", "None", ")", ":", "<new_line>", "<indent>", "GafferCortexUI", ".", "ParameterValueWidget", ".", "__init__", "(", "<new_line>", "self", ",", "<new_line>", "GafferUI", ".", "ToolPlugValueWidget", "(", "parameterHandler", ".", "plug", "(", ")", ")", ",", "<new_line>", "parameterHandler", ",", "parenting", "=", "<new_line>", "parenting", ")", "<dedent>", "<dedent>"], 0]
[["import", "os", "<new_line>", "import", "IECore", "<new_line>", "import", "Gaffer", "<new_line>", "import", "GafferDispatch", "<new_line>", "class", "TextWriter", "(", "GafferDispatch", ".", "ExecutableNode", ")", ":", "<new_line>", "<indent>", "def", "__init__", "(", "self", ",", "name", "=", "'TextWriter'", ",", "requiresSequenceExecution", "=", "False", ")", ":", "<new_line>", "<indent>", "GafferDispatch", ".", "ExecutableNode", ".", "__init__", "(", "self", ",", "name", ")", "<new_line>", "self", ".", "__requiresSequenceExecution", "=", "requiresSequenceExecution", "<new_line>", "self", ".", "addChild", "(", "Gaffer", ".", "StringPlug", "(", "'fileName'", ",", "Gaffer", ".", "Plug", ".", "Direction", ".", "In", ")", ")", "<new_line>", "self", ".", "addChild", "(", "Gaffer", ".", "StringPlug", "(", "'mode'", ",", "defaultValue", "=", "'w'", ",", "direction", "=", "Gaffer", ".", "Plug", ".", "Direction", ".", "In", ")", ")", "<new_line>", "self", ".", "addChild", "(", "Gaffer", ".", "StringPlug", "(", "'text'", ",", "Gaffer", ".", "Plug", ".", "Direction", ".", "In", ")", ")", "<dedent>", "def", "execute", "(", "self", ")", ":", "<new_line>", "<indent>", "context", "=", "Gaffer", ".", "Context", ".", "current", "(", ")", "<new_line>", "fileName", "=", "self", "[", "'fileName'", "]", ".", "getValue", "(", ")", "<new_line>", "directory", "=", "os", ".", "path", ".", "dirname", "(", "fileName", ")", "<new_line>", "if", "directory", ":", "<new_line>", "<indent>", "try", ":", "<new_line>", "<indent>", "os", ".", "makedirs", "(", "directory", ")", "<dedent>", "except", "OSError", ":", "<new_line>", "<indent>", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ")", ":", "<new_line>", "<indent>", "raise", "<dedent>", "<dedent>", "<dedent>", "text", "=", "self", ".", "__processText", "(", "context", ")", "<new_line>", "with", "file", "(", "fileName", ",", "self", "[", "'mode'", "]", ".", "getValue", "(", ")", ")", "as", "f", ":", "<new_line>", "<indent>", "f", ".", "write", "(", "text", ")", "<dedent>", "<dedent>", "def", "executeSequence", "(", "self", ",", "frames", ")", ":", "<new_line>", "<indent>", "if", "(", "not", "self", ".", "__requiresSequenceExecution", ")", ":", "<new_line>", "<indent>", "GafferDispatch", ".", "ExecutableNode", ".", "executeSequence", "(", "self", ",", "frames", ")", "<new_line>", "return", "<dedent>", "context", "=", "Gaffer", ".", "Context", "(", "Gaffer", ".", "Context", ".", "current", "(", ")", ")", "<new_line>", "fileName", "=", "self", "[", "'fileName'", "]", ".", "getValue", "(", ")", "<new_line>", "with", "file", "(", "fileName", ",", "self", "[", "'mode'", "]", ".", "getValue", "(", ")", ")", "as", "f", ":", "<new_line>", "<indent>", "with", "context", ":", "<new_line>", "<indent>", "for", "frame", "in", "frames", ":", "<new_line>", "<indent>", "context", ".", "setFrame", "(", "frame", ")", "<new_line>", "text", "=", "self", ".", "__processText", "(", "context", ")", "<new_line>", "f", ".", "write", "(", "text", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "def", "hash", "(", "self", ",", "context", ")", ":", "<new_line>", "<indent>", "h", "=", "GafferDispatch", ".", "ExecutableNode", ".", "hash", "(", "self", ",", "context", ")", "<new_line>", "h", ".", "append", "(", "context", ".", "getFrame", "(", ")", ")", "<new_line>", "h", ".", "append", "(", "context", ".", "get", "(", "'textWriter:replace'", ",", "IECore", ".", "StringVectorData", "(", ")", ")", ")", "<new_line>", "self", "[", "'fileName'", "]", ".", "hash", "(", "h", ")", "<new_line>", "self", "[", "'mode'", "]", ".", "hash", "(", "h", ")", "<new_line>", "self", "[", "'text'", "]", ".", "hash", "(", "h", ")", "<new_line>", "return", "h", "<dedent>", "def", "requiresSequenceExecution", "(", "self", ")", ":", "<new_line>", "<indent>", "return", "self", ".", "__requiresSequenceExecution", "<dedent>", "def", "__processText", "(", "self", ",", "context", ")", ":", "<new_line>", "<indent>", "text", "=", "self", "[", "'text'", "]", ".", "getValue", "(", ")", "<new_line>", "replace", "=", "context", ".", "get", "(", "'textWriter:replace'", ",", "IECore", ".", "StringVectorData", "(", ")", ")", "<new_line>", "if", "(", "replace", "and", "(", "len", "(", "replace", ")", "==", "2", ")", ")", ":", "<new_line>", "<indent>", "text", "=", "text", ".", "replace", "(", "replace", "[", "0", "]", ",", "replace", "[", "1", "]", ")", "<dedent>", "return", "text", "<dedent>", "<dedent>", "IECore", ".", "registerRunTimeTyped", "(", "TextWriter", ",", "typeName", "=", "'GafferDispatchTest::TextWriter'", ")"], 0]
[["import", "os", "<new_line>", "import", "IECore", "<new_line>", "import", "Gaffer", "<new_line>", "import", "GafferImage", "<new_line>", "import", "GafferTest", "<new_line>", "import", "GafferImageTest", "<new_line>", "class", "CopyImageMetadataTest", "(", "GafferImageTest", ".", "ImageTestCase", ")", ":", "<new_line>", "<indent>", "checkerFile", "=", "os", ".", "path", ".", "expandvars", "(", "'$GAFFER_ROOT/python/GafferImageTest/images/checker.exr'", ")", "<new_line>", "def", "test", "(", "self", ")", ":", "<new_line>", "<indent>", "r", "=", "GafferImage", ".", "ImageReader", "(", ")", "<new_line>", "r", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "checkerFile", ")", "<new_line>", "inMetadata", "=", "r", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "d", "=", "GafferImage", ".", "DeleteImageMetadata", "(", ")", "<new_line>", "d", "[", "'in'", "]", ".", "setInput", "(", "r", "[", "'out'", "]", ")", "<new_line>", "d", "[", "'names'", "]", ".", "setValue", "(", "'*'", ")", "<new_line>", "m", "=", "GafferImage", ".", "CopyImageMetadata", "(", ")", "<new_line>", "m", "[", "'in'", "]", ".", "setInput", "(", "d", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'copyFrom'", "]", ".", "setInput", "(", "r", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "''", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "self", ".", "assertEqual", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", ",", "IECore", ".", "CompoundObject", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "m", "[", "'out'", "]", ".", "image", "(", ")", ",", "d", "[", "'out'", "]", ".", "image", "(", ")", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'screen* compression'", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "expected", "=", "set", "(", "[", "'screenWindowWidth'", ",", "'screenWindowCenter'", ",", "'compression'", "]", ")", "<new_line>", "self", ".", "assertEqual", "(", "set", "(", "metadata", ".", "keys", "(", ")", ")", ",", "expected", ")", "<new_line>", "for", "key", "in", "metadata", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "self", ".", "assertEqual", "(", "metadata", "[", "key", "]", ",", "inMetadata", "[", "key", "]", ")", "<dedent>", "m", "[", "'invertNames'", "]", ".", "setValue", "(", "True", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "expected", "=", "set", "(", "[", "'PixelAspectRatio'", ",", "'oiio:ColorSpace'", "]", ")", "<new_line>", "self", ".", "assertEqual", "(", "set", "(", "metadata", ".", "keys", "(", ")", ")", ",", "expected", ")", "<new_line>", "for", "key", "in", "metadata", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "self", ".", "assertEqual", "(", "metadata", "[", "key", "]", ",", "inMetadata", "[", "key", "]", ")", "<dedent>", "<dedent>", "def", "testOverwrite", "(", "self", ")", ":", "<new_line>", "<indent>", "r", "=", "GafferImage", ".", "ImageReader", "(", ")", "<new_line>", "r", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "checkerFile", ")", "<new_line>", "inMetadata", "=", "r", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "a", "=", "GafferImage", ".", "ImageMetadata", "(", ")", "<new_line>", "a", "[", "'metadata'", "]", ".", "addMember", "(", "'compression'", ",", "IECore", ".", "StringData", "(", "'extraFancyCompressor'", ")", ")", "<new_line>", "m", "=", "GafferImage", ".", "CopyImageMetadata", "(", ")", "<new_line>", "m", "[", "'in'", "]", ".", "setInput", "(", "r", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'copyFrom'", "]", ".", "setInput", "(", "a", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "''", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "self", ".", "assertEqual", "(", "metadata", "[", "'compression'", "]", ",", "IECore", ".", "StringData", "(", "'zips'", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", ",", "inMetadata", ")", "<new_line>", "self", ".", "assertEqual", "(", "m", "[", "'out'", "]", ".", "image", "(", ")", ",", "r", "[", "'out'", "]", ".", "image", "(", ")", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'compression'", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "'compression'", "in", "metadata", ".", "keys", "(", ")", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "metadata", "[", "'compression'", "]", ",", "IECore", ".", "StringData", "(", "'extraFancyCompressor'", ")", ")", "<dedent>", "def", "testDirtyPropogation", "(", "self", ")", ":", "<new_line>", "<indent>", "c", "=", "GafferImage", ".", "Constant", "(", ")", "<new_line>", "r", "=", "GafferImage", ".", "ImageReader", "(", ")", "<new_line>", "r", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "checkerFile", ")", "<new_line>", "inMetadata", "=", "r", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "m", "=", "GafferImage", ".", "CopyImageMetadata", "(", ")", "<new_line>", "m", "[", "'in'", "]", ".", "setInput", "(", "c", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'copyFrom'", "]", ".", "setInput", "(", "r", "[", "'out'", "]", ")", "<new_line>", "cs", "=", "GafferTest", ".", "CapturingSlot", "(", "m", ".", "plugDirtiedSignal", "(", ")", ")", "<new_line>", "m", "[", "'copyFrom'", "]", ".", "setInput", "(", "c", "[", "'out'", "]", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", "in", "set", "(", "(", "e", "[", "0", "]", "for", "e", "in", "cs", ")", ")", ")", ")", "<new_line>", "del", "cs", "[", ":", "]", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'test'", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", "in", "set", "(", "(", "e", "[", "0", "]", "for", "e", "in", "cs", ")", ")", ")", ")", "<new_line>", "del", "cs", "[", ":", "]", "<new_line>", "m", "[", "'invertNames'", "]", ".", "setValue", "(", "True", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", "in", "set", "(", "(", "e", "[", "0", "]", "for", "e", "in", "cs", ")", ")", ")", ")", "<dedent>", "def", "testPassThrough", "(", "self", ")", ":", "<new_line>", "<indent>", "c", "=", "GafferImage", ".", "Constant", "(", ")", "<new_line>", "i", "=", "GafferImage", ".", "ImageReader", "(", ")", "<new_line>", "i", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "checkerFile", ")", "<new_line>", "m", "=", "GafferImage", ".", "CopyImageMetadata", "(", ")", "<new_line>", "m", "[", "'in'", "]", ".", "setInput", "(", "i", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'*'", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'format'", "]", ".", "hash", "(", ")", ",", "m", "[", "'out'", "]", "[", "'format'", "]", ".", "hash", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'dataWindow'", "]", ".", "hash", "(", ")", ",", "m", "[", "'out'", "]", "[", "'dataWindow'", "]", ".", "hash", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'channelNames'", "]", ".", "hash", "(", ")", ",", "m", "[", "'out'", "]", "[", "'channelNames'", "]", ".", "hash", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "("], 0]
[[")", ",", "d", "[", "'out'", "]", ".", "image", "(", ")", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'screen* compression'", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "expected", "=", "set", "(", "[", "'screenWindowWidth'", ",", "'screenWindowCenter'", ",", "'compression'", "]", ")", "<new_line>", "self", ".", "assertEqual", "(", "set", "(", "metadata", ".", "keys", "(", ")", ")", ",", "expected", ")", "<new_line>", "for", "key", "in", "metadata", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "self", ".", "assertEqual", "(", "metadata", "[", "key", "]", ",", "inMetadata", "[", "key", "]", ")", "<dedent>", "m", "[", "'invertNames'", "]", ".", "setValue", "(", "True", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "expected", "=", "set", "(", "[", "'PixelAspectRatio'", ",", "'oiio:ColorSpace'", "]", ")", "<new_line>", "self", ".", "assertEqual", "(", "set", "(", "metadata", ".", "keys", "(", ")", ")", ",", "expected", ")", "<new_line>", "for", "key", "in", "metadata", ".", "keys", "(", ")", ":", "<new_line>", "<indent>", "self", ".", "assertEqual", "(", "metadata", "[", "key", "]", ",", "inMetadata", "[", "key", "]", ")", "<dedent>", "<dedent>", "def", "testOverwrite", "(", "self", ")", ":", "<new_line>", "<indent>", "r", "=", "GafferImage", ".", "ImageReader", "(", ")", "<new_line>", "r", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "checkerFile", ")", "<new_line>", "inMetadata", "=", "r", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "a", "=", "GafferImage", ".", "ImageMetadata", "(", ")", "<new_line>", "a", "[", "'metadata'", "]", ".", "addMember", "(", "'compression'", ",", "IECore", ".", "StringData", "(", "'extraFancyCompressor'", ")", ")", "<new_line>", "m", "=", "GafferImage", ".", "CopyImageMetadata", "(", ")", "<new_line>", "m", "[", "'in'", "]", ".", "setInput", "(", "r", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'copyFrom'", "]", ".", "setInput", "(", "a", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "''", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "self", ".", "assertEqual", "(", "metadata", "[", "'compression'", "]", ",", "IECore", ".", "StringData", "(", "'zips'", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", ",", "inMetadata", ")", "<new_line>", "self", ".", "assertEqual", "(", "m", "[", "'out'", "]", ".", "image", "(", ")", ",", "r", "[", "'out'", "]", ".", "image", "(", ")", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'compression'", ")", "<new_line>", "metadata", "=", "m", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "'compression'", "in", "metadata", ".", "keys", "(", ")", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "metadata", "[", "'compression'", "]", ",", "IECore", ".", "StringData", "(", "'extraFancyCompressor'", ")", ")", "<dedent>", "def", "testDirtyPropogation", "(", "self", ")", ":", "<new_line>", "<indent>", "c", "=", "GafferImage", ".", "Constant", "(", ")", "<new_line>", "r", "=", "GafferImage", ".", "ImageReader", "(", ")", "<new_line>", "r", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "checkerFile", ")", "<new_line>", "inMetadata", "=", "r", "[", "'out'", "]", "[", "'metadata'", "]", ".", "getValue", "(", ")", "<new_line>", "m", "=", "GafferImage", ".", "CopyImageMetadata", "(", ")", "<new_line>", "m", "[", "'in'", "]", ".", "setInput", "(", "c", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'copyFrom'", "]", ".", "setInput", "(", "r", "[", "'out'", "]", ")", "<new_line>", "cs", "=", "GafferTest", ".", "CapturingSlot", "(", "m", ".", "plugDirtiedSignal", "(", ")", ")", "<new_line>", "m", "[", "'copyFrom'", "]", ".", "setInput", "(", "c", "[", "'out'", "]", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", "in", "set", "(", "(", "e", "[", "0", "]", "for", "e", "in", "cs", ")", ")", ")", ")", "<new_line>", "del", "cs", "[", ":", "]", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'test'", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", "in", "set", "(", "(", "e", "[", "0", "]", "for", "e", "in", "cs", ")", ")", ")", ")", "<new_line>", "del", "cs", "[", ":", "]", "<new_line>", "m", "[", "'invertNames'", "]", ".", "setValue", "(", "True", ")", "<new_line>", "self", ".", "assertTrue", "(", "(", "m", "[", "'out'", "]", "[", "'metadata'", "]", "in", "set", "(", "(", "e", "[", "0", "]", "for", "e", "in", "cs", ")", ")", ")", ")", "<dedent>", "def", "testPassThrough", "(", "self", ")", ":", "<new_line>", "<indent>", "c", "=", "GafferImage", ".", "Constant", "(", ")", "<new_line>", "i", "=", "GafferImage", ".", "ImageReader", "(", ")", "<new_line>", "i", "[", "'fileName'", "]", ".", "setValue", "(", "self", ".", "checkerFile", ")", "<new_line>", "m", "=", "GafferImage", ".", "CopyImageMetadata", "(", ")", "<new_line>", "m", "[", "'in'", "]", ".", "setInput", "(", "i", "[", "'out'", "]", ")", "<new_line>", "m", "[", "'names'", "]", ".", "setValue", "(", "'*'", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'format'", "]", ".", "hash", "(", ")", ",", "m", "[", "'out'", "]", "[", "'format'", "]", ".", "hash", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'dataWindow'", "]", ".", "hash", "(", ")", ",", "m", "[", "'out'", "]", "[", "'dataWindow'", "]", ".", "hash", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'channelNames'", "]", ".", "hash", "(", ")", ",", "m", "[", "'out'", "]", "[", "'channelNames'", "]", ".", "hash", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'format'", "]", ".", "getValue", "(", ")", ",", "m", "[", "'out'", "]", "[", "'format'", "]", ".", "getValue", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'dataWindow'", "]", ".", "getValue", "(", ")", ",", "m", "[", "'out'", "]", "[", "'dataWindow'", "]", ".", "getValue", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'channelNames'", "]", ".", "getValue", "(", ")", ",", "m", "[", "'out'", "]", "[", "'channelNames'", "]", ".", "getValue", "(", ")", ")", "<new_line>", "context", "=", "Gaffer", ".", "Context", "(", ")", "<new_line>", "context", "[", "'image:tileOrigin'", "]", "=", "IECore", ".", "V2i", "(", "0", ")", "<new_line>", "with", "context", ":", "<new_line>", "<indent>", "for", "c", "in", "[", "'G'", ",", "'B'", ",", "'A'", "]", ":", "<new_line>", "<indent>", "context", "[", "'image:channelName'", "]", "=", "c", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'channelData'", "]", ".", "hash", "(", ")", ",", "m", "[", "'out'", "]", "[", "'channelData'", "]", ".", "hash", "(", ")", ")", "<new_line>", "self", ".", "assertEqual", "(", "i", "[", "'out'", "]", "[", "'channelData'", "]", ".", "getValue", "(", ")", ",", "m", "[", "'out'", "]", "[", "'channelData'", "]", ".", "getValue", "(", ")", ")", "<dedent>", "<dedent>", "<dedent>", "<dedent>", "if", "(", "__name__", "==", "'__main__'", ")", ":", "<new_line>", "<indent>", "unittest", ".", "main", "(", ")", "<dedent>"], 796]
